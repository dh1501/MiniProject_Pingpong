
pingpong_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b4c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f7c  08012d00  08012d00  00022d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c7c  08015c7c  000303e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015c7c  08015c7c  00025c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c84  08015c84  000303e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c84  08015c84  00025c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c88  08015c88  00025c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e8  20000000  08015c8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000303e8  2**0
                  CONTENTS
 10 .bss          00006008  200003e8  200003e8  000303e8  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200063f0  200063f0  000303e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000284a8  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ea3  00000000  00000000  000588c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f0  00000000  00000000  0005e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f38  00000000  00000000  00060958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cca1  00000000  00000000  00062890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a851  00000000  00000000  0008f531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5c84  00000000  00000000  000b9d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001afa06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2a8  00000000  00000000  001afa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003e8 	.word	0x200003e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012ce4 	.word	0x08012ce4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003ec 	.word	0x200003ec
 80001ec:	08012ce4 	.word	0x08012ce4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <vApplicationGetIdleTaskMemory+0x2c>)
 8001028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <vApplicationGetIdleTaskMemory+0x30>)
 800102e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000404 	.word	0x20000404
 8001048:	200004b8 	.word	0x200004b8

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b0a4      	sub	sp, #144	; 0x90
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f002 fcfd 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f879 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f917 	bl	800128c <MX_GPIO_Init>
  MX_SPI5_Init();
 800105e:	f000 f8df 	bl	8001220 <MX_SPI5_Init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, Task01_Init, osPriorityAboveNormal, 0, 216);
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <main+0xd8>)
 8001064:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8001076:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f009 f942 	bl	800a306 <osThreadCreate>
 8001082:	4603      	mov	r3, r0
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <main+0xdc>)
 8001086:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, Task02_Init, osPriorityNormal, 0, 216);
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <main+0xe0>)
 800108a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800108e:	461d      	mov	r5, r3
 8001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 800109c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f009 f92f 	bl	800a306 <osThreadCreate>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a21      	ldr	r2, [pc, #132]	; (8001130 <main+0xe4>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, Task03_Init, osPriorityNormal, 0, 216);
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <main+0xe8>)
 80010b0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010b4:	461d      	mov	r5, r3
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 80010c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f009 f91c 	bl	800a306 <osThreadCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <main+0xec>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task04, Task04_Init, osPriorityAboveNormal, 0, 216);
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <main+0xf0>)
 80010d6:	f107 0420 	add.w	r4, r7, #32
 80010da:	461d      	mov	r5, r3
 80010dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 f909 	bl	800a306 <osThreadCreate>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <main+0xf4>)
 80010f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task04 */
  osThreadDef(Task05, Task05_Init, osPriorityNormal, 0, 216);
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <main+0xf8>)
 80010fc:	1d3c      	adds	r4, r7, #4
 80010fe:	461d      	mov	r5, r3
 8001100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f009 f8f8 	bl	800a306 <osThreadCreate>
 8001116:	4603      	mov	r3, r0
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <main+0xfc>)
 800111a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800111c:	f009 f8ec 	bl	800a2f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001120:	e7fe      	b.n	8001120 <main+0xd4>
 8001122:	bf00      	nop
 8001124:	08012d28 	.word	0x08012d28
 8001128:	20000710 	.word	0x20000710
 800112c:	08012d44 	.word	0x08012d44
 8001130:	20000714 	.word	0x20000714
 8001134:	08012d60 	.word	0x08012d60
 8001138:	20000718 	.word	0x20000718
 800113c:	08012d7c 	.word	0x08012d7c
 8001140:	2000071c 	.word	0x2000071c
 8001144:	08012d98 	.word	0x08012d98
 8001148:	20000720 	.word	0x20000720

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	; 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f00d f9e3 	bl	800e526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <SystemClock_Config+0xcc>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <SystemClock_Config+0xd0>)
 8001196:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011bc:	2308      	movs	r3, #8
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	4618      	mov	r0, r3
 80011d4:	f005 fa54 	bl	8006680 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011de:	f000 fb2d 	bl	800183c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2105      	movs	r1, #5
 8001200:	4618      	mov	r0, r3
 8001202:	f005 fcb5 	bl	8006b70 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800120c:	f000 fb16 	bl	800183c <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <MX_SPI5_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <MX_SPI5_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI5_Init+0x64>)
 800122c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI5_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_SPI5_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI5_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI5_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI5_Init+0x64>)
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI5_Init+0x64>)
 8001254:	2218      	movs	r2, #24
 8001256:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_SPI5_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI5_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_SPI5_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI5_Init+0x64>)
 800126c:	220a      	movs	r2, #10
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_SPI5_Init+0x64>)
 8001272:	f006 f916 	bl	80074a2 <HAL_SPI_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800127c:	f000 fade 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200006b8 	.word	0x200006b8
 8001288:	40015000 	.word	0x40015000

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012ac:	f043 0320 	orr.w	r3, r3, #32
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0320 	and.w	r3, r3, #32
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a26      	ldr	r2, [pc, #152]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_GPIO_Init+0xd4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <MX_GPIO_Init+0xd4>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_GPIO_Init+0xd4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_GPIO_Init+0xd4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <MX_GPIO_Init+0xd4>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_GPIO_Init+0xd4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0xd8>)
 8001336:	f003 fc33 	bl	8004ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 800133a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_GPIO_Init+0xd8>)
 8001354:	f003 f96c 	bl	8004630 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40021800 	.word	0x40021800

08001368 <Task01_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01_Init */
void Task01_Init(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8001370:	f00c fa7e 	bl	800d870 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //Init Gyro
    BSP_GYRO_Init();
 8001374:	f001 fae0 	bl	8002938 <BSP_GYRO_Init>

  //Init LCD
	BSP_LCD_Init();
 8001378:	f001 fb58 	bl	8002a2c <BSP_LCD_Init>

 //thiet lap cac thong so mac dinh ban dau cho viec hien thi ra man hinh LCD
	BSP_LCD_LayerDefaultInit(1,SDRAM_DEVICE_ADDR);
 800137c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001380:	2001      	movs	r0, #1
 8001382:	f001 fbd5 	bl	8002b30 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f001 fc36 	bl	8002bf8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800138c:	f001 ff98 	bl	80032c0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <Task01_Init+0x90>)
 8001392:	f001 fca3 	bl	8002cdc <BSP_LCD_Clear>
	BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <Task01_Init+0x90>)
 8001398:	f001 fc56 	bl	8002c48 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f001 fc3a 	bl	8002c18 <BSP_LCD_SetTextColor>

	BSP_LCD_SetFont(&Font20); //set kich thuoc font cho viec hien thi text ra man hinh LCD
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <Task01_Init+0x94>)
 80013a6:	f001 fc69 	bl	8002c7c <BSP_LCD_SetFont>
	BSP_LCD_GetFont();
 80013aa:	f001 fc81 	bl	8002cb0 <BSP_LCD_GetFont>

  for(;;)
  {
	 //lay gia tri toa do goc tu gyroscope
	  BSP_GYRO_GetXYZ(xyz_rotation);
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <Task01_Init+0x98>)
 80013b0:	f001 fb28 	bl	8002a04 <BSP_GYRO_GetXYZ>

	  for(int i = 0;i<3;i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e016      	b.n	80013e8 <Task01_Init+0x80>
	  {
		  xyz_ang_rate[i] = (xyz_rotation[i]/2000)*70; //lay angular rate
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <Task01_Init+0x98>)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	ed93 7a00 	vldr	s14, [r3]
 80013c6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001404 <Task01_Init+0x9c>
 80013ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001408 <Task01_Init+0xa0>
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	4a0d      	ldr	r2, [pc, #52]	; (800140c <Task01_Init+0xa4>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0;i<3;i++)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	dde5      	ble.n	80013ba <Task01_Init+0x52>
	  }

	  osDelay(100);
 80013ee:	2064      	movs	r0, #100	; 0x64
 80013f0:	f008 ffd5 	bl	800a39e <osDelay>
	  BSP_GYRO_GetXYZ(xyz_rotation);
 80013f4:	e7db      	b.n	80013ae <Task01_Init+0x46>
 80013f6:	bf00      	nop
 80013f8:	ff008000 	.word	0xff008000
 80013fc:	2000010c 	.word	0x2000010c
 8001400:	20000724 	.word	0x20000724
 8001404:	44fa0000 	.word	0x44fa0000
 8001408:	428c0000 	.word	0x428c0000
 800140c:	20000730 	.word	0x20000730

08001410 <Task02_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Init */
void Task02_Init(void const * argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    if(xyz_ang_rate[0] >= 0){
 8001418:	4b7b      	ldr	r3, [pc, #492]	; (8001608 <Task02_Init+0x1f8>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	f2c0 80ea 	blt.w	80015fe <Task02_Init+0x1ee>

    if(xyz_ang_rate[0] <= 25) //trang thai luc bong chua duoc tang - trang thai can bang
 800142a:	4b77      	ldr	r3, [pc, #476]	; (8001608 <Task02_Init+0x1f8>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	d82f      	bhi.n	800149e <Task02_Init+0x8e>
    {
    	BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800143e:	4873      	ldr	r0, [pc, #460]	; (800160c <Task02_Init+0x1fc>)
 8001440:	f001 fc4c 	bl	8002cdc <BSP_LCD_Clear>
    	BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 160, 25);
 8001444:	f001 fb5c 	bl	8002b00 <BSP_LCD_GetXSize>
 8001448:	4603      	mov	r3, r0
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b78      	subs	r3, #120	; 0x78
 800144e:	b29b      	uxth	r3, r3
 8001450:	2219      	movs	r2, #25
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fda9 	bl	8002fac <BSP_LCD_DrawCircle>
    	BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, 160, 25);
 800145a:	f001 fb51 	bl	8002b00 <BSP_LCD_GetXSize>
 800145e:	4603      	mov	r3, r0
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b78      	subs	r3, #120	; 0x78
 8001464:	b29b      	uxth	r3, r3
 8001466:	2219      	movs	r2, #25
 8001468:	21a0      	movs	r1, #160	; 0xa0
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fe88 	bl	8003180 <BSP_LCD_FillCircle>


    	sprintf(str,"%d",count_score);
 8001470:	4b67      	ldr	r3, [pc, #412]	; (8001610 <Task02_Init+0x200>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4967      	ldr	r1, [pc, #412]	; (8001614 <Task02_Init+0x204>)
 8001478:	4867      	ldr	r0, [pc, #412]	; (8001618 <Task02_Init+0x208>)
 800147a:	f00d ffeb 	bl	800f454 <siprintf>
    	//hien thi diem dat duoc tren man hinh
    	//noi ket chuoi
    	BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 800147e:	2303      	movs	r3, #3
 8001480:	4a66      	ldr	r2, [pc, #408]	; (800161c <Task02_Init+0x20c>)
 8001482:	210d      	movs	r1, #13
 8001484:	200b      	movs	r0, #11
 8001486:	f001 fc95 	bl	8002db4 <BSP_LCD_DisplayStringAt>
    	BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 800148a:	2303      	movs	r3, #3
 800148c:	4a62      	ldr	r2, [pc, #392]	; (8001618 <Task02_Init+0x208>)
 800148e:	210d      	movs	r1, #13
 8001490:	2064      	movs	r0, #100	; 0x64
 8001492:	f001 fc8f 	bl	8002db4 <BSP_LCD_DisplayStringAt>

    	osDelay(50);
 8001496:	2032      	movs	r0, #50	; 0x32
 8001498:	f008 ff81 	bl	800a39e <osDelay>
 800149c:	e0af      	b.n	80015fe <Task02_Init+0x1ee>
    else //truong hop bong da duoc tang len
    {
    	//phu thuoc vao muc do tang bong tuc la lay tu angular rate x quyet dinh do to cua bong
    	//do to cua bong cung chinh la khoang cach giua mat vot voi diem can bang
    	//luc nay cho bong duoc tang len max roi tu tu ha xuong den diem can bang
    	height = fabs(xyz_ang_rate[0])/30 + 25;
 800149e:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <Task02_Init+0x1f8>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eef0 7ae7 	vabs.f32	s15, s15
 80014a8:	ee17 0a90 	vmov	r0, s15
 80014ac:	f7ff f85c 	bl	8000568 <__aeabi_f2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <Task02_Init+0x210>)
 80014b6:	f7ff f9d9 	bl	800086c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b57      	ldr	r3, [pc, #348]	; (8001624 <Task02_Init+0x214>)
 80014c8:	f7fe fef0 	bl	80002ac <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb50 	bl	8000b78 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a53      	ldr	r2, [pc, #332]	; (8001628 <Task02_Init+0x218>)
 80014dc:	6013      	str	r3, [r2, #0]

    	//neu height qua lon chung ta se set max height, tranh truong hop bong vuot ra ngoai pham vi cho phep
    	if(height > 110)
 80014de:	4b52      	ldr	r3, [pc, #328]	; (8001628 <Task02_Init+0x218>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b6e      	cmp	r3, #110	; 0x6e
 80014e4:	dd02      	ble.n	80014ec <Task02_Init+0xdc>
    	{
    		height = 110; //ep height khong vuot tam
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <Task02_Init+0x218>)
 80014e8:	226e      	movs	r2, #110	; 0x6e
 80014ea:	601a      	str	r2, [r3, #0]
    	}
    	//-- ket thuc set max height

 
    	flag = 1; //flag co de nhan biet khi nao bong duoc tang len va tinh diem
 80014ec:	4b4f      	ldr	r3, [pc, #316]	; (800162c <Task02_Init+0x21c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
    	while(height!=25){
 80014f2:	e03a      	b.n	800156a <Task02_Init+0x15a>

    		if(count_height == height) break;
 80014f4:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <Task02_Init+0x220>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <Task02_Init+0x218>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d039      	beq.n	8001574 <Task02_Init+0x164>

    		++count_height;
 8001500:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <Task02_Init+0x220>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <Task02_Init+0x220>)
 8001508:	6013      	str	r3, [r2, #0]

    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 800150a:	4840      	ldr	r0, [pc, #256]	; (800160c <Task02_Init+0x1fc>)
 800150c:	f001 fbe6 	bl	8002cdc <BSP_LCD_Clear>
    		BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, RollY_Value, count_height);
 8001510:	f001 faf6 	bl	8002b00 <BSP_LCD_GetXSize>
 8001514:	4603      	mov	r3, r0
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b78      	subs	r3, #120	; 0x78
 800151a:	b29b      	uxth	r3, r3
 800151c:	4a45      	ldr	r2, [pc, #276]	; (8001634 <Task02_Init+0x224>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	b291      	uxth	r1, r2
 8001522:	4a43      	ldr	r2, [pc, #268]	; (8001630 <Task02_Init+0x220>)
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	b292      	uxth	r2, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fd3f 	bl	8002fac <BSP_LCD_DrawCircle>
    		BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, RollY_Value, count_height);
 800152e:	f001 fae7 	bl	8002b00 <BSP_LCD_GetXSize>
 8001532:	4603      	mov	r3, r0
 8001534:	b29b      	uxth	r3, r3
 8001536:	3b78      	subs	r3, #120	; 0x78
 8001538:	b29b      	uxth	r3, r3
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <Task02_Init+0x224>)
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	b291      	uxth	r1, r2
 8001540:	4a3b      	ldr	r2, [pc, #236]	; (8001630 <Task02_Init+0x220>)
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	b292      	uxth	r2, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fe1a 	bl	8003180 <BSP_LCD_FillCircle>

    		BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 800154c:	2303      	movs	r3, #3
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <Task02_Init+0x20c>)
 8001550:	210d      	movs	r1, #13
 8001552:	200b      	movs	r0, #11
 8001554:	f001 fc2e 	bl	8002db4 <BSP_LCD_DisplayStringAt>
    		BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 8001558:	2303      	movs	r3, #3
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <Task02_Init+0x208>)
 800155c:	210d      	movs	r1, #13
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f001 fc28 	bl	8002db4 <BSP_LCD_DisplayStringAt>

    		osDelay(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f008 ff1a 	bl	800a39e <osDelay>
    	while(height!=25){
 800156a:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <Task02_Init+0x218>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b19      	cmp	r3, #25
 8001570:	d1c0      	bne.n	80014f4 <Task02_Init+0xe4>
 8001572:	e03d      	b.n	80015f0 <Task02_Init+0x1e0>
    		if(count_height == height) break;
 8001574:	bf00      	nop

    		} //end while

    	while(count_height != 25)
 8001576:	e03b      	b.n	80015f0 <Task02_Init+0x1e0>
    	{
    		count_height--;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <Task02_Init+0x220>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3b01      	subs	r3, #1
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <Task02_Init+0x220>)
 8001580:	6013      	str	r3, [r2, #0]
    		BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8001582:	4822      	ldr	r0, [pc, #136]	; (800160c <Task02_Init+0x1fc>)
 8001584:	f001 fbaa 	bl	8002cdc <BSP_LCD_Clear>
    		BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, RollY_Value, count_height);
 8001588:	f001 faba 	bl	8002b00 <BSP_LCD_GetXSize>
 800158c:	4603      	mov	r3, r0
 800158e:	b29b      	uxth	r3, r3
 8001590:	3b78      	subs	r3, #120	; 0x78
 8001592:	b29b      	uxth	r3, r3
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <Task02_Init+0x224>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	b291      	uxth	r1, r2
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <Task02_Init+0x220>)
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	b292      	uxth	r2, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fd03 	bl	8002fac <BSP_LCD_DrawCircle>
    		BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 120, RollY_Value, count_height);
 80015a6:	f001 faab 	bl	8002b00 <BSP_LCD_GetXSize>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b78      	subs	r3, #120	; 0x78
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <Task02_Init+0x224>)
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	b291      	uxth	r1, r2
 80015b8:	4a1d      	ldr	r2, [pc, #116]	; (8001630 <Task02_Init+0x220>)
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	b292      	uxth	r2, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fdde 	bl	8003180 <BSP_LCD_FillCircle>

    		sprintf(str,"%d",count_score);
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <Task02_Init+0x200>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4912      	ldr	r1, [pc, #72]	; (8001614 <Task02_Init+0x204>)
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <Task02_Init+0x208>)
 80015ce:	f00d ff41 	bl	800f454 <siprintf>
    		//hien thi diem dat duoc tren man hinh
    		BSP_LCD_DisplayStringAt(11,13,display_score,LEFT_MODE);
 80015d2:	2303      	movs	r3, #3
 80015d4:	4a11      	ldr	r2, [pc, #68]	; (800161c <Task02_Init+0x20c>)
 80015d6:	210d      	movs	r1, #13
 80015d8:	200b      	movs	r0, #11
 80015da:	f001 fbeb 	bl	8002db4 <BSP_LCD_DisplayStringAt>
    		BSP_LCD_DisplayStringAt(100,13,(uint8_t*)str,LEFT_MODE);
 80015de:	2303      	movs	r3, #3
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <Task02_Init+0x208>)
 80015e2:	210d      	movs	r1, #13
 80015e4:	2064      	movs	r0, #100	; 0x64
 80015e6:	f001 fbe5 	bl	8002db4 <BSP_LCD_DisplayStringAt>
    		osDelay(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f008 fed7 	bl	800a39e <osDelay>
    	while(count_height != 25)
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <Task02_Init+0x220>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b19      	cmp	r3, #25
 80015f6:	d1bf      	bne.n	8001578 <Task02_Init+0x168>
    	}
    	count_height = 25; //reset lai bien dem do do cao bong
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <Task02_Init+0x220>)
 80015fa:	2219      	movs	r2, #25
 80015fc:	601a      	str	r2, [r3, #0]
    	}
	}
	  osDelay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f008 fecd 	bl	800a39e <osDelay>
    if(xyz_ang_rate[0] >= 0){
 8001604:	e708      	b.n	8001418 <Task02_Init+0x8>
 8001606:	bf00      	nop
 8001608:	20000730 	.word	0x20000730
 800160c:	ff008000 	.word	0xff008000
 8001610:	20000748 	.word	0x20000748
 8001614:	08012db4 	.word	0x08012db4
 8001618:	2000074c 	.word	0x2000074c
 800161c:	20000084 	.word	0x20000084
 8001620:	403e0000 	.word	0x403e0000
 8001624:	40390000 	.word	0x40390000
 8001628:	2000073c 	.word	0x2000073c
 800162c:	20000744 	.word	0x20000744
 8001630:	20000080 	.word	0x20000080
 8001634:	2000008c 	.word	0x2000008c

08001638 <Task03_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03_Init */
void Task03_Init(void const * argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03_Init */
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg_buf,"Do cao bong:%d\n", count_height);
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <Task03_Init+0x30>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4909      	ldr	r1, [pc, #36]	; (800166c <Task03_Init+0x34>)
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <Task03_Init+0x38>)
 800164a:	f00d ff03 	bl	800f454 <siprintf>
  	CDC_Transmit_HS(msg_buf,strlen((const char*)msg_buf));
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <Task03_Init+0x38>)
 8001650:	f7fe fdce 	bl	80001f0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29b      	uxth	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <Task03_Init+0x38>)
 800165c:	f00c f9d4 	bl	800da08 <CDC_Transmit_HS>
    osDelay(100); // cu 100ms xuat do cao bong 1 lan
 8001660:	2064      	movs	r0, #100	; 0x64
 8001662:	f008 fe9c 	bl	800a39e <osDelay>
	sprintf(msg_buf,"Do cao bong:%d\n", count_height);
 8001666:	e7eb      	b.n	8001640 <Task03_Init+0x8>
 8001668:	20000080 	.word	0x20000080
 800166c:	08012db8 	.word	0x08012db8
 8001670:	20000000 	.word	0x20000000

08001674 <Task04_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04_Init */
void Task04_Init(void const * argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04_Init */
  /* Infinite loop */
  for(;;)
  {

	if(height >= 40 && height <= 110 && flag == 1)
 800167c:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <Task04_Init+0xfc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b27      	cmp	r3, #39	; 0x27
 8001682:	dd71      	ble.n	8001768 <Task04_Init+0xf4>
 8001684:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <Task04_Init+0xfc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b6e      	cmp	r3, #110	; 0x6e
 800168a:	dc6d      	bgt.n	8001768 <Task04_Init+0xf4>
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <Task04_Init+0x100>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d169      	bne.n	8001768 <Task04_Init+0xf4>
	{
		++count_score;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <Task04_Init+0x104>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a37      	ldr	r2, [pc, #220]	; (8001778 <Task04_Init+0x104>)
 800169c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <Task04_Init+0x108>)
 80016a6:	f003 fa7b 	bl	8004ba0 <HAL_GPIO_WritePin>
		osDelay(1700);
 80016aa:	f240 60a4 	movw	r0, #1700	; 0x6a4
 80016ae:	f008 fe76 	bl	800a39e <osDelay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b8:	4830      	ldr	r0, [pc, #192]	; (800177c <Task04_Init+0x108>)
 80016ba:	f003 fa71 	bl	8004ba0 <HAL_GPIO_WritePin>

		  flag = 0;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <Task04_Init+0x100>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
			//get current height
			compare_height = fabs(xyz_ang_rate[0])/30 + 25;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <Task04_Init+0x10c>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eef0 7ae7 	vabs.f32	s15, s15
 80016ce:	ee17 0a90 	vmov	r0, s15
 80016d2:	f7fe ff49 	bl	8000568 <__aeabi_f2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <Task04_Init+0x110>)
 80016dc:	f7ff f8c6 	bl	800086c <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b26      	ldr	r3, [pc, #152]	; (8001788 <Task04_Init+0x114>)
 80016ee:	f7fe fddd 	bl	80002ac <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff fa3d 	bl	8000b78 <__aeabi_d2iz>
 80016fe:	4603      	mov	r3, r0
 8001700:	4a22      	ldr	r2, [pc, #136]	; (800178c <Task04_Init+0x118>)
 8001702:	6013      	str	r3, [r2, #0]

			//neu height qua lon chung ta se set max height, tranh truong hop bong vuot ra ngoai pham vi cho phep
			if(compare_height > 110)
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <Task04_Init+0x118>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b6e      	cmp	r3, #110	; 0x6e
 800170a:	dd02      	ble.n	8001712 <Task04_Init+0x9e>
			{
			    compare_height = 110; //ep height khong vuot tam
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <Task04_Init+0x118>)
 800170e:	226e      	movs	r2, #110	; 0x6e
 8001710:	601a      	str	r2, [r3, #0]
			}
			//-- ket thuc set max height
			if(compare_height >= 60)
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <Task04_Init+0x118>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b3b      	cmp	r3, #59	; 0x3b
 8001718:	dd26      	ble.n	8001768 <Task04_Init+0xf4>
			{
				//---- GAME OVER SCREEN ----
				//BEGIN
				    BSP_LCD_Clear(LCD_COLOR_RED);
 800171a:	481d      	ldr	r0, [pc, #116]	; (8001790 <Task04_Init+0x11c>)
 800171c:	f001 fade 	bl	8002cdc <BSP_LCD_Clear>
				    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001720:	481b      	ldr	r0, [pc, #108]	; (8001790 <Task04_Init+0x11c>)
 8001722:	f001 fa91 	bl	8002c48 <BSP_LCD_SetBackColor>
				    BSP_LCD_DisplayStringAt(1, 130, "GAME OVER", CENTER_MODE);
 8001726:	2301      	movs	r3, #1
 8001728:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <Task04_Init+0x120>)
 800172a:	2182      	movs	r1, #130	; 0x82
 800172c:	2001      	movs	r0, #1
 800172e:	f001 fb41 	bl	8002db4 <BSP_LCD_DisplayStringAt>

				    BSP_LCD_DisplayStringAt(1,150,display_score,CENTER_MODE);
 8001732:	2301      	movs	r3, #1
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <Task04_Init+0x124>)
 8001736:	2196      	movs	r1, #150	; 0x96
 8001738:	2001      	movs	r0, #1
 800173a:	f001 fb3b 	bl	8002db4 <BSP_LCD_DisplayStringAt>
				    BSP_LCD_DisplayStringAt(1,175,(uint8_t*)str,CENTER_MODE);
 800173e:	2301      	movs	r3, #1
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <Task04_Init+0x128>)
 8001742:	21af      	movs	r1, #175	; 0xaf
 8001744:	2001      	movs	r0, #1
 8001746:	f001 fb35 	bl	8002db4 <BSP_LCD_DisplayStringAt>

				 //END

				    //turn on RED LED
				    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <Task04_Init+0x108>)
 8001752:	f003 fa25 	bl	8004ba0 <HAL_GPIO_WritePin>

				    vTaskDelete(Task01_Init); //Xóa đi các task sau khi game over chỉ giữ lại mỗi task4 để hiển thị 'GAME OVER'
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <Task04_Init+0x12c>)
 8001758:	f009 fc90 	bl	800b07c <vTaskDelete>
				    vTaskDelete(Task02_Init);
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <Task04_Init+0x130>)
 800175e:	f009 fc8d 	bl	800b07c <vTaskDelete>
				    vTaskDelete(Task03_Init);
 8001762:	4811      	ldr	r0, [pc, #68]	; (80017a8 <Task04_Init+0x134>)
 8001764:	f009 fc8a 	bl	800b07c <vTaskDelete>
			}

	}
	osDelay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f008 fe18 	bl	800a39e <osDelay>
	if(height >= 40 && height <= 110 && flag == 1)
 800176e:	e785      	b.n	800167c <Task04_Init+0x8>
 8001770:	2000073c 	.word	0x2000073c
 8001774:	20000744 	.word	0x20000744
 8001778:	20000748 	.word	0x20000748
 800177c:	40021800 	.word	0x40021800
 8001780:	20000730 	.word	0x20000730
 8001784:	403e0000 	.word	0x403e0000
 8001788:	40390000 	.word	0x40390000
 800178c:	20000740 	.word	0x20000740
 8001790:	ffff0000 	.word	0xffff0000
 8001794:	08012dc8 	.word	0x08012dc8
 8001798:	20000084 	.word	0x20000084
 800179c:	2000074c 	.word	0x2000074c
 80017a0:	08001369 	.word	0x08001369
 80017a4:	08001411 	.word	0x08001411
 80017a8:	08001639 	.word	0x08001639

080017ac <Task05_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05_Init */
void Task05_Init(void const * argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	//theo thuoc do do thi neu KIT nam nhu the kha nang cao tu 90 do den 100 do hon co ve chinh xac
	/* Infinite loop */
  for(;;)
  {
	//Version1: sử dụng trực tiếp angular rate tu tinh
	if(xyz_ang_rate >= 180 && xyz_ang_rate[0] <= 190) //trang thai lan can bang
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <Task05_Init+0x60>)
 80017b6:	2bb3      	cmp	r3, #179	; 0xb3
 80017b8:	d90c      	bls.n	80017d4 <Task05_Init+0x28>
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <Task05_Init+0x60>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001810 <Task05_Init+0x64>
 80017c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	d802      	bhi.n	80017d4 <Task05_Init+0x28>
	{
		RollY_Value = 160;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <Task05_Init+0x68>)
 80017d0:	22a0      	movs	r2, #160	; 0xa0
 80017d2:	601a      	str	r2, [r3, #0]
	}

	if(xyz_ang_rate[0]> 190) //phat hien KIT nghieng thi bat dau lan banh
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <Task05_Init+0x60>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001810 <Task05_Init+0x64>
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	dd0d      	ble.n	8001804 <Task05_Init+0x58>
	{
		++RollY_Value;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <Task05_Init+0x68>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <Task05_Init+0x68>)
 80017f0:	6013      	str	r3, [r2, #0]
		if(RollY_Value==295)
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <Task05_Init+0x68>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f240 1227 	movw	r2, #295	; 0x127
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d102      	bne.n	8001804 <Task05_Init+0x58>
		{
			RollY_Value = 160;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <Task05_Init+0x68>)
 8001800:	22a0      	movs	r2, #160	; 0xa0
 8001802:	601a      	str	r2, [r3, #0]
		}
	}

    osDelay(50);
 8001804:	2032      	movs	r0, #50	; 0x32
 8001806:	f008 fdca 	bl	800a39e <osDelay>
	if(xyz_ang_rate >= 180 && xyz_ang_rate[0] <= 190) //trang thai lan can bang
 800180a:	e7d3      	b.n	80017b4 <Task05_Init+0x8>
 800180c:	20000730 	.word	0x20000730
 8001810:	433e0000 	.word	0x433e0000
 8001814:	2000008c 	.word	0x2000008c

08001818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800182a:	f002 f933 	bl	8003a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40001000 	.word	0x40001000

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001844:	e7fe      	b.n	8001844 <Error_Handler+0x8>
	...

08001848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_MspInit+0x54>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_MspInit+0x54>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x54>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_MspInit+0x54>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_MspInit+0x54>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x54>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f002 fa21 	bl	8003cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_SPI_MspInit+0x94>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d134      	bne.n	800192c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018d0:	6453      	str	r3, [r2, #68]	; 0x44
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_SPI_MspInit+0x98>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018fa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800190c:	2305      	movs	r3, #5
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_SPI_MspInit+0x9c>)
 8001918:	f002 fe8a 	bl	8004630 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	2105      	movs	r1, #5
 8001920:	2055      	movs	r0, #85	; 0x55
 8001922:	f002 f9d7 	bl	8003cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001926:	2055      	movs	r0, #85	; 0x55
 8001928:	f002 f9f0 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40015000 	.word	0x40015000
 8001938:	40023800 	.word	0x40023800
 800193c:	40021400 	.word	0x40021400

08001940 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_SPI_MspDeInit+0x38>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10d      	bne.n	800196e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_SPI_MspDeInit+0x3c>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_SPI_MspDeInit+0x3c>)
 8001958:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800195e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <HAL_SPI_MspDeInit+0x40>)
 8001964:	f003 f810 	bl	8004988 <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 8001968:	2055      	movs	r0, #85	; 0x55
 800196a:	f002 f9dd 	bl	8003d28 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40015000 	.word	0x40015000
 800197c:	40023800 	.word	0x40023800
 8001980:	40021400 	.word	0x40021400

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_InitTick+0xe4>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_InitTick+0xe4>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_InitTick+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 fae4 	bl	8006f88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ca:	f005 fac9 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 80019ce:	6378      	str	r0, [r7, #52]	; 0x34
 80019d0:	e004      	b.n	80019dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019d2:	f005 fac5 	bl	8006f60 <HAL_RCC_GetPCLK1Freq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_InitTick+0xe8>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3b01      	subs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_InitTick+0xec>)
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_InitTick+0xf0>)
 80019ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_InitTick+0xec>)
 80019f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_InitTick+0xec>)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_InitTick+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_InitTick+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_InitTick+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <HAL_InitTick+0xec>)
 8001a12:	f006 fc43 	bl	800829c <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11b      	bne.n	8001a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <HAL_InitTick+0xec>)
 8001a26:	f006 fc93 	bl	8008350 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a38:	2036      	movs	r0, #54	; 0x36
 8001a3a:	f002 f967 	bl	8003d0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d808      	bhi.n	8001a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	; 0x36
 8001a4a:	f002 f943 	bl	8003cd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0xf4>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e002      	b.n	8001a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	20000758 	.word	0x20000758
 8001a74:	40001000 	.word	0x40001000
 8001a78:	20000118 	.word	0x20000118

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <NMI_Handler+0x4>

08001a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <MemManage_Handler+0x4>

08001a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <TIM6_DAC_IRQHandler+0x10>)
 8001aae:	f006 fcbf 	bl	8008430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000758 	.word	0x20000758

08001abc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <OTG_HS_IRQHandler+0x10>)
 8001ac2:	f003 fcb0 	bl	8005426 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20005cb4 	.word	0x20005cb4

08001ad0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <SPI5_IRQHandler+0x10>)
 8001ad6:	f006 f985 	bl	8007de4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200006b8 	.word	0x200006b8

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001afe:	f00c fbe1 	bl	800e2c4 <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
	return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit (int status)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b26:	e7fe      	b.n	8001b26 <_exit+0x12>

08001b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e00a      	b.n	8001b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b3a:	f3af 8000 	nop.w
 8001b3e:	4601      	mov	r1, r0
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	b2ca      	uxtb	r2, r1
 8001b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf0      	blt.n	8001b3a <_read+0x12>
	}

return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e009      	b.n	8001b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	dbf1      	blt.n	8001b74 <_write+0x12>
	}
	return len;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_close>:

int _close(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_isatty>:

int _isatty(int file)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bda:	2301      	movs	r3, #1
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f00c fb46 	bl	800e2c4 <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20030000 	.word	0x20030000
 8001c64:	00004000 	.word	0x00004000
 8001c68:	200007a0 	.word	0x200007a0
 8001c6c:	200063f0 	.word	0x200063f0

08001c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
	  ldr   sp, =_estack       /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ccc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c98:	480d      	ldr	r0, [pc, #52]	; (8001cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c9a:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb0:	4c0b      	ldr	r4, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cbe:	f7ff ffd7 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f00c fbfb 	bl	800e4bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff f9c1 	bl	800104c <main>
  bx  lr    
 8001cca:	4770      	bx	lr
	  ldr   sp, =_estack       /* set stack pointer */
 8001ccc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	200003e8 	.word	0x200003e8
  ldr r2, =_sidata
 8001cd8:	08015c8c 	.word	0x08015c8c
  ldr r2, =_sbss
 8001cdc:	200003e8 	.word	0x200003e8
  ldr r4, =_ebss
 8001ce0:	200063f0 	.word	0x200063f0

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>

08001ce6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cea:	f000 fc73 	bl	80025d4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001cee:	20ca      	movs	r0, #202	; 0xca
 8001cf0:	f000 f95d 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001cf4:	20c3      	movs	r0, #195	; 0xc3
 8001cf6:	f000 f967 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001cfa:	2008      	movs	r0, #8
 8001cfc:	f000 f964 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001d00:	2050      	movs	r0, #80	; 0x50
 8001d02:	f000 f961 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001d06:	20cf      	movs	r0, #207	; 0xcf
 8001d08:	f000 f951 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f95b 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d12:	20c1      	movs	r0, #193	; 0xc1
 8001d14:	f000 f958 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d18:	2030      	movs	r0, #48	; 0x30
 8001d1a:	f000 f955 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d1e:	20ed      	movs	r0, #237	; 0xed
 8001d20:	f000 f945 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d24:	2064      	movs	r0, #100	; 0x64
 8001d26:	f000 f94f 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	f000 f94c 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d30:	2012      	movs	r0, #18
 8001d32:	f000 f949 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d36:	2081      	movs	r0, #129	; 0x81
 8001d38:	f000 f946 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d3c:	20e8      	movs	r0, #232	; 0xe8
 8001d3e:	f000 f936 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d42:	2085      	movs	r0, #133	; 0x85
 8001d44:	f000 f940 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f93d 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d4e:	2078      	movs	r0, #120	; 0x78
 8001d50:	f000 f93a 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d54:	20cb      	movs	r0, #203	; 0xcb
 8001d56:	f000 f92a 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d5a:	2039      	movs	r0, #57	; 0x39
 8001d5c:	f000 f934 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d60:	202c      	movs	r0, #44	; 0x2c
 8001d62:	f000 f931 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f92e 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d6c:	2034      	movs	r0, #52	; 0x34
 8001d6e:	f000 f92b 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d72:	2002      	movs	r0, #2
 8001d74:	f000 f928 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d78:	20f7      	movs	r0, #247	; 0xf7
 8001d7a:	f000 f918 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d7e:	2020      	movs	r0, #32
 8001d80:	f000 f922 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d84:	20ea      	movs	r0, #234	; 0xea
 8001d86:	f000 f912 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f91c 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f000 f919 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d96:	20b1      	movs	r0, #177	; 0xb1
 8001d98:	f000 f909 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f000 f913 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001da2:	201b      	movs	r0, #27
 8001da4:	f000 f910 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001da8:	20b6      	movs	r0, #182	; 0xb6
 8001daa:	f000 f900 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001dae:	200a      	movs	r0, #10
 8001db0:	f000 f90a 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001db4:	20a2      	movs	r0, #162	; 0xa2
 8001db6:	f000 f907 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001dba:	20c0      	movs	r0, #192	; 0xc0
 8001dbc:	f000 f8f7 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001dc0:	2010      	movs	r0, #16
 8001dc2:	f000 f901 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001dc6:	20c1      	movs	r0, #193	; 0xc1
 8001dc8:	f000 f8f1 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001dcc:	2010      	movs	r0, #16
 8001dce:	f000 f8fb 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001dd2:	20c5      	movs	r0, #197	; 0xc5
 8001dd4:	f000 f8eb 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001dd8:	2045      	movs	r0, #69	; 0x45
 8001dda:	f000 f8f5 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001dde:	2015      	movs	r0, #21
 8001de0:	f000 f8f2 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001de4:	20c7      	movs	r0, #199	; 0xc7
 8001de6:	f000 f8e2 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001dea:	2090      	movs	r0, #144	; 0x90
 8001dec:	f000 f8ec 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001df0:	2036      	movs	r0, #54	; 0x36
 8001df2:	f000 f8dc 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001df6:	20c8      	movs	r0, #200	; 0xc8
 8001df8:	f000 f8e6 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001dfc:	20f2      	movs	r0, #242	; 0xf2
 8001dfe:	f000 f8d6 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 f8e0 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001e08:	20b0      	movs	r0, #176	; 0xb0
 8001e0a:	f000 f8d0 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001e0e:	20c2      	movs	r0, #194	; 0xc2
 8001e10:	f000 f8da 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e14:	20b6      	movs	r0, #182	; 0xb6
 8001e16:	f000 f8ca 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f000 f8d4 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e20:	20a7      	movs	r0, #167	; 0xa7
 8001e22:	f000 f8d1 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e26:	2027      	movs	r0, #39	; 0x27
 8001e28:	f000 f8ce 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e2c:	2004      	movs	r0, #4
 8001e2e:	f000 f8cb 	bl	8001fc8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e32:	202a      	movs	r0, #42	; 0x2a
 8001e34:	f000 f8bb 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f000 f8c5 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f8c2 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f000 f8bf 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e4a:	20ef      	movs	r0, #239	; 0xef
 8001e4c:	f000 f8bc 	bl	8001fc8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e50:	202b      	movs	r0, #43	; 0x2b
 8001e52:	f000 f8ac 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f8b6 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f000 f8b3 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 f8b0 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e68:	203f      	movs	r0, #63	; 0x3f
 8001e6a:	f000 f8ad 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e6e:	20f6      	movs	r0, #246	; 0xf6
 8001e70:	f000 f89d 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f000 f8a7 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f8a4 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e80:	2006      	movs	r0, #6
 8001e82:	f000 f8a1 	bl	8001fc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e86:	202c      	movs	r0, #44	; 0x2c
 8001e88:	f000 f891 	bl	8001fae <ili9341_WriteReg>
  LCD_Delay(200);
 8001e8c:	20c8      	movs	r0, #200	; 0xc8
 8001e8e:	f000 fc8f 	bl	80027b0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e92:	2026      	movs	r0, #38	; 0x26
 8001e94:	f000 f88b 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f000 f895 	bl	8001fc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e9e:	20e0      	movs	r0, #224	; 0xe0
 8001ea0:	f000 f885 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f000 f88f 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001eaa:	2029      	movs	r0, #41	; 0x29
 8001eac:	f000 f88c 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001eb0:	2024      	movs	r0, #36	; 0x24
 8001eb2:	f000 f889 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001eb6:	200c      	movs	r0, #12
 8001eb8:	f000 f886 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ebc:	200e      	movs	r0, #14
 8001ebe:	f000 f883 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ec2:	2009      	movs	r0, #9
 8001ec4:	f000 f880 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ec8:	204e      	movs	r0, #78	; 0x4e
 8001eca:	f000 f87d 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ece:	2078      	movs	r0, #120	; 0x78
 8001ed0:	f000 f87a 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ed4:	203c      	movs	r0, #60	; 0x3c
 8001ed6:	f000 f877 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001eda:	2009      	movs	r0, #9
 8001edc:	f000 f874 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ee0:	2013      	movs	r0, #19
 8001ee2:	f000 f871 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ee6:	2005      	movs	r0, #5
 8001ee8:	f000 f86e 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001eec:	2017      	movs	r0, #23
 8001eee:	f000 f86b 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ef2:	2011      	movs	r0, #17
 8001ef4:	f000 f868 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 f865 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001efe:	20e1      	movs	r0, #225	; 0xe1
 8001f00:	f000 f855 	bl	8001fae <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 f85f 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001f0a:	2016      	movs	r0, #22
 8001f0c:	f000 f85c 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f10:	201b      	movs	r0, #27
 8001f12:	f000 f859 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f16:	2004      	movs	r0, #4
 8001f18:	f000 f856 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f1c:	2011      	movs	r0, #17
 8001f1e:	f000 f853 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f000 f850 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f28:	2031      	movs	r0, #49	; 0x31
 8001f2a:	f000 f84d 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f2e:	2033      	movs	r0, #51	; 0x33
 8001f30:	f000 f84a 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f34:	2042      	movs	r0, #66	; 0x42
 8001f36:	f000 f847 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f3a:	2005      	movs	r0, #5
 8001f3c:	f000 f844 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f40:	200c      	movs	r0, #12
 8001f42:	f000 f841 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f46:	200a      	movs	r0, #10
 8001f48:	f000 f83e 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f4c:	2028      	movs	r0, #40	; 0x28
 8001f4e:	f000 f83b 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f52:	202f      	movs	r0, #47	; 0x2f
 8001f54:	f000 f838 	bl	8001fc8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f58:	200f      	movs	r0, #15
 8001f5a:	f000 f835 	bl	8001fc8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f5e:	2011      	movs	r0, #17
 8001f60:	f000 f825 	bl	8001fae <ili9341_WriteReg>
  LCD_Delay(200);
 8001f64:	20c8      	movs	r0, #200	; 0xc8
 8001f66:	f000 fc23 	bl	80027b0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f6a:	2029      	movs	r0, #41	; 0x29
 8001f6c:	f000 f81f 	bl	8001fae <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f70:	202c      	movs	r0, #44	; 0x2c
 8001f72:	f000 f81c 	bl	8001fae <ili9341_WriteReg>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f7e:	f000 fb29 	bl	80025d4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f82:	2103      	movs	r1, #3
 8001f84:	20d3      	movs	r0, #211	; 0xd3
 8001f86:	f000 f82c 	bl	8001fe2 <ili9341_ReadData>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29b      	uxth	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f96:	2029      	movs	r0, #41	; 0x29
 8001f98:	f000 f809 	bl	8001fae <ili9341_WriteReg>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001fa4:	2028      	movs	r0, #40	; 0x28
 8001fa6:	f000 f802 	bl	8001fae <ili9341_WriteReg>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fba4 	bl	8002708 <LCD_IO_WriteReg>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fb75 	bl	80026c4 <LCD_IO_WriteData>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	460a      	mov	r2, r1
 8001fec:	80fb      	strh	r3, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ff2:	797a      	ldrb	r2, [r7, #5]
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fba7 	bl	800274c <LCD_IO_ReadData>
 8001ffe:	4603      	mov	r3, r0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800200c:	23f0      	movs	r3, #240	; 0xf0
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800201c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002038:	f000 fbc6 	bl	80027c8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002042:	f107 030f 	add.w	r3, r7, #15
 8002046:	2201      	movs	r2, #1
 8002048:	2120      	movs	r1, #32
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fc08 	bl	8002860 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	b29b      	uxth	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800205a:	f107 030f 	add.w	r3, r7, #15
 800205e:	2201      	movs	r2, #1
 8002060:	2123      	movs	r1, #35	; 0x23
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fbfc 	bl	8002860 <GYRO_IO_Write>
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002084:	f000 fba0 	bl	80027c8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	2201      	movs	r2, #1
 800208c:	210f      	movs	r1, #15
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fc18 	bl	80028c4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8002094:	79fb      	ldrb	r3, [r7, #7]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	2201      	movs	r2, #1
 80020a8:	2124      	movs	r1, #36	; 0x24
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fc0a 	bl	80028c4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	2201      	movs	r2, #1
 80020be:	2124      	movs	r1, #36	; 0x24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fbcd 	bl	8002860 <GYRO_IO_Write>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80020e2:	f107 030f 	add.w	r3, r7, #15
 80020e6:	2201      	movs	r2, #1
 80020e8:	2120      	movs	r1, #32
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fbb8 	bl	8002860 <GYRO_IO_Write>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	2300      	movs	r3, #0
 8002108:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800210a:	f107 030f 	add.w	r3, r7, #15
 800210e:	2201      	movs	r2, #1
 8002110:	2130      	movs	r1, #48	; 0x30
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fbd6 	bl	80028c4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002118:	f107 030e 	add.w	r3, r7, #14
 800211c:	2201      	movs	r2, #1
 800211e:	2122      	movs	r1, #34	; 0x22
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fbcf 	bl	80028c4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800212c:	b2db      	uxtb	r3, r3
 800212e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	121b      	asrs	r3, r3, #8
 8002136:	b25a      	sxtb	r2, r3
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b25b      	sxtb	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	f023 0320 	bic.w	r3, r3, #32
 800214a:	b2db      	uxtb	r3, r3
 800214c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	7bbb      	ldrb	r3, [r7, #14]
 8002154:	4313      	orrs	r3, r2
 8002156:	b2db      	uxtb	r3, r3
 8002158:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800215a:	f107 030f 	add.w	r3, r7, #15
 800215e:	2201      	movs	r2, #1
 8002160:	2130      	movs	r1, #48	; 0x30
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fb7c 	bl	8002860 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002168:	f107 030e 	add.w	r3, r7, #14
 800216c:	2201      	movs	r2, #1
 800216e:	2122      	movs	r1, #34	; 0x22
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fb75 	bl	8002860 <GYRO_IO_Write>
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002188:	f107 030f 	add.w	r3, r7, #15
 800218c:	2201      	movs	r2, #1
 800218e:	2122      	movs	r1, #34	; 0x22
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fb97 	bl	80028c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e00c      	b.n	80021cc <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d109      	bne.n	80021cc <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	f023 0308 	bic.w	r3, r3, #8
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021cc:	f107 030f 	add.w	r3, r7, #15
 80021d0:	2201      	movs	r2, #1
 80021d2:	2122      	movs	r1, #34	; 0x22
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fb43 	bl	8002860 <GYRO_IO_Write>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021ec:	f107 030f 	add.w	r3, r7, #15
 80021f0:	2201      	movs	r2, #1
 80021f2:	2122      	movs	r1, #34	; 0x22
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fb65 	bl	80028c4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002206:	b2db      	uxtb	r3, r3
 8002208:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	e009      	b.n	8002224 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d106      	bne.n	8002224 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	f023 0308 	bic.w	r3, r3, #8
 800221c:	b2db      	uxtb	r3, r3
 800221e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002224:	f107 030f 	add.w	r3, r7, #15
 8002228:	2201      	movs	r2, #1
 800222a:	2122      	movs	r1, #34	; 0x22
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fb17 	bl	8002860 <GYRO_IO_Write>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002244:	f107 030f 	add.w	r3, r7, #15
 8002248:	2201      	movs	r2, #1
 800224a:	2121      	movs	r1, #33	; 0x21
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fb39 	bl	80028c4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002258:	b2db      	uxtb	r3, r3
 800225a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4313      	orrs	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002266:	f107 030f 	add.w	r3, r7, #15
 800226a:	2201      	movs	r2, #1
 800226c:	2121      	movs	r1, #33	; 0x21
 800226e:	4618      	mov	r0, r3
 8002270:	f000 faf6 	bl	8002860 <GYRO_IO_Write>
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002286:	f107 030f 	add.w	r3, r7, #15
 800228a:	2201      	movs	r2, #1
 800228c:	2124      	movs	r1, #36	; 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fb18 	bl	80028c4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f023 0310 	bic.w	r3, r3, #16
 800229a:	b2db      	uxtb	r3, r3
 800229c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80022a8:	f107 030f 	add.w	r3, r7, #15
 80022ac:	2201      	movs	r2, #1
 80022ae:	2124      	movs	r1, #36	; 0x24
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fad5 	bl	8002860 <GYRO_IO_Write>
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	2300      	movs	r3, #0
 80022ce:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80022e8:	f107 030f 	add.w	r3, r7, #15
 80022ec:	2201      	movs	r2, #1
 80022ee:	2123      	movs	r1, #35	; 0x23
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fae7 	bl	80028c4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80022f6:	f107 0318 	add.w	r3, r7, #24
 80022fa:	2206      	movs	r2, #6
 80022fc:	2128      	movs	r1, #40	; 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fae0 	bl	80028c4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d123      	bne.n	8002356 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	e01c      	b.n	800234e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	3301      	adds	r3, #1
 800231a:	3328      	adds	r3, #40	; 0x28
 800231c:	443b      	add	r3, r7
 800231e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002322:	b29b      	uxth	r3, r3
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	3328      	adds	r3, #40	; 0x28
 800232e:	443b      	add	r3, r7
 8002330:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	b21a      	sxth	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	3328      	adds	r3, #40	; 0x28
 8002342:	443b      	add	r3, r7
 8002344:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	3301      	adds	r3, #1
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b02      	cmp	r3, #2
 8002352:	dddf      	ble.n	8002314 <L3GD20_ReadXYZAngRate+0x54>
 8002354:	e022      	b.n	800239c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	e01c      	b.n	8002396 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	3328      	adds	r3, #40	; 0x28
 8002362:	443b      	add	r3, r7
 8002364:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002368:	b29b      	uxth	r3, r3
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	b29a      	uxth	r2, r3
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3301      	adds	r3, #1
 8002374:	3328      	adds	r3, #40	; 0x28
 8002376:	443b      	add	r3, r7
 8002378:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800237c:	b29b      	uxth	r3, r3
 800237e:	4413      	add	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	b21a      	sxth	r2, r3
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	3328      	adds	r3, #40	; 0x28
 800238a:	443b      	add	r3, r7
 800238c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	3301      	adds	r3, #1
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b02      	cmp	r3, #2
 800239a:	dddf      	ble.n	800235c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d00c      	beq.n	80023c0 <L3GD20_ReadXYZAngRate+0x100>
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	dc0d      	bgt.n	80023c6 <L3GD20_ReadXYZAngRate+0x106>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <L3GD20_ReadXYZAngRate+0xf4>
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d003      	beq.n	80023ba <L3GD20_ReadXYZAngRate+0xfa>
 80023b2:	e008      	b.n	80023c6 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <L3GD20_ReadXYZAngRate+0x14c>)
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023b8:	e005      	b.n	80023c6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <L3GD20_ReadXYZAngRate+0x150>)
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023be:	e002      	b.n	80023c6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <L3GD20_ReadXYZAngRate+0x154>)
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023c4:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
 80023ca:	e016      	b.n	80023fa <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	3328      	adds	r3, #40	; 0x28
 80023d2:	443b      	add	r3, r7
 80023d4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	3301      	adds	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	dde5      	ble.n	80023cc <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	410c0000 	.word	0x410c0000
 8002410:	418c0000 	.word	0x418c0000
 8002414:	428c0000 	.word	0x428c0000

08002418 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800241c:	4819      	ldr	r0, [pc, #100]	; (8002484 <SPIx_Init+0x6c>)
 800241e:	f005 fdeb 	bl	8007ff8 <HAL_SPI_GetState>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d12b      	bne.n	8002480 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <SPIx_Init+0x6c>)
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <SPIx_Init+0x70>)
 800242c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <SPIx_Init+0x6c>)
 8002430:	2218      	movs	r2, #24
 8002432:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <SPIx_Init+0x6c>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <SPIx_Init+0x6c>)
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <SPIx_Init+0x6c>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <SPIx_Init+0x6c>)
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <SPIx_Init+0x6c>)
 800244e:	2207      	movs	r2, #7
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <SPIx_Init+0x6c>)
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <SPIx_Init+0x6c>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <SPIx_Init+0x6c>)
 8002460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002464:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <SPIx_Init+0x6c>)
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SPIx_Init+0x6c>)
 800246e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002472:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <SPIx_Init+0x6c>)
 8002476:	f000 f873 	bl	8002560 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800247a:	4802      	ldr	r0, [pc, #8]	; (8002484 <SPIx_Init+0x6c>)
 800247c:	f005 f811 	bl	80074a2 <HAL_SPI_Init>
  } 
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	200007a4 	.word	0x200007a4
 8002488:	40015000 	.word	0x40015000

0800248c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	b29a      	uxth	r2, r3
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <SPIx_Read+0x38>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f107 0108 	add.w	r1, r7, #8
 80024a6:	4808      	ldr	r0, [pc, #32]	; (80024c8 <SPIx_Read+0x3c>)
 80024a8:	f005 f9e8 	bl	800787c <HAL_SPI_Receive>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024b6:	f000 f847 	bl	8002548 <SPIx_Error>
  }
  
  return readvalue;
 80024ba:	68bb      	ldr	r3, [r7, #8]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000100 	.word	0x20000100
 80024c8:	200007a4 	.word	0x200007a4

080024cc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <SPIx_Write+0x34>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1db9      	adds	r1, r7, #6
 80024e0:	2201      	movs	r2, #1
 80024e2:	4808      	ldr	r0, [pc, #32]	; (8002504 <SPIx_Write+0x38>)
 80024e4:	f005 f88e 	bl	8007604 <HAL_SPI_Transmit>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024f2:	f000 f829 	bl	8002548 <SPIx_Error>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000100 	.word	0x20000100
 8002504:	200007a4 	.word	0x200007a4

08002508 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af02      	add	r7, sp, #8
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <SPIx_WriteRead+0x38>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f107 020f 	add.w	r2, r7, #15
 800251e:	1df9      	adds	r1, r7, #7
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2301      	movs	r3, #1
 8002524:	4807      	ldr	r0, [pc, #28]	; (8002544 <SPIx_WriteRead+0x3c>)
 8002526:	f005 faba 	bl	8007a9e <HAL_SPI_TransmitReceive>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002530:	f000 f80a 	bl	8002548 <SPIx_Error>
  }
  
  return receivedbyte;
 8002534:	7bfb      	ldrb	r3, [r7, #15]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000100 	.word	0x20000100
 8002544:	200007a4 	.word	0x200007a4

08002548 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <SPIx_Error+0x14>)
 800254e:	f005 f831 	bl	80075b4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002552:	f7ff ff61 	bl	8002418 <SPIx_Init>
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200007a4 	.word	0x200007a4

08002560 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	; 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <SPIx_MspInit+0x6c>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <SPIx_MspInit+0x6c>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002576:	6453      	str	r3, [r2, #68]	; 0x44
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <SPIx_MspInit+0x6c>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <SPIx_MspInit+0x6c>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <SPIx_MspInit+0x6c>)
 800258e:	f043 0320 	orr.w	r3, r3, #32
 8002592:	6313      	str	r3, [r2, #48]	; 0x30
 8002594:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <SPIx_MspInit+0x6c>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80025a0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80025a6:	2302      	movs	r3, #2
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80025ae:	2301      	movs	r3, #1
 80025b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80025b2:	2305      	movs	r3, #5
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4804      	ldr	r0, [pc, #16]	; (80025d0 <SPIx_MspInit+0x70>)
 80025be:	f002 f837 	bl	8004630 <HAL_GPIO_Init>
}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40021400 	.word	0x40021400

080025d4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80025da:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <LCD_IO_Init+0xe0>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d164      	bne.n	80026ac <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <LCD_IO_Init+0xe0>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <LCD_IO_Init+0xe4>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <LCD_IO_Init+0xe4>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <LCD_IO_Init+0xe4>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002608:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800260a:	2301      	movs	r3, #1
 800260c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002612:	2302      	movs	r3, #2
 8002614:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4619      	mov	r1, r3
 800261c:	4827      	ldr	r0, [pc, #156]	; (80026bc <LCD_IO_Init+0xe8>)
 800261e:	f002 f807 	bl	8004630 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <LCD_IO_Init+0xe4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a23      	ldr	r2, [pc, #140]	; (80026b8 <LCD_IO_Init+0xe4>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <LCD_IO_Init+0xe4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800264c:	2302      	movs	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	4619      	mov	r1, r3
 8002656:	4819      	ldr	r0, [pc, #100]	; (80026bc <LCD_IO_Init+0xe8>)
 8002658:	f001 ffea 	bl	8004630 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <LCD_IO_Init+0xe4>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <LCD_IO_Init+0xe4>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <LCD_IO_Init+0xe4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002678:	2304      	movs	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	4619      	mov	r1, r3
 800268e:	480c      	ldr	r0, [pc, #48]	; (80026c0 <LCD_IO_Init+0xec>)
 8002690:	f001 ffce 	bl	8004630 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002694:	2200      	movs	r2, #0
 8002696:	2104      	movs	r1, #4
 8002698:	4809      	ldr	r0, [pc, #36]	; (80026c0 <LCD_IO_Init+0xec>)
 800269a:	f002 fa81 	bl	8004ba0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800269e:	2201      	movs	r2, #1
 80026a0:	2104      	movs	r1, #4
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <LCD_IO_Init+0xec>)
 80026a4:	f002 fa7c 	bl	8004ba0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80026a8:	f7ff feb6 	bl	8002418 <SPIx_Init>
  }
}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200007fc 	.word	0x200007fc
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020c00 	.word	0x40020c00
 80026c0:	40020800 	.word	0x40020800

080026c4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026ce:	2201      	movs	r2, #1
 80026d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <LCD_IO_WriteData+0x3c>)
 80026d6:	f002 fa63 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80026da:	2200      	movs	r2, #0
 80026dc:	2104      	movs	r1, #4
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <LCD_IO_WriteData+0x40>)
 80026e0:	f002 fa5e 	bl	8004ba0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fef0 	bl	80024cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80026ec:	2201      	movs	r2, #1
 80026ee:	2104      	movs	r1, #4
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <LCD_IO_WriteData+0x40>)
 80026f2:	f002 fa55 	bl	8004ba0 <HAL_GPIO_WritePin>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40020800 	.word	0x40020800

08002708 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <LCD_IO_WriteReg+0x3c>)
 800271a:	f002 fa41 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800271e:	2200      	movs	r2, #0
 8002720:	2104      	movs	r1, #4
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <LCD_IO_WriteReg+0x40>)
 8002724:	f002 fa3c 	bl	8004ba0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	b29b      	uxth	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fecd 	bl	80024cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002732:	2201      	movs	r2, #1
 8002734:	2104      	movs	r1, #4
 8002736:	4804      	ldr	r0, [pc, #16]	; (8002748 <LCD_IO_WriteReg+0x40>)
 8002738:	f002 fa32 	bl	8004ba0 <HAL_GPIO_WritePin>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40020800 	.word	0x40020800

0800274c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	460a      	mov	r2, r1
 8002756:	80fb      	strh	r3, [r7, #6]
 8002758:	4613      	mov	r3, r2
 800275a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002760:	2200      	movs	r2, #0
 8002762:	2104      	movs	r1, #4
 8002764:	4810      	ldr	r0, [pc, #64]	; (80027a8 <LCD_IO_ReadData+0x5c>)
 8002766:	f002 fa1b 	bl	8004ba0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002770:	480e      	ldr	r0, [pc, #56]	; (80027ac <LCD_IO_ReadData+0x60>)
 8002772:	f002 fa15 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fea7 	bl	80024cc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800277e:	797b      	ldrb	r3, [r7, #5]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fe83 	bl	800248c <SPIx_Read>
 8002786:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800278e:	4807      	ldr	r0, [pc, #28]	; (80027ac <LCD_IO_ReadData+0x60>)
 8002790:	f002 fa06 	bl	8004ba0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002794:	2201      	movs	r2, #1
 8002796:	2104      	movs	r1, #4
 8002798:	4803      	ldr	r0, [pc, #12]	; (80027a8 <LCD_IO_ReadData+0x5c>)
 800279a:	f002 fa01 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  return readvalue;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00

080027b0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 f98b 	bl	8003ad4 <HAL_Delay>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <GYRO_IO_Init+0x8c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <GYRO_IO_Init+0x8c>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <GYRO_IO_Init+0x8c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80027ea:	2302      	movs	r3, #2
 80027ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80027fa:	f107 030c 	add.w	r3, r7, #12
 80027fe:	4619      	mov	r1, r3
 8002800:	4815      	ldr	r0, [pc, #84]	; (8002858 <GYRO_IO_Init+0x90>)
 8002802:	f001 ff15 	bl	8004630 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002806:	2201      	movs	r2, #1
 8002808:	2102      	movs	r1, #2
 800280a:	4813      	ldr	r0, [pc, #76]	; (8002858 <GYRO_IO_Init+0x90>)
 800280c:	f002 f9c8 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <GYRO_IO_Init+0x8c>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <GYRO_IO_Init+0x8c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6313      	str	r3, [r2, #48]	; 0x30
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <GYRO_IO_Init+0x8c>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800282c:	2306      	movs	r3, #6
 800282e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4806      	ldr	r0, [pc, #24]	; (800285c <GYRO_IO_Init+0x94>)
 8002844:	f001 fef4 	bl	8004630 <HAL_GPIO_Init>

  SPIx_Init();
 8002848:	f7ff fde6 	bl	8002418 <SPIx_Init>
}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40020800 	.word	0x40020800
 800285c:	40020000 	.word	0x40020000

08002860 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
 800286c:	4613      	mov	r3, r2
 800286e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002870:	883b      	ldrh	r3, [r7, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d903      	bls.n	800287e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800287e:	2200      	movs	r2, #0
 8002880:	2102      	movs	r1, #2
 8002882:	480f      	ldr	r0, [pc, #60]	; (80028c0 <GYRO_IO_Write+0x60>)
 8002884:	f002 f98c 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fe3c 	bl	8002508 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002890:	e00a      	b.n	80028a8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fe36 	bl	8002508 <SPIx_WriteRead>
    NumByteToWrite--;
 800289c:	883b      	ldrh	r3, [r7, #0]
 800289e:	3b01      	subs	r3, #1
 80028a0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3301      	adds	r3, #1
 80028a6:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80028a8:	883b      	ldrh	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f1      	bne.n	8002892 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80028ae:	2201      	movs	r2, #1
 80028b0:	2102      	movs	r1, #2
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <GYRO_IO_Write+0x60>)
 80028b4:	f002 f974 	bl	8004ba0 <HAL_GPIO_WritePin>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40020800 	.word	0x40020800

080028c4 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	4613      	mov	r3, r2
 80028d2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d904      	bls.n	80028e4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80028e0:	70fb      	strb	r3, [r7, #3]
 80028e2:	e003      	b.n	80028ec <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ea:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	4810      	ldr	r0, [pc, #64]	; (8002934 <GYRO_IO_Read+0x70>)
 80028f2:	f002 f955 	bl	8004ba0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fe05 	bl	8002508 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80028fe:	e00c      	b.n	800291a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff fe01 	bl	8002508 <SPIx_WriteRead>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800290e:	883b      	ldrh	r3, [r7, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3301      	adds	r3, #1
 8002918:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800291a:	883b      	ldrh	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002920:	2201      	movs	r2, #1
 8002922:	2102      	movs	r1, #2
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <GYRO_IO_Read+0x70>)
 8002926:	f002 f93b 	bl	8004ba0 <HAL_GPIO_WritePin>
}  
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40020800 	.word	0x40020800

08002938 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002942:	2300      	movs	r3, #0
 8002944:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002946:	2300      	movs	r3, #0
 8002948:	703b      	strb	r3, [r7, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <BSP_GYRO_Init+0xc4>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	4798      	blx	r3
 8002954:	4603      	mov	r3, r0
 8002956:	2bd4      	cmp	r3, #212	; 0xd4
 8002958:	d005      	beq.n	8002966 <BSP_GYRO_Init+0x2e>
 800295a:	4b28      	ldr	r3, [pc, #160]	; (80029fc <BSP_GYRO_Init+0xc4>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4798      	blx	r3
 8002960:	4603      	mov	r3, r0
 8002962:	2bd5      	cmp	r3, #213	; 0xd5
 8002964:	d145      	bne.n	80029f2 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <BSP_GYRO_Init+0xc8>)
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <BSP_GYRO_Init+0xc4>)
 800296a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 800296c:	2308      	movs	r3, #8
 800296e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002970:	2300      	movs	r3, #0
 8002972:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002974:	2307      	movs	r3, #7
 8002976:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002978:	2330      	movs	r3, #48	; 0x30
 800297a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800297c:	2300      	movs	r3, #0
 800297e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002980:	2300      	movs	r3, #0
 8002982:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002984:	2310      	movs	r3, #16
 8002986:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002988:	793a      	ldrb	r2, [r7, #4]
 800298a:	797b      	ldrb	r3, [r7, #5]
 800298c:	4313      	orrs	r3, r2
 800298e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002990:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002992:	4313      	orrs	r3, r2
 8002994:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002996:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002998:	4313      	orrs	r3, r2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800299e:	7a3a      	ldrb	r2, [r7, #8]
 80029a0:	7a7b      	ldrb	r3, [r7, #9]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80029a6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	89bb      	ldrh	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <BSP_GYRO_Init+0xc8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	89ba      	ldrh	r2, [r7, #12]
 80029c0:	4610      	mov	r0, r2
 80029c2:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80029c4:	2300      	movs	r3, #0
 80029c6:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80029cc:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80029ce:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <BSP_GYRO_Init+0xc8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	89ba      	ldrh	r2, [r7, #12]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	4610      	mov	r0, r2
 80029e2:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <BSP_GYRO_Init+0xc8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	2010      	movs	r0, #16
 80029ec:	4798      	blx	r3

    ret = GYRO_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200000cc 	.word	0x200000cc
 8002a00:	20000800 	.word	0x20000800

08002a04 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <BSP_GYRO_GetXYZ+0x24>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <BSP_GYRO_GetXYZ+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000800 	.word	0x20000800

08002a2c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a30:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a32:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <BSP_LCD_Init+0xc0>)
 8002a34:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a38:	2209      	movs	r2, #9
 8002a3a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a42:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a44:	221d      	movs	r2, #29
 8002a46:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a50:	f240 120d 	movw	r2, #269	; 0x10d
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a58:	f240 1243 	movw	r2, #323	; 0x143
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a60:	f240 1217 	movw	r2, #279	; 0x117
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a68:	f240 1247 	movw	r2, #327	; 0x147
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <BSP_LCD_Init+0xc4>)
 8002a88:	2208      	movs	r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <BSP_LCD_Init+0xc4>)
 8002a8e:	22c0      	movs	r2, #192	; 0xc0
 8002a90:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <BSP_LCD_Init+0xc4>)
 8002a94:	2204      	movs	r2, #4
 8002a96:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <BSP_LCD_Init+0xc4>)
 8002a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002aa0:	4813      	ldr	r0, [pc, #76]	; (8002af0 <BSP_LCD_Init+0xc4>)
 8002aa2:	f004 faa3 	bl	8006fec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002abe:	f000 fc0f 	bl	80032e0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <BSP_LCD_Init+0xbc>)
 8002ac4:	f002 f886 	bl	8004bd4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <BSP_LCD_Init+0xc8>)
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <BSP_LCD_Init+0xcc>)
 8002acc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <BSP_LCD_Init+0xc8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ad6:	f000 fdf1 	bl	80036bc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ada:	4808      	ldr	r0, [pc, #32]	; (8002afc <BSP_LCD_Init+0xd0>)
 8002adc:	f000 f8ce 	bl	8002c7c <BSP_LCD_SetFont>

  return LCD_OK;
 8002ae0:	2300      	movs	r3, #0
}  
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000804 	.word	0x20000804
 8002aec:	40016800 	.word	0x40016800
 8002af0:	200008ec 	.word	0x200008ec
 8002af4:	20000938 	.word	0x20000938
 8002af8:	20000094 	.word	0x20000094
 8002afc:	20000104 	.word	0x20000104

08002b00 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <BSP_LCD_GetXSize+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	4798      	blx	r3
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000938 	.word	0x20000938

08002b18 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <BSP_LCD_GetYSize+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	4798      	blx	r3
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000938 	.word	0x20000938

08002b30 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b090      	sub	sp, #64	; 0x40
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b40:	f7ff ffde 	bl	8002b00 <BSP_LCD_GetXSize>
 8002b44:	4603      	mov	r3, r0
 8002b46:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b4c:	f7ff ffe4 	bl	8002b18 <BSP_LCD_GetYSize>
 8002b50:	4603      	mov	r3, r0
 8002b52:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002b5c:	23ff      	movs	r3, #255	; 0xff
 8002b5e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002b76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002b80:	f7ff ffbe 	bl	8002b00 <BSP_LCD_GetXSize>
 8002b84:	4603      	mov	r3, r0
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002b88:	f7ff ffc6 	bl	8002b18 <BSP_LCD_GetYSize>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002b90:	88fa      	ldrh	r2, [r7, #6]
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4619      	mov	r1, r3
 8002b98:	4814      	ldr	r0, [pc, #80]	; (8002bec <BSP_LCD_LayerDefaultInit+0xbc>)
 8002b9a:	f002 f8f5 	bl	8004d88 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	4913      	ldr	r1, [pc, #76]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3304      	adds	r3, #4
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002bc6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002bda:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bde:	f002 f911 	bl	8004e04 <HAL_LTDC_EnableDither>
}
 8002be2:	bf00      	nop
 8002be4:	3740      	adds	r7, #64	; 0x40
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000804 	.word	0x20000804
 8002bf0:	20000920 	.word	0x20000920
 8002bf4:	20000104 	.word	0x20000104

08002bf8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <BSP_LCD_SelectLayer+0x1c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000091c 	.word	0x2000091c

08002c18 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c20:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <BSP_LCD_SetTextColor+0x28>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4907      	ldr	r1, [pc, #28]	; (8002c44 <BSP_LCD_SetTextColor+0x2c>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	2000091c 	.word	0x2000091c
 8002c44:	20000920 	.word	0x20000920

08002c48 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <BSP_LCD_SetBackColor+0x2c>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4908      	ldr	r1, [pc, #32]	; (8002c78 <BSP_LCD_SetBackColor+0x30>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3304      	adds	r3, #4
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000091c 	.word	0x2000091c
 8002c78:	20000920 	.word	0x20000920

08002c7c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <BSP_LCD_SetFont+0x2c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4908      	ldr	r1, [pc, #32]	; (8002cac <BSP_LCD_SetFont+0x30>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3308      	adds	r3, #8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000091c 	.word	0x2000091c
 8002cac:	20000920 	.word	0x20000920

08002cb0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <BSP_LCD_GetFont+0x24>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <BSP_LCD_GetFont+0x28>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000091c 	.word	0x2000091c
 8002cd8:	20000920 	.word	0x20000920

08002cdc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <BSP_LCD_Clear+0x48>)
 8002ce6:	681c      	ldr	r4, [r3, #0]
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <BSP_LCD_Clear+0x48>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <BSP_LCD_Clear+0x4c>)
 8002cee:	2134      	movs	r1, #52	; 0x34
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	335c      	adds	r3, #92	; 0x5c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461e      	mov	r6, r3
 8002cfc:	f7ff ff00 	bl	8002b00 <BSP_LCD_GetXSize>
 8002d00:	4605      	mov	r5, r0
 8002d02:	f7ff ff09 	bl	8002b18 <BSP_LCD_GetYSize>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	462a      	mov	r2, r5
 8002d14:	4631      	mov	r1, r6
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 fc98 	bl	800364c <FillBuffer>
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d24:	2000091c 	.word	0x2000091c
 8002d28:	20000804 	.word	0x20000804

08002d2c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
 8002d36:	460b      	mov	r3, r1
 8002d38:	80bb      	strh	r3, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3308      	adds	r3, #8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4c14      	ldr	r4, [pc, #80]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4423      	add	r3, r4
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d70:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <BSP_LCD_DisplayChar+0x80>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4c0d      	ldr	r4, [pc, #52]	; (8002db0 <BSP_LCD_DisplayChar+0x84>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4423      	add	r3, r4
 8002d84:	3308      	adds	r3, #8
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	889b      	ldrh	r3, [r3, #4]
 8002d8a:	3307      	adds	r3, #7
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	da00      	bge.n	8002d92 <BSP_LCD_DisplayChar+0x66>
 8002d90:	3307      	adds	r3, #7
 8002d92:	10db      	asrs	r3, r3, #3
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d98:	18ca      	adds	r2, r1, r3
 8002d9a:	88b9      	ldrh	r1, [r7, #4]
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb9a 	bl	80034d8 <DrawChar>
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	2000091c 	.word	0x2000091c
 8002db0:	20000920 	.word	0x20000920

08002db4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002db4:	b5b0      	push	{r4, r5, r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60ba      	str	r2, [r7, #8]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	81fb      	strh	r3, [r7, #14]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	81bb      	strh	r3, [r7, #12]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	83fb      	strh	r3, [r7, #30]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002dde:	e002      	b.n	8002de6 <BSP_LCD_DisplayStringAt+0x32>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	617a      	str	r2, [r7, #20]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f6      	bne.n	8002de0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002df2:	f7ff fe85 	bl	8002b00 <BSP_LCD_GetXSize>
 8002df6:	4601      	mov	r1, r0
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	484b      	ldr	r0, [pc, #300]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	3308      	adds	r3, #8
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	889b      	ldrh	r3, [r3, #4]
 8002e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e12:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d01c      	beq.n	8002e54 <BSP_LCD_DisplayStringAt+0xa0>
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	dc33      	bgt.n	8002e86 <BSP_LCD_DisplayStringAt+0xd2>
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d002      	beq.n	8002e28 <BSP_LCD_DisplayStringAt+0x74>
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d019      	beq.n	8002e5a <BSP_LCD_DisplayStringAt+0xa6>
 8002e26:	e02e      	b.n	8002e86 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad1      	subs	r1, r2, r3
 8002e2e:	4b3e      	ldr	r3, [pc, #248]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	483e      	ldr	r0, [pc, #248]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3308      	adds	r3, #8
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	889b      	ldrh	r3, [r3, #4]
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	89fb      	ldrh	r3, [r7, #14]
 8002e4e:	4413      	add	r3, r2
 8002e50:	83fb      	strh	r3, [r7, #30]
      break;
 8002e52:	e01b      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	83fb      	strh	r3, [r7, #30]
      break;
 8002e58:	e018      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b299      	uxth	r1, r3
 8002e62:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4831      	ldr	r0, [pc, #196]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4403      	add	r3, r0
 8002e72:	3308      	adds	r3, #8
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	889b      	ldrh	r3, [r3, #4]
 8002e78:	fb11 f303 	smulbb	r3, r1, r3
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	89fb      	ldrh	r3, [r7, #14]
 8002e80:	4413      	add	r3, r2
 8002e82:	83fb      	strh	r3, [r7, #30]
      break;
 8002e84:	e002      	b.n	8002e8c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	83fb      	strh	r3, [r7, #30]
      break;
 8002e8a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e8c:	e01a      	b.n	8002ec4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	89b9      	ldrh	r1, [r7, #12]
 8002e94:	8bfb      	ldrh	r3, [r7, #30]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff48 	bl	8002d2c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4922      	ldr	r1, [pc, #136]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3308      	adds	r3, #8
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	889a      	ldrh	r2, [r3, #4]
 8002eb2:	8bfb      	ldrh	r3, [r7, #30]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
    i++;
 8002ebe:	8bbb      	ldrh	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2dc      	uxtb	r4, r3
 8002ed2:	f7ff fe15 	bl	8002b00 <BSP_LCD_GetXSize>
 8002ed6:	8bb9      	ldrh	r1, [r7, #28]
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4d13      	ldr	r5, [pc, #76]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	442b      	add	r3, r5
 8002ee8:	3308      	adds	r3, #8
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	889b      	ldrh	r3, [r3, #4]
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	1ac3      	subs	r3, r0, r3
 8002ef4:	b299      	uxth	r1, r3
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <BSP_LCD_DisplayStringAt+0x174>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <BSP_LCD_DisplayStringAt+0x178>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4403      	add	r3, r0
 8002f06:	3308      	adds	r3, #8
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	889b      	ldrh	r3, [r3, #4]
 8002f0c:	4299      	cmp	r1, r3
 8002f0e:	bf2c      	ite	cs
 8002f10:	2301      	movcs	r3, #1
 8002f12:	2300      	movcc	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4023      	ands	r3, r4
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1b7      	bne.n	8002e8e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}
 8002f28:	2000091c 	.word	0x2000091c
 8002f2c:	20000920 	.word	0x20000920

08002f30 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <BSP_LCD_DrawHLine+0x70>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <BSP_LCD_DrawHLine+0x74>)
 8002f4c:	2134      	movs	r1, #52	; 0x34
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	335c      	adds	r3, #92	; 0x5c
 8002f56:	681c      	ldr	r4, [r3, #0]
 8002f58:	f7ff fdd2 	bl	8002b00 <BSP_LCD_GetXSize>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	88bb      	ldrh	r3, [r7, #4]
 8002f60:	fb03 f202 	mul.w	r2, r3, r2
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4423      	add	r3, r4
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <BSP_LCD_DrawHLine+0x70>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	887c      	ldrh	r4, [r7, #2]
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <BSP_LCD_DrawHLine+0x70>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4d0b      	ldr	r5, [pc, #44]	; (8002fa8 <BSP_LCD_DrawHLine+0x78>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	442b      	add	r3, r5
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4622      	mov	r2, r4
 8002f92:	f000 fb5b 	bl	800364c <FillBuffer>
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000091c 	.word	0x2000091c
 8002fa4:	20000804 	.word	0x20000804
 8002fa8:	20000920 	.word	0x20000920

08002fac <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	80bb      	strh	r3, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	f1c3 0303 	rsb	r3, r3, #3
 8002fc6:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002fd0:	e0c7      	b.n	8003162 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b298      	uxth	r0, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	88ba      	ldrh	r2, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4c64      	ldr	r4, [pc, #400]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4423      	add	r3, r4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f000 fa47 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	b29b      	uxth	r3, r3
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	b298      	uxth	r0, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	b29b      	uxth	r3, r3
 800300c:	88ba      	ldrh	r2, [r7, #4]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	b299      	uxth	r1, r3
 8003012:	4b59      	ldr	r3, [pc, #356]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4c59      	ldr	r4, [pc, #356]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4423      	add	r3, r4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	461a      	mov	r2, r3
 8003026:	f000 fa31 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	b29a      	uxth	r2, r3
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	4413      	add	r3, r2
 8003032:	b298      	uxth	r0, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	b29b      	uxth	r3, r3
 8003038:	88ba      	ldrh	r2, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b299      	uxth	r1, r3
 800303e:	4b4e      	ldr	r3, [pc, #312]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4c4e      	ldr	r4, [pc, #312]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4423      	add	r3, r4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	f000 fa1b 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	b29b      	uxth	r3, r3
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b298      	uxth	r0, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	b29b      	uxth	r3, r3
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4c43      	ldr	r4, [pc, #268]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4423      	add	r3, r4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 fa05 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	b29a      	uxth	r2, r3
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4413      	add	r3, r2
 800308a:	b298      	uxth	r0, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29a      	uxth	r2, r3
 8003090:	88bb      	ldrh	r3, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	b299      	uxth	r1, r3
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4c38      	ldr	r4, [pc, #224]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4423      	add	r3, r4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 f9ef 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	b298      	uxth	r0, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	88bb      	ldrh	r3, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	b299      	uxth	r1, r3
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4c2d      	ldr	r4, [pc, #180]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4423      	add	r3, r4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 f9d9 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29a      	uxth	r2, r3
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4413      	add	r3, r2
 80030e2:	b298      	uxth	r0, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	88bb      	ldrh	r3, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	b299      	uxth	r1, r3
 80030ee:	4b22      	ldr	r3, [pc, #136]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4c22      	ldr	r4, [pc, #136]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4423      	add	r3, r4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f000 f9c3 	bl	800348c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	b29b      	uxth	r3, r3
 800310a:	88fa      	ldrh	r2, [r7, #6]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	b298      	uxth	r0, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	b299      	uxth	r1, r3
 800311a:	4b17      	ldr	r3, [pc, #92]	; (8003178 <BSP_LCD_DrawCircle+0x1cc>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4c17      	ldr	r4, [pc, #92]	; (800317c <BSP_LCD_DrawCircle+0x1d0>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4423      	add	r3, r4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f9ad 	bl	800348c <BSP_LCD_DrawPixel>

    if (d < 0)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da06      	bge.n	8003146 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4413      	add	r3, r2
 8003140:	3306      	adds	r3, #6
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e00a      	b.n	800315c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	009a      	lsls	r2, r3, #2
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	4413      	add	r3, r2
 8003152:	330a      	adds	r3, #10
 8003154:	617b      	str	r3, [r7, #20]
      cury--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b01      	subs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3301      	adds	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	429a      	cmp	r2, r3
 8003168:	f67f af33 	bls.w	8002fd2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd90      	pop	{r4, r7, pc}
 8003176:	bf00      	nop
 8003178:	2000091c 	.word	0x2000091c
 800317c:	20000920 	.word	0x20000920

08003180 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
 800318a:	460b      	mov	r3, r1
 800318c:	80bb      	strh	r3, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	f1c3 0303 	rsb	r3, r3, #3
 800319a:	617b      	str	r3, [r7, #20]

  curx = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031a4:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <BSP_LCD_FillCircle+0x138>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4944      	ldr	r1, [pc, #272]	; (80032bc <BSP_LCD_FillCircle+0x13c>)
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fd2e 	bl	8002c18 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80031bc:	e061      	b.n	8003282 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d021      	beq.n	8003208 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	b298      	uxth	r0, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	88bb      	ldrh	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	b299      	uxth	r1, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	f7ff fea5 	bl	8002f30 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	88fa      	ldrh	r2, [r7, #6]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	b298      	uxth	r0, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	88ba      	ldrh	r2, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b299      	uxth	r1, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	b29b      	uxth	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	f7ff fe94 	bl	8002f30 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d021      	beq.n	8003252 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	b29b      	uxth	r3, r3
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	b298      	uxth	r0, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	b29b      	uxth	r3, r3
 800321c:	88ba      	ldrh	r2, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	b299      	uxth	r1, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	f7ff fe80 	bl	8002f30 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	b29b      	uxth	r3, r3
 8003234:	88fa      	ldrh	r2, [r7, #6]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	b298      	uxth	r0, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	b29a      	uxth	r2, r3
 800323e:	88bb      	ldrh	r3, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	b299      	uxth	r1, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	b29b      	uxth	r3, r3
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	b29b      	uxth	r3, r3
 800324c:	461a      	mov	r2, r3
 800324e:	f7ff fe6f 	bl	8002f30 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	da06      	bge.n	8003266 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	4413      	add	r3, r2
 8003260:	3306      	adds	r3, #6
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e00a      	b.n	800327c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	4413      	add	r3, r2
 8003272:	330a      	adds	r3, #10
 8003274:	617b      	str	r3, [r7, #20]
      cury--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3b01      	subs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3301      	adds	r3, #1
 8003280:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	429a      	cmp	r2, r3
 8003288:	d999      	bls.n	80031be <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <BSP_LCD_FillCircle+0x138>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	490b      	ldr	r1, [pc, #44]	; (80032bc <BSP_LCD_FillCircle+0x13c>)
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fcbb 	bl	8002c18 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80032a2:	887a      	ldrh	r2, [r7, #2]
 80032a4:	88b9      	ldrh	r1, [r7, #4]
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fe7f 	bl	8002fac <BSP_LCD_DrawCircle>
}
 80032ae:	bf00      	nop
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000091c 	.word	0x2000091c
 80032bc:	20000920 	.word	0x20000920

080032c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <BSP_LCD_DisplayOn+0x1c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80032ce:	4b03      	ldr	r3, [pc, #12]	; (80032dc <BSP_LCD_DisplayOn+0x1c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	4798      	blx	r3
  }
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000938 	.word	0x20000938

080032e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a60      	ldr	r2, [pc, #384]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80032f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a59      	ldr	r2, [pc, #356]	; (8003470 <BSP_LCD_MspInit+0x190>)
 800330c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b57      	ldr	r3, [pc, #348]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a52      	ldr	r2, [pc, #328]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <BSP_LCD_MspInit+0x190>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b45      	ldr	r3, [pc, #276]	; (8003470 <BSP_LCD_MspInit+0x190>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a44      	ldr	r2, [pc, #272]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b42      	ldr	r3, [pc, #264]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a3d      	ldr	r2, [pc, #244]	; (8003470 <BSP_LCD_MspInit+0x190>)
 800337c:	f043 0308 	orr.w	r3, r3, #8
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a36      	ldr	r2, [pc, #216]	; (8003470 <BSP_LCD_MspInit+0x190>)
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	4b30      	ldr	r3, [pc, #192]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80033b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <BSP_LCD_MspInit+0x190>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80033c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80033cc:	2302      	movs	r3, #2
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80033d8:	230e      	movs	r3, #14
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80033dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e0:	4619      	mov	r1, r3
 80033e2:	4824      	ldr	r0, [pc, #144]	; (8003474 <BSP_LCD_MspInit+0x194>)
 80033e4:	f001 f924 	bl	8004630 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80033e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80033ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f2:	4619      	mov	r1, r3
 80033f4:	4820      	ldr	r0, [pc, #128]	; (8003478 <BSP_LCD_MspInit+0x198>)
 80033f6:	f001 f91b 	bl	8004630 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80033fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003404:	4619      	mov	r1, r3
 8003406:	481d      	ldr	r0, [pc, #116]	; (800347c <BSP_LCD_MspInit+0x19c>)
 8003408:	f001 f912 	bl	8004630 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800340c:	2348      	movs	r3, #72	; 0x48
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	4619      	mov	r1, r3
 8003416:	481a      	ldr	r0, [pc, #104]	; (8003480 <BSP_LCD_MspInit+0x1a0>)
 8003418:	f001 f90a 	bl	8004630 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800341c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003426:	4619      	mov	r1, r3
 8003428:	4816      	ldr	r0, [pc, #88]	; (8003484 <BSP_LCD_MspInit+0x1a4>)
 800342a:	f001 f901 	bl	8004630 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800342e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003438:	4619      	mov	r1, r3
 800343a:	4813      	ldr	r0, [pc, #76]	; (8003488 <BSP_LCD_MspInit+0x1a8>)
 800343c:	f001 f8f8 	bl	8004630 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003440:	2303      	movs	r3, #3
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003444:	2309      	movs	r3, #9
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800344c:	4619      	mov	r1, r3
 800344e:	480a      	ldr	r0, [pc, #40]	; (8003478 <BSP_LCD_MspInit+0x198>)
 8003450:	f001 f8ee 	bl	8004630 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003454:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800345a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345e:	4619      	mov	r1, r3
 8003460:	4809      	ldr	r0, [pc, #36]	; (8003488 <BSP_LCD_MspInit+0x1a8>)
 8003462:	f001 f8e5 	bl	8004630 <HAL_GPIO_Init>
}
 8003466:	bf00      	nop
 8003468:	3738      	adds	r7, #56	; 0x38
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020400 	.word	0x40020400
 800347c:	40020800 	.word	0x40020800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40021400 	.word	0x40021400
 8003488:	40021800 	.word	0x40021800

0800348c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	603a      	str	r2, [r7, #0]
 8003496:	80fb      	strh	r3, [r7, #6]
 8003498:	460b      	mov	r3, r1
 800349a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <BSP_LCD_DrawPixel+0x44>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <BSP_LCD_DrawPixel+0x48>)
 80034a2:	2134      	movs	r1, #52	; 0x34
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	335c      	adds	r3, #92	; 0x5c
 80034ac:	681c      	ldr	r4, [r3, #0]
 80034ae:	88bd      	ldrh	r5, [r7, #4]
 80034b0:	f7ff fb26 	bl	8002b00 <BSP_LCD_GetXSize>
 80034b4:	4603      	mov	r3, r0
 80034b6:	fb03 f205 	mul.w	r2, r3, r5
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4423      	add	r3, r4
 80034c2:	461a      	mov	r2, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bdb0      	pop	{r4, r5, r7, pc}
 80034d0:	2000091c 	.word	0x2000091c
 80034d4:	20000804 	.word	0x20000804

080034d8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	603a      	str	r2, [r7, #0]
 80034e2:	80fb      	strh	r3, [r7, #6]
 80034e4:	460b      	mov	r3, r1
 80034e6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <DrawChar+0x16c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4953      	ldr	r1, [pc, #332]	; (8003648 <DrawChar+0x170>)
 80034fa:	4613      	mov	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	3308      	adds	r3, #8
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	88db      	ldrh	r3, [r3, #6]
 800350a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800350c:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <DrawChar+0x16c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <DrawChar+0x170>)
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3308      	adds	r3, #8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	889b      	ldrh	r3, [r3, #4]
 8003522:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003524:	8a3b      	ldrh	r3, [r7, #16]
 8003526:	3307      	adds	r3, #7
 8003528:	2b00      	cmp	r3, #0
 800352a:	da00      	bge.n	800352e <DrawChar+0x56>
 800352c:	3307      	adds	r3, #7
 800352e:	10db      	asrs	r3, r3, #3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	b2da      	uxtb	r2, r3
 8003536:	8a3b      	ldrh	r3, [r7, #16]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e076      	b.n	8003632 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003544:	8a3b      	ldrh	r3, [r7, #16]
 8003546:	3307      	adds	r3, #7
 8003548:	2b00      	cmp	r3, #0
 800354a:	da00      	bge.n	800354e <DrawChar+0x76>
 800354c:	3307      	adds	r3, #7
 800354e:	10db      	asrs	r3, r3, #3
 8003550:	461a      	mov	r2, r3
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	4413      	add	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800355e:	8a3b      	ldrh	r3, [r7, #16]
 8003560:	3307      	adds	r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	da00      	bge.n	8003568 <DrawChar+0x90>
 8003566:	3307      	adds	r3, #7
 8003568:	10db      	asrs	r3, r3, #3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d002      	beq.n	8003574 <DrawChar+0x9c>
 800356e:	2b02      	cmp	r3, #2
 8003570:	d004      	beq.n	800357c <DrawChar+0xa4>
 8003572:	e00c      	b.n	800358e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	617b      	str	r3, [r7, #20]
      break;
 800357a:	e016      	b.n	80035aa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	3201      	adds	r2, #1
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
      break;
 800358c:	e00d      	b.n	80035aa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	041a      	lsls	r2, r3, #16
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3301      	adds	r3, #1
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	4313      	orrs	r3, r2
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	3202      	adds	r2, #2
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
      break;
 80035a8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e036      	b.n	800361e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80035b0:	8a3a      	ldrh	r2, [r7, #16]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	4413      	add	r3, r2
 80035ba:	3b01      	subs	r3, #1
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	4413      	add	r3, r2
 80035d4:	b298      	uxth	r0, r3
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <DrawChar+0x16c>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	491b      	ldr	r1, [pc, #108]	; (8003648 <DrawChar+0x170>)
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	88bb      	ldrh	r3, [r7, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7ff ff4e 	bl	800348c <BSP_LCD_DrawPixel>
 80035f0:	e012      	b.n	8003618 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4413      	add	r3, r2
 80035fa:	b298      	uxth	r0, r3
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <DrawChar+0x16c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4911      	ldr	r1, [pc, #68]	; (8003648 <DrawChar+0x170>)
 8003602:	4613      	mov	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3304      	adds	r3, #4
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	88bb      	ldrh	r3, [r7, #4]
 8003612:	4619      	mov	r1, r3
 8003614:	f7ff ff3a 	bl	800348c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	3301      	adds	r3, #1
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	8a3b      	ldrh	r3, [r7, #16]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	429a      	cmp	r2, r3
 8003624:	d3c4      	bcc.n	80035b0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003626:	88bb      	ldrh	r3, [r7, #4]
 8003628:	3301      	adds	r3, #1
 800362a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	8a7b      	ldrh	r3, [r7, #18]
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d384      	bcc.n	8003544 <DrawChar+0x6c>
  }
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000091c 	.word	0x2000091c
 8003648:	20000920 	.word	0x20000920

0800364c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <FillBuffer+0x68>)
 800365c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003660:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <FillBuffer+0x68>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003668:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <FillBuffer+0x68>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <FillBuffer+0x68>)
 8003670:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <FillBuffer+0x6c>)
 8003672:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003674:	480f      	ldr	r0, [pc, #60]	; (80036b4 <FillBuffer+0x68>)
 8003676:	f000 fd45 	bl	8004104 <HAL_DMA2D_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d115      	bne.n	80036ac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	480c      	ldr	r0, [pc, #48]	; (80036b4 <FillBuffer+0x68>)
 8003684:	f000 fea6 	bl	80043d4 <HAL_DMA2D_ConfigLayer>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	4806      	ldr	r0, [pc, #24]	; (80036b4 <FillBuffer+0x68>)
 800369a:	f000 fd86 	bl	80041aa <HAL_DMA2D_Start>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d103      	bne.n	80036ac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80036a4:	210a      	movs	r1, #10
 80036a6:	4803      	ldr	r0, [pc, #12]	; (80036b4 <FillBuffer+0x68>)
 80036a8:	f000 fdaa 	bl	8004200 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200008ac 	.word	0x200008ac
 80036b8:	4002b000 	.word	0x4002b000

080036bc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036c0:	4b29      	ldr	r3, [pc, #164]	; (8003768 <BSP_SDRAM_Init+0xac>)
 80036c2:	4a2a      	ldr	r2, [pc, #168]	; (800376c <BSP_SDRAM_Init+0xb0>)
 80036c4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80036c6:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036c8:	2202      	movs	r2, #2
 80036ca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036ce:	2207      	movs	r2, #7
 80036d0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036d4:	2204      	movs	r2, #4
 80036d6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80036d8:	4b25      	ldr	r3, [pc, #148]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036da:	2207      	movs	r2, #7
 80036dc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80036e4:	4b22      	ldr	r3, [pc, #136]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036e6:	2202      	movs	r2, #2
 80036e8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 80036ec:	2202      	movs	r2, #2
 80036ee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <BSP_SDRAM_Init+0xac>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <BSP_SDRAM_Init+0xac>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <BSP_SDRAM_Init+0xac>)
 80036fe:	2204      	movs	r2, #4
 8003700:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003702:	4b19      	ldr	r3, [pc, #100]	; (8003768 <BSP_SDRAM_Init+0xac>)
 8003704:	2210      	movs	r2, #16
 8003706:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003708:	4b17      	ldr	r3, [pc, #92]	; (8003768 <BSP_SDRAM_Init+0xac>)
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <BSP_SDRAM_Init+0xac>)
 8003710:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003714:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <BSP_SDRAM_Init+0xac>)
 8003718:	2200      	movs	r2, #0
 800371a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <BSP_SDRAM_Init+0xac>)
 800371e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003722:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <BSP_SDRAM_Init+0xac>)
 8003726:	2200      	movs	r2, #0
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <BSP_SDRAM_Init+0xac>)
 800372c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003732:	2100      	movs	r1, #0
 8003734:	480c      	ldr	r0, [pc, #48]	; (8003768 <BSP_SDRAM_Init+0xac>)
 8003736:	f000 f87f 	bl	8003838 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800373a:	490d      	ldr	r1, [pc, #52]	; (8003770 <BSP_SDRAM_Init+0xb4>)
 800373c:	480a      	ldr	r0, [pc, #40]	; (8003768 <BSP_SDRAM_Init+0xac>)
 800373e:	f003 fe15 	bl	800736c <HAL_SDRAM_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <BSP_SDRAM_Init+0xb8>)
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e002      	b.n	8003756 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <BSP_SDRAM_Init+0xb8>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003756:	f240 506a 	movw	r0, #1386	; 0x56a
 800375a:	f000 f80d 	bl	8003778 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <BSP_SDRAM_Init+0xb8>)
 8003760:	781b      	ldrb	r3, [r3, #0]
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000093c 	.word	0x2000093c
 800376c:	a0000140 	.word	0xa0000140
 8003770:	20000970 	.word	0x20000970
 8003774:	20000114 	.word	0x20000114

08003778 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003784:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378c:	2208      	movs	r2, #8
 800378e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003790:	4b27      	ldr	r3, [pc, #156]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003792:	2201      	movs	r2, #1
 8003794:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003798:	2200      	movs	r2, #0
 800379a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800379c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a0:	4923      	ldr	r1, [pc, #140]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a2:	4824      	ldr	r0, [pc, #144]	; (8003834 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037a4:	f003 fe20 	bl	80073e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80037a8:	2001      	movs	r0, #1
 80037aa:	f000 f993 	bl	8003ad4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b6:	2208      	movs	r2, #8
 80037b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037bc:	2201      	movs	r2, #1
 80037be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80037c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ca:	4919      	ldr	r1, [pc, #100]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037cc:	4819      	ldr	r0, [pc, #100]	; (8003834 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037ce:	f003 fe0b 	bl	80073e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d4:	2203      	movs	r2, #3
 80037d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037da:	2208      	movs	r2, #8
 80037dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80037de:	4b14      	ldr	r3, [pc, #80]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e0:	2204      	movs	r2, #4
 80037e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ee:	4910      	ldr	r1, [pc, #64]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f0:	4810      	ldr	r0, [pc, #64]	; (8003834 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037f2:	f003 fdf9 	bl	80073e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80037f6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80037fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fe:	2204      	movs	r2, #4
 8003800:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003804:	2208      	movs	r2, #8
 8003806:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380a:	2201      	movs	r2, #1
 800380c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a07      	ldr	r2, [pc, #28]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003812:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003818:	4905      	ldr	r1, [pc, #20]	; (8003830 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381a:	4806      	ldr	r0, [pc, #24]	; (8003834 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800381c:	f003 fde4 	bl	80073e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4804      	ldr	r0, [pc, #16]	; (8003834 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003824:	f003 fe15 	bl	8007452 <HAL_SDRAM_ProgramRefreshRate>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	2000098c 	.word	0x2000098c
 8003834:	2000093c 	.word	0x2000093c

08003838 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b090      	sub	sp, #64	; 0x40
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ec 	beq.w	8003a22 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	4a76      	ldr	r2, [pc, #472]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6393      	str	r3, [r2, #56]	; 0x38
 800385a:	4b74      	ldr	r3, [pc, #464]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	4b70      	ldr	r3, [pc, #448]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a6f      	ldr	r2, [pc, #444]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	4b62      	ldr	r3, [pc, #392]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	4b5b      	ldr	r3, [pc, #364]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a5a      	ldr	r2, [pc, #360]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b58      	ldr	r3, [pc, #352]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	4b54      	ldr	r3, [pc, #336]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a53      	ldr	r2, [pc, #332]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a4c      	ldr	r2, [pc, #304]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 80038fc:	f043 0320 	orr.w	r3, r3, #32
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <BSP_SDRAM_MspInit+0x1f4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800392a:	2302      	movs	r3, #2
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800392e:	2302      	movs	r3, #2
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003936:	230c      	movs	r3, #12
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800393a:	2360      	movs	r3, #96	; 0x60
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800393e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003942:	4619      	mov	r1, r3
 8003944:	483a      	ldr	r0, [pc, #232]	; (8003a30 <BSP_SDRAM_MspInit+0x1f8>)
 8003946:	f000 fe73 	bl	8004630 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800394a:	2301      	movs	r3, #1
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800394e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003952:	4619      	mov	r1, r3
 8003954:	4837      	ldr	r0, [pc, #220]	; (8003a34 <BSP_SDRAM_MspInit+0x1fc>)
 8003956:	f000 fe6b 	bl	8004630 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800395a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003964:	4619      	mov	r1, r3
 8003966:	4834      	ldr	r0, [pc, #208]	; (8003a38 <BSP_SDRAM_MspInit+0x200>)
 8003968:	f000 fe62 	bl	8004630 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800396c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003976:	4619      	mov	r1, r3
 8003978:	4830      	ldr	r0, [pc, #192]	; (8003a3c <BSP_SDRAM_MspInit+0x204>)
 800397a:	f000 fe59 	bl	8004630 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800397e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003988:	4619      	mov	r1, r3
 800398a:	482d      	ldr	r0, [pc, #180]	; (8003a40 <BSP_SDRAM_MspInit+0x208>)
 800398c:	f000 fe50 	bl	8004630 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003990:	f248 1333 	movw	r3, #33075	; 0x8133
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399a:	4619      	mov	r1, r3
 800399c:	4829      	ldr	r0, [pc, #164]	; (8003a44 <BSP_SDRAM_MspInit+0x20c>)
 800399e:	f000 fe47 	bl	8004630 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80039a8:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80039b6:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039bc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039c4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039cc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80039ce:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80039d4:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039da:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039e4:	2203      	movs	r2, #3
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80039f4:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039f6:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <BSP_SDRAM_MspInit+0x214>)
 80039f8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003a06:	4810      	ldr	r0, [pc, #64]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 8003a08:	f000 fa4a 	bl	8003ea0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003a0c:	480e      	ldr	r0, [pc, #56]	; (8003a48 <BSP_SDRAM_MspInit+0x210>)
 8003a0e:	f000 f999 	bl	8003d44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	210f      	movs	r1, #15
 8003a16:	2038      	movs	r0, #56	; 0x38
 8003a18:	f000 f95c 	bl	8003cd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a1c:	2038      	movs	r0, #56	; 0x38
 8003a1e:	f000 f975 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003a22:	bf00      	nop
 8003a24:	3740      	adds	r7, #64	; 0x40
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	2000099c 	.word	0x2000099c
 8003a4c:	40026410 	.word	0x40026410

08003a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <HAL_Init+0x40>)
 8003a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_Init+0x40>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_Init+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_Init+0x40>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 f920 	bl	8003cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7e:	200f      	movs	r0, #15
 8003a80:	f7fd ff80 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7fd fee0 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	2000011c 	.word	0x2000011c
 8003ab8:	200009fc 	.word	0x200009fc

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	200009fc 	.word	0x200009fc

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	2000011c 	.word	0x2000011c

08003b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <__NVIC_SetPriorityGrouping+0x44>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b68:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <__NVIC_GetPriorityGrouping+0x18>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	f003 0307 	and.w	r3, r3, #7
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db0b      	blt.n	8003baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	f003 021f 	and.w	r2, r3, #31
 8003b98:	4907      	ldr	r1, [pc, #28]	; (8003bb8 <__NVIC_EnableIRQ+0x38>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db12      	blt.n	8003bf4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	490a      	ldr	r1, [pc, #40]	; (8003c00 <__NVIC_DisableIRQ+0x44>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	3320      	adds	r3, #32
 8003be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003be8:	f3bf 8f4f 	dsb	sy
}
 8003bec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bee:	f3bf 8f6f 	isb	sy
}
 8003bf2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	bf28      	it	cs
 8003c76:	2304      	movcs	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d902      	bls.n	8003c88 <NVIC_EncodePriority+0x30>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3b03      	subs	r3, #3
 8003c86:	e000      	b.n	8003c8a <NVIC_EncodePriority+0x32>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43d9      	mvns	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	4313      	orrs	r3, r2
         );
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ff28 	bl	8003b1c <__NVIC_SetPriorityGrouping>
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce6:	f7ff ff3d 	bl	8003b64 <__NVIC_GetPriorityGrouping>
 8003cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f7ff ffb1 	bl	8003c58 <NVIC_EncodePriority>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff80 	bl	8003c04 <__NVIC_SetPriority>
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff30 	bl	8003b80 <__NVIC_EnableIRQ>
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff40 	bl	8003bbc <__NVIC_DisableIRQ>
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff feb4 	bl	8003abc <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e099      	b.n	8003e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d80:	e00f      	b.n	8003da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d82:	f7ff fe9b 	bl	8003abc <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d908      	bls.n	8003da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e078      	b.n	8003e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e8      	bne.n	8003d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_DMA_Init+0x158>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d107      	bne.n	8003e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	4313      	orrs	r3, r2
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0307 	bic.w	r3, r3, #7
 8003e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d117      	bne.n	8003e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f8df 	bl	800400c <DMA_CheckFifoParam>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2240      	movs	r2, #64	; 0x40
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e62:	2301      	movs	r3, #1
 8003e64:	e016      	b.n	8003e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f896 	bl	8003fa0 <DMA_CalcBaseAndBitshift>
 8003e74:	4603      	mov	r3, r0
 8003e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	223f      	movs	r2, #63	; 0x3f
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	f010803f 	.word	0xf010803f

08003ea0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e050      	b.n	8003f54 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e048      	b.n	8003f54 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f84c 	bl	8003fa0 <DMA_CalcBaseAndBitshift>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	223f      	movs	r2, #63	; 0x3f
 8003f36:	409a      	lsls	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d004      	beq.n	8003f7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2280      	movs	r2, #128	; 0x80
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e00c      	b.n	8003f94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2205      	movs	r2, #5
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	3b10      	subs	r3, #16
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <DMA_CalcBaseAndBitshift+0x64>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <DMA_CalcBaseAndBitshift+0x68>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d909      	bls.n	8003fe2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
 8003fe0:	e007      	b.n	8003ff2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	aaaaaaab 	.word	0xaaaaaaab
 8004008:	080157cc 	.word	0x080157cc

0800400c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11f      	bne.n	8004066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d856      	bhi.n	80040da <DMA_CheckFifoParam+0xce>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <DMA_CheckFifoParam+0x28>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004057 	.word	0x08004057
 800403c:	08004045 	.word	0x08004045
 8004040:	080040db 	.word	0x080040db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d046      	beq.n	80040de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e043      	b.n	80040de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800405e:	d140      	bne.n	80040e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e03d      	b.n	80040e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406e:	d121      	bne.n	80040b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d837      	bhi.n	80040e6 <DMA_CheckFifoParam+0xda>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <DMA_CheckFifoParam+0x70>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004093 	.word	0x08004093
 8004084:	0800408d 	.word	0x0800408d
 8004088:	080040a5 	.word	0x080040a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e030      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d025      	beq.n	80040ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e022      	b.n	80040ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ac:	d11f      	bne.n	80040ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b2:	e01c      	b.n	80040ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d903      	bls.n	80040c2 <DMA_CheckFifoParam+0xb6>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d003      	beq.n	80040c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c0:	e018      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      break;
 80040c6:	e015      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e00b      	b.n	80040f2 <DMA_CheckFifoParam+0xe6>
      break;
 80040da:	bf00      	nop
 80040dc:	e00a      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040de:	bf00      	nop
 80040e0:	e008      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e006      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e004      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
    }
  } 
  
  return status; 
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e03b      	b.n	800418e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f833 	bl	8004196 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	f023 0107 	bic.w	r1, r3, #7
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800416e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68d1      	ldr	r1, [r2, #12]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	430b      	orrs	r3, r1
 800417c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_DMA2D_Start+0x1c>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e018      	b.n	80041f8 <HAL_DMA2D_Start+0x4e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2202      	movs	r2, #2
 80041d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f989 	bl	80044f8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d056      	beq.n	80042ca <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800421c:	f7ff fc4e 	bl	8003abc <HAL_GetTick>
 8004220:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004222:	e04b      	b.n	80042bc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004232:	2b00      	cmp	r3, #0
 8004234:	d023      	beq.n	800427e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	f043 0202 	orr.w	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2221      	movs	r2, #33	; 0x21
 8004268:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2204      	movs	r2, #4
 800426e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0a5      	b.n	80043ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d01a      	beq.n	80042bc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7ff fc19 	bl	8003abc <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <HAL_DMA2D_PollForTransfer+0x9c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10f      	bne.n	80042bc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e086      	b.n	80043ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ac      	beq.n	8004224 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d061      	beq.n	80043b0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ec:	f7ff fbe6 	bl	8003abc <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042f2:	e056      	b.n	80043a2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02e      	beq.n	8004364 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f043 0204 	orr.w	r2, r3, #4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	f043 0202 	orr.w	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2229      	movs	r2, #41	; 0x29
 800434e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2204      	movs	r2, #4
 8004354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e032      	b.n	80043ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d01a      	beq.n	80043a2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7ff fba6 	bl	8003abc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <HAL_DMA2D_PollForTransfer+0x182>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10f      	bne.n	80043a2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	f043 0220 	orr.w	r2, r3, #32
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e013      	b.n	80043ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0a1      	beq.n	80042f4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2212      	movs	r2, #18
 80043b6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA2D_ConfigLayer+0x20>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e079      	b.n	80044e8 <HAL_DMA2D_ConfigLayer+0x114>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	3318      	adds	r3, #24
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800441e:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004420:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b0a      	cmp	r3, #10
 8004428:	d003      	beq.n	8004432 <HAL_DMA2D_ConfigLayer+0x5e>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b09      	cmp	r3, #9
 8004430:	d107      	bne.n	8004442 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e005      	b.n	800444e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	061b      	lsls	r3, r3, #24
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d120      	bne.n	8004496 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	ea02 0103 	and.w	r1, r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	430a      	orrs	r2, r1
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b0a      	cmp	r3, #10
 800447c:	d003      	beq.n	8004486 <HAL_DMA2D_ConfigLayer+0xb2>
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b09      	cmp	r3, #9
 8004484:	d127      	bne.n	80044d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
 8004494:	e01f      	b.n	80044d6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	43db      	mvns	r3, r3
 80044a0:	ea02 0103 	and.w	r1, r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b0a      	cmp	r3, #10
 80044be:	d003      	beq.n	80044c8 <HAL_DMA2D_ConfigLayer+0xf4>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d106      	bne.n	80044d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044d4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	ff03000f 	.word	0xff03000f

080044f8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b08b      	sub	sp, #44	; 0x2c
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	041a      	lsls	r2, r3, #16
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004530:	d174      	bne.n	800461c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004538:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004540:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004548:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	431a      	orrs	r2, r3
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	4313      	orrs	r3, r2
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	e053      	b.n	8004612 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d106      	bne.n	8004580 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	e048      	b.n	8004612 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d111      	bne.n	80045ac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	0cdb      	lsrs	r3, r3, #19
 800458c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	0a9b      	lsrs	r3, r3, #10
 8004592:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	02db      	lsls	r3, r3, #11
 80045a2:	4313      	orrs	r3, r2
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e032      	b.n	8004612 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d117      	bne.n	80045e4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	0fdb      	lsrs	r3, r3, #31
 80045b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	0cdb      	lsrs	r3, r3, #19
 80045be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	0adb      	lsrs	r3, r3, #11
 80045c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	08db      	lsrs	r3, r3, #3
 80045ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	029b      	lsls	r3, r3, #10
 80045d4:	431a      	orrs	r2, r3
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	03db      	lsls	r3, r3, #15
 80045da:	4313      	orrs	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	e016      	b.n	8004612 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	0f1b      	lsrs	r3, r3, #28
 80045e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	0d1b      	lsrs	r3, r3, #20
 80045ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	0b1b      	lsrs	r3, r3, #12
 80045f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	011a      	lsls	r2, r3, #4
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	431a      	orrs	r2, r3
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	4313      	orrs	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800461a:	e003      	b.n	8004624 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	60da      	str	r2, [r3, #12]
}
 8004624:	bf00      	nop
 8004626:	372c      	adds	r7, #44	; 0x2c
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	; 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e177      	b.n	800493c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800464c:	2201      	movs	r2, #1
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	429a      	cmp	r2, r3
 8004666:	f040 8166 	bne.w	8004936 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b01      	cmp	r3, #1
 8004674:	d005      	beq.n	8004682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800467e:	2b02      	cmp	r3, #2
 8004680:	d130      	bne.n	80046e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b8:	2201      	movs	r2, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0201 	and.w	r2, r3, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d017      	beq.n	8004720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2203      	movs	r2, #3
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d123      	bne.n	8004774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	08da      	lsrs	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3208      	adds	r2, #8
 8004734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	2203      	movs	r2, #3
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0203 	and.w	r2, r3, #3
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80c0 	beq.w	8004936 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	4b66      	ldr	r3, [pc, #408]	; (8004954 <HAL_GPIO_Init+0x324>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	4a65      	ldr	r2, [pc, #404]	; (8004954 <HAL_GPIO_Init+0x324>)
 80047c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c4:	6453      	str	r3, [r2, #68]	; 0x44
 80047c6:	4b63      	ldr	r3, [pc, #396]	; (8004954 <HAL_GPIO_Init+0x324>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047d2:	4a61      	ldr	r2, [pc, #388]	; (8004958 <HAL_GPIO_Init+0x328>)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	3302      	adds	r3, #2
 80047da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	220f      	movs	r2, #15
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a58      	ldr	r2, [pc, #352]	; (800495c <HAL_GPIO_Init+0x32c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d037      	beq.n	800486e <HAL_GPIO_Init+0x23e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a57      	ldr	r2, [pc, #348]	; (8004960 <HAL_GPIO_Init+0x330>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_GPIO_Init+0x23a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a56      	ldr	r2, [pc, #344]	; (8004964 <HAL_GPIO_Init+0x334>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02b      	beq.n	8004866 <HAL_GPIO_Init+0x236>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a55      	ldr	r2, [pc, #340]	; (8004968 <HAL_GPIO_Init+0x338>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d025      	beq.n	8004862 <HAL_GPIO_Init+0x232>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a54      	ldr	r2, [pc, #336]	; (800496c <HAL_GPIO_Init+0x33c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d01f      	beq.n	800485e <HAL_GPIO_Init+0x22e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a53      	ldr	r2, [pc, #332]	; (8004970 <HAL_GPIO_Init+0x340>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d019      	beq.n	800485a <HAL_GPIO_Init+0x22a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a52      	ldr	r2, [pc, #328]	; (8004974 <HAL_GPIO_Init+0x344>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_GPIO_Init+0x226>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a51      	ldr	r2, [pc, #324]	; (8004978 <HAL_GPIO_Init+0x348>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00d      	beq.n	8004852 <HAL_GPIO_Init+0x222>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a50      	ldr	r2, [pc, #320]	; (800497c <HAL_GPIO_Init+0x34c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <HAL_GPIO_Init+0x21e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a4f      	ldr	r2, [pc, #316]	; (8004980 <HAL_GPIO_Init+0x350>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_GPIO_Init+0x21a>
 8004846:	2309      	movs	r3, #9
 8004848:	e012      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800484a:	230a      	movs	r3, #10
 800484c:	e010      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800484e:	2308      	movs	r3, #8
 8004850:	e00e      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004852:	2307      	movs	r3, #7
 8004854:	e00c      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004856:	2306      	movs	r3, #6
 8004858:	e00a      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800485a:	2305      	movs	r3, #5
 800485c:	e008      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800485e:	2304      	movs	r3, #4
 8004860:	e006      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004862:	2303      	movs	r3, #3
 8004864:	e004      	b.n	8004870 <HAL_GPIO_Init+0x240>
 8004866:	2302      	movs	r3, #2
 8004868:	e002      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x240>
 800486e:	2300      	movs	r3, #0
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	4093      	lsls	r3, r2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004880:	4935      	ldr	r1, [pc, #212]	; (8004958 <HAL_GPIO_Init+0x328>)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_GPIO_Init+0x354>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048b2:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_GPIO_Init+0x354>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_GPIO_Init+0x354>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048dc:	4a29      	ldr	r2, [pc, #164]	; (8004984 <HAL_GPIO_Init+0x354>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <HAL_GPIO_Init+0x354>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004906:	4a1f      	ldr	r2, [pc, #124]	; (8004984 <HAL_GPIO_Init+0x354>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <HAL_GPIO_Init+0x354>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <HAL_GPIO_Init+0x354>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	f67f ae84 	bls.w	800464c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	; 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020400 	.word	0x40020400
 8004964:	40020800 	.word	0x40020800
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40021000 	.word	0x40021000
 8004970:	40021400 	.word	0x40021400
 8004974:	40021800 	.word	0x40021800
 8004978:	40021c00 	.word	0x40021c00
 800497c:	40022000 	.word	0x40022000
 8004980:	40022400 	.word	0x40022400
 8004984:	40013c00 	.word	0x40013c00

08004988 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e0d9      	b.n	8004b58 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049a4:	2201      	movs	r2, #1
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	f040 80c9 	bne.w	8004b52 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80049c0:	4a6b      	ldr	r2, [pc, #428]	; (8004b70 <HAL_GPIO_DeInit+0x1e8>)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	3302      	adds	r3, #2
 80049c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	220f      	movs	r2, #15
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a63      	ldr	r2, [pc, #396]	; (8004b74 <HAL_GPIO_DeInit+0x1ec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d037      	beq.n	8004a5a <HAL_GPIO_DeInit+0xd2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a62      	ldr	r2, [pc, #392]	; (8004b78 <HAL_GPIO_DeInit+0x1f0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <HAL_GPIO_DeInit+0xce>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a61      	ldr	r2, [pc, #388]	; (8004b7c <HAL_GPIO_DeInit+0x1f4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02b      	beq.n	8004a52 <HAL_GPIO_DeInit+0xca>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a60      	ldr	r2, [pc, #384]	; (8004b80 <HAL_GPIO_DeInit+0x1f8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d025      	beq.n	8004a4e <HAL_GPIO_DeInit+0xc6>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a5f      	ldr	r2, [pc, #380]	; (8004b84 <HAL_GPIO_DeInit+0x1fc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01f      	beq.n	8004a4a <HAL_GPIO_DeInit+0xc2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a5e      	ldr	r2, [pc, #376]	; (8004b88 <HAL_GPIO_DeInit+0x200>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d019      	beq.n	8004a46 <HAL_GPIO_DeInit+0xbe>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a5d      	ldr	r2, [pc, #372]	; (8004b8c <HAL_GPIO_DeInit+0x204>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_GPIO_DeInit+0xba>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a5c      	ldr	r2, [pc, #368]	; (8004b90 <HAL_GPIO_DeInit+0x208>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00d      	beq.n	8004a3e <HAL_GPIO_DeInit+0xb6>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a5b      	ldr	r2, [pc, #364]	; (8004b94 <HAL_GPIO_DeInit+0x20c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <HAL_GPIO_DeInit+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a5a      	ldr	r2, [pc, #360]	; (8004b98 <HAL_GPIO_DeInit+0x210>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d101      	bne.n	8004a36 <HAL_GPIO_DeInit+0xae>
 8004a32:	2309      	movs	r3, #9
 8004a34:	e012      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a36:	230a      	movs	r3, #10
 8004a38:	e010      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	e00e      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a3e:	2307      	movs	r3, #7
 8004a40:	e00c      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a42:	2306      	movs	r3, #6
 8004a44:	e00a      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a46:	2305      	movs	r3, #5
 8004a48:	e008      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	e006      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e004      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e002      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_GPIO_DeInit+0xd4>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	f002 0203 	and.w	r2, r2, #3
 8004a62:	0092      	lsls	r2, r2, #2
 8004a64:	4093      	lsls	r3, r2
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d132      	bne.n	8004ad2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a6c:	4b4b      	ldr	r3, [pc, #300]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	4949      	ldr	r1, [pc, #292]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a7a:	4b48      	ldr	r3, [pc, #288]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	4946      	ldr	r1, [pc, #280]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004a88:	4b44      	ldr	r3, [pc, #272]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	4942      	ldr	r1, [pc, #264]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a96:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	493f      	ldr	r1, [pc, #252]	; (8004b9c <HAL_GPIO_DeInit+0x214>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004ab4:	4a2e      	ldr	r2, [pc, #184]	; (8004b70 <HAL_GPIO_DeInit+0x1e8>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	3302      	adds	r3, #2
 8004abc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	482a      	ldr	r0, [pc, #168]	; (8004b70 <HAL_GPIO_DeInit+0x1e8>)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	400a      	ands	r2, r1
 8004acc:	3302      	adds	r3, #2
 8004ace:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2103      	movs	r1, #3
 8004adc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	08da      	lsrs	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3208      	adds	r2, #8
 8004af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	220f      	movs	r2, #15
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	08d2      	lsrs	r2, r2, #3
 8004b08:	4019      	ands	r1, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3208      	adds	r2, #8
 8004b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	2103      	movs	r1, #3
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	401a      	ands	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	2103      	movs	r1, #3
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43db      	mvns	r3, r3
 8004b4c:	401a      	ands	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	3301      	adds	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	f67f af22 	bls.w	80049a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40013800 	.word	0x40013800
 8004b74:	40020000 	.word	0x40020000
 8004b78:	40020400 	.word	0x40020400
 8004b7c:	40020800 	.word	0x40020800
 8004b80:	40020c00 	.word	0x40020c00
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40021400 	.word	0x40021400
 8004b8c:	40021800 	.word	0x40021800
 8004b90:	40021c00 	.word	0x40021c00
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022400 	.word	0x40022400
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
 8004bac:	4613      	mov	r3, r2
 8004bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bb6:	887a      	ldrh	r2, [r7, #2]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bbc:	e003      	b.n	8004bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	041a      	lsls	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	619a      	str	r2, [r3, #24]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0bf      	b.n	8004d66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8ba 	bl	8004d74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004c16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_LTDC_Init+0x19c>)
 8004c48:	400b      	ands	r3, r1
 8004c4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68d9      	ldr	r1, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b3e      	ldr	r3, [pc, #248]	; (8004d70 <HAL_LTDC_Init+0x19c>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68d9      	ldr	r1, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6919      	ldr	r1, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_LTDC_Init+0x19c>)
 8004ca4:	400b      	ands	r3, r1
 8004ca6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6919      	ldr	r1, [r3, #16]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6959      	ldr	r1, [r3, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_LTDC_Init+0x19c>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6959      	ldr	r1, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfa:	021b      	lsls	r3, r3, #8
 8004cfc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0206 	orr.w	r2, r2, #6
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	f000f800 	.word	0xf000f800

08004d74 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_LTDC_ConfigLayer+0x1a>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e02c      	b.n	8004dfc <HAL_LTDC_ConfigLayer+0x74>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2134      	movs	r1, #52	; 0x34
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f83b 	bl	8004e58 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdb0      	pop	{r4, r5, r7, pc}

08004e04 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_LTDC_EnableDither+0x16>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e016      	b.n	8004e48 <HAL_LTDC_EnableDither+0x44>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <HAL_LTDC_EnableDither+0x50>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_LTDC_EnableDither+0x50>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	40016800 	.word	0x40016800

08004e58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e74:	4413      	add	r3, r2
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	4413      	add	r3, r2
 8004e86:	3384      	adds	r3, #132	; 0x84
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	01d2      	lsls	r2, r2, #7
 8004e94:	440a      	add	r2, r1
 8004e96:	3284      	adds	r2, #132	; 0x84
 8004e98:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e9c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004eb0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3384      	adds	r3, #132	; 0x84
 8004ec0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ec6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed6:	4413      	add	r3, r2
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3384      	adds	r3, #132	; 0x84
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	01d2      	lsls	r2, r2, #7
 8004ef6:	440a      	add	r2, r1
 8004ef8:	3284      	adds	r2, #132	; 0x84
 8004efa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004efe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f0e:	4413      	add	r3, r2
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	01db      	lsls	r3, r3, #7
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3384      	adds	r3, #132	; 0x84
 8004f20:	4619      	mov	r1, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	01db      	lsls	r3, r3, #7
 8004f32:	4413      	add	r3, r2
 8004f34:	3384      	adds	r3, #132	; 0x84
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	01d2      	lsls	r2, r2, #7
 8004f42:	440a      	add	r2, r1
 8004f44:	3284      	adds	r2, #132	; 0x84
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	01db      	lsls	r3, r3, #7
 8004f56:	4413      	add	r3, r2
 8004f58:	3384      	adds	r3, #132	; 0x84
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	01db      	lsls	r3, r3, #7
 8004f88:	4413      	add	r3, r2
 8004f8a:	3384      	adds	r3, #132	; 0x84
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	01db      	lsls	r3, r3, #7
 8004f98:	4413      	add	r3, r2
 8004f9a:	3384      	adds	r3, #132	; 0x84
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fa8:	461a      	mov	r2, r3
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	01db      	lsls	r3, r3, #7
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3384      	adds	r3, #132	; 0x84
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	01db      	lsls	r3, r3, #7
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3384      	adds	r3, #132	; 0x84
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	01d2      	lsls	r2, r2, #7
 8004fe2:	440a      	add	r2, r1
 8004fe4:	3284      	adds	r2, #132	; 0x84
 8004fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3384      	adds	r3, #132	; 0x84
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	01db      	lsls	r3, r3, #7
 800500c:	4413      	add	r3, r2
 800500e:	3384      	adds	r3, #132	; 0x84
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4611      	mov	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	01d2      	lsls	r2, r2, #7
 800501c:	440a      	add	r2, r1
 800501e:	3284      	adds	r2, #132	; 0x84
 8005020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005024:	f023 0307 	bic.w	r3, r3, #7
 8005028:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	69da      	ldr	r2, [r3, #28]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	6809      	ldr	r1, [r1, #0]
 8005036:	4608      	mov	r0, r1
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	01c9      	lsls	r1, r1, #7
 800503c:	4401      	add	r1, r0
 800503e:	3184      	adds	r1, #132	; 0x84
 8005040:	4313      	orrs	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	01db      	lsls	r3, r3, #7
 800504e:	4413      	add	r3, r2
 8005050:	3384      	adds	r3, #132	; 0x84
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	01db      	lsls	r3, r3, #7
 800505e:	4413      	add	r3, r2
 8005060:	3384      	adds	r3, #132	; 0x84
 8005062:	461a      	mov	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	01db      	lsls	r3, r3, #7
 8005072:	4413      	add	r3, r2
 8005074:	3384      	adds	r3, #132	; 0x84
 8005076:	461a      	mov	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005086:	2304      	movs	r3, #4
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e01b      	b.n	80050c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d102      	bne.n	800509a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005094:	2303      	movs	r3, #3
 8005096:	61fb      	str	r3, [r7, #28]
 8005098:	e014      	b.n	80050c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00b      	beq.n	80050ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d007      	beq.n	80050ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d003      	beq.n	80050ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050b6:	2b07      	cmp	r3, #7
 80050b8:	d102      	bne.n	80050c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050ba:	2302      	movs	r3, #2
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	e001      	b.n	80050c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	01db      	lsls	r3, r3, #7
 80050ce:	4413      	add	r3, r2
 80050d0:	3384      	adds	r3, #132	; 0x84
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	4611      	mov	r1, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	01d2      	lsls	r2, r2, #7
 80050de:	440a      	add	r2, r1
 80050e0:	3284      	adds	r2, #132	; 0x84
 80050e2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80050e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	1acb      	subs	r3, r1, r3
 80050fe:	69f9      	ldr	r1, [r7, #28]
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	6809      	ldr	r1, [r1, #0]
 800510a:	4608      	mov	r0, r1
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	01c9      	lsls	r1, r1, #7
 8005110:	4401      	add	r1, r0
 8005112:	3184      	adds	r1, #132	; 0x84
 8005114:	4313      	orrs	r3, r2
 8005116:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	01db      	lsls	r3, r3, #7
 8005122:	4413      	add	r3, r2
 8005124:	3384      	adds	r3, #132	; 0x84
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	6812      	ldr	r2, [r2, #0]
 800512c:	4611      	mov	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	01d2      	lsls	r2, r2, #7
 8005132:	440a      	add	r2, r1
 8005134:	3284      	adds	r2, #132	; 0x84
 8005136:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	01db      	lsls	r3, r3, #7
 800514a:	4413      	add	r3, r2
 800514c:	3384      	adds	r3, #132	; 0x84
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	01db      	lsls	r3, r3, #7
 8005160:	4413      	add	r3, r2
 8005162:	3384      	adds	r3, #132	; 0x84
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	4611      	mov	r1, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	01d2      	lsls	r2, r2, #7
 8005170:	440a      	add	r2, r1
 8005172:	3284      	adds	r2, #132	; 0x84
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	6013      	str	r3, [r2, #0]
}
 800517a:	bf00      	nop
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005188:	b08f      	sub	sp, #60	; 0x3c
 800518a:	af0a      	add	r7, sp, #40	; 0x28
 800518c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e10f      	b.n	80053b8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f008 fd70 	bl	800dc98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2203      	movs	r2, #3
 80051bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 fd3d 	bl	8008c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	603b      	str	r3, [r7, #0]
 80051e2:	687e      	ldr	r6, [r7, #4]
 80051e4:	466d      	mov	r5, sp
 80051e6:	f106 0410 	add.w	r4, r6, #16
 80051ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80051fa:	1d33      	adds	r3, r6, #4
 80051fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051fe:	6838      	ldr	r0, [r7, #0]
 8005200:	f003 fc14 	bl	8008a2c <USB_CoreInit>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e0d0      	b.n	80053b8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f003 fd2b 	bl	8008c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e04a      	b.n	80052be <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	333d      	adds	r3, #61	; 0x3d
 8005238:	2201      	movs	r2, #1
 800523a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	333c      	adds	r3, #60	; 0x3c
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	b298      	uxth	r0, r3
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	3344      	adds	r3, #68	; 0x44
 8005264:	4602      	mov	r2, r0
 8005266:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005268:	7bfa      	ldrb	r2, [r7, #15]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	3340      	adds	r3, #64	; 0x40
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3348      	adds	r3, #72	; 0x48
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	334c      	adds	r3, #76	; 0x4c
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3354      	adds	r3, #84	; 0x54
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	3301      	adds	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d3af      	bcc.n	8005228 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e044      	b.n	8005358 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052ce:	7bfa      	ldrb	r2, [r7, #15]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052e0:	2200      	movs	r2, #0
 80052e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	3301      	adds	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3b5      	bcc.n	80052ce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	687e      	ldr	r6, [r7, #4]
 800536a:	466d      	mov	r5, sp
 800536c:	f106 0410 	add.w	r4, r6, #16
 8005370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005378:	e894 0003 	ldmia.w	r4, {r0, r1}
 800537c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005380:	1d33      	adds	r3, r6, #4
 8005382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005384:	6838      	ldr	r0, [r7, #0]
 8005386:	f003 fcc3 	bl	8008d10 <USB_DevInit>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e00d      	b.n	80053b8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f004 fe12 	bl	8009fda <USB_DevDisconnect>

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053c0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_PCD_Start+0x1c>
 80053d8:	2302      	movs	r3, #2
 80053da:	e020      	b.n	800541e <HAL_PCD_Start+0x5e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d109      	bne.n	8005400 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d005      	beq.n	8005400 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f003 fc15 	bl	8008c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f004 fdc2 	bl	8009f98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005426:	b590      	push	{r4, r7, lr}
 8005428:	b08d      	sub	sp, #52	; 0x34
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f004 fe80 	bl	800a142 <USB_GetMode>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	f040 848a 	bne.w	8005d5e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f004 fde4 	bl	800a01c <USB_ReadInterrupts>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8480 	beq.w	8005d5c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f004 fdd1 	bl	800a01c <USB_ReadInterrupts>
 800547a:	4603      	mov	r3, r0
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d107      	bne.n	8005494 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f002 0202 	and.w	r2, r2, #2
 8005492:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 fdbf 	bl	800a01c <USB_ReadInterrupts>
 800549e:	4603      	mov	r3, r0
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d161      	bne.n	800556c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0210 	bic.w	r2, r2, #16
 80054b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f003 020f 	and.w	r2, r3, #15
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	3304      	adds	r3, #4
 80054d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	0c5b      	lsrs	r3, r3, #17
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d124      	bne.n	800552e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d035      	beq.n	800555c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	6a38      	ldr	r0, [r7, #32]
 8005504:	f004 fbf6 	bl	8009cf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005514:	441a      	add	r2, r3
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005526:	441a      	add	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	621a      	str	r2, [r3, #32]
 800552c:	e016      	b.n	800555c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	0c5b      	lsrs	r3, r3, #17
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	2b06      	cmp	r3, #6
 8005538:	d110      	bne.n	800555c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005540:	2208      	movs	r2, #8
 8005542:	4619      	mov	r1, r3
 8005544:	6a38      	ldr	r0, [r7, #32]
 8005546:	f004 fbd5 	bl	8009cf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005556:	441a      	add	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0210 	orr.w	r2, r2, #16
 800556a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f004 fd53 	bl	800a01c <USB_ReadInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800557c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005580:	f040 80a7 	bne.w	80056d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f004 fd58 	bl	800a042 <USB_ReadDevAllOutEpInterrupt>
 8005592:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005594:	e099      	b.n	80056ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 808e 	beq.w	80056be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f004 fd7c 	bl	800a0aa <USB_ReadDevOutEPInterrupt>
 80055b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ca:	461a      	mov	r2, r3
 80055cc:	2301      	movs	r3, #1
 80055ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fec2 	bl	800635c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00c      	beq.n	80055fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ee:	461a      	mov	r2, r3
 80055f0:	2308      	movs	r3, #8
 80055f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 ff98 	bl	800652c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	461a      	mov	r2, r3
 8005614:	2310      	movs	r3, #16
 8005616:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d030      	beq.n	8005684 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d109      	bne.n	8005642 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005640:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	3304      	adds	r3, #4
 8005656:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	78db      	ldrb	r3, [r3, #3]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d108      	bne.n	8005672 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2200      	movs	r2, #0
 8005664:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f008 fc15 	bl	800de9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	2302      	movs	r3, #2
 8005682:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	2320      	movs	r3, #32
 800569e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	3301      	adds	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f af62 	bne.w	8005596 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 fca0 	bl	800a01c <USB_ReadInterrupts>
 80056dc:	4603      	mov	r3, r0
 80056de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056e6:	f040 80db 	bne.w	80058a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 fcc1 	bl	800a076 <USB_ReadDevAllInEpInterrupt>
 80056f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80056fa:	e0cd      	b.n	8005898 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 80c2 	beq.w	800588c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f004 fce7 	bl	800a0e6 <USB_ReadDevInEPInterrupt>
 8005718:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d057      	beq.n	80057d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	2201      	movs	r2, #1
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43db      	mvns	r3, r3
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4013      	ands	r3, r2
 8005746:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	461a      	mov	r2, r3
 8005756:	2301      	movs	r3, #1
 8005758:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d132      	bne.n	80057c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	334c      	adds	r3, #76	; 0x4c
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4403      	add	r3, r0
 8005782:	3348      	adds	r3, #72	; 0x48
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4419      	add	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4403      	add	r3, r0
 8005796:	334c      	adds	r3, #76	; 0x4c
 8005798:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d113      	bne.n	80057c8 <HAL_PCD_IRQHandler+0x3a2>
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3354      	adds	r3, #84	; 0x54
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d108      	bne.n	80057c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057c0:	461a      	mov	r2, r3
 80057c2:	2101      	movs	r1, #1
 80057c4:	f004 fcee 	bl	800a1a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f008 fadf 	bl	800dd92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	461a      	mov	r2, r3
 80057ec:	2308      	movs	r3, #8
 80057ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	461a      	mov	r2, r3
 8005808:	2310      	movs	r3, #16
 800580a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d008      	beq.n	8005828 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	461a      	mov	r2, r3
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d023      	beq.n	800587a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005834:	6a38      	ldr	r0, [r7, #32]
 8005836:	f003 fbcf 	bl	8008fd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800583a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3338      	adds	r3, #56	; 0x38
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	3304      	adds	r3, #4
 800584c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d108      	bne.n	8005868 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f008 fb2c 	bl	800dec0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	2302      	movs	r3, #2
 8005878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fcdb 	bl	8006242 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	3301      	adds	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	f47f af2e 	bne.w	80056fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f004 fbb9 	bl	800a01c <USB_ReadInterrupts>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b4:	d122      	bne.n	80058fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d108      	bne.n	80058e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058dc:	2100      	movs	r1, #0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fec2 	bl	8006668 <HAL_PCDEx_LPM_Callback>
 80058e4:	e002      	b.n	80058ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f008 faca 	bl	800de80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f004 fb8b 	bl	800a01c <USB_ReadInterrupts>
 8005906:	4603      	mov	r3, r0
 8005908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005910:	d112      	bne.n	8005938 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f008 fa86 	bl	800de34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005936:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f004 fb6d 	bl	800a01c <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594c:	f040 80b7 	bne.w	8005abe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2110      	movs	r1, #16
 800596a:	4618      	mov	r0, r3
 800596c:	f003 fb34 	bl	8008fd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005974:	e046      	b.n	8005a04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005982:	461a      	mov	r2, r3
 8005984:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005988:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800599a:	0151      	lsls	r1, r2, #5
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	440a      	add	r2, r1
 80059a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059bc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059fc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	3301      	adds	r3, #1
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3b3      	bcc.n	8005976 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a3a:	f043 030b 	orr.w	r3, r3, #11
 8005a3e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a50:	f043 030b 	orr.w	r3, r3, #11
 8005a54:	6453      	str	r3, [r2, #68]	; 0x44
 8005a56:	e015      	b.n	8005a84 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a6a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a7e:	f043 030b 	orr.w	r3, r3, #11
 8005a82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f004 fb7b 	bl	800a1a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695a      	ldr	r2, [r3, #20]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f004 faaa 	bl	800a01c <USB_ReadInterrupts>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad2:	d124      	bne.n	8005b1e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 fb40 	bl	800a15e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f003 faf5 	bl	80090d2 <USB_GetDevSpeed>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681c      	ldr	r4, [r3, #0]
 8005af4:	f001 fa28 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8005af8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4620      	mov	r0, r4
 8005b04:	f002 fff4 	bl	8008af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f008 f96a 	bl	800dde2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f004 fa7a 	bl	800a01c <USB_ReadInterrupts>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d10a      	bne.n	8005b48 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f008 f947 	bl	800ddc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695a      	ldr	r2, [r3, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f002 0208 	and.w	r2, r2, #8
 8005b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 fa65 	bl	800a01c <USB_ReadInterrupts>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d122      	bne.n	8005ba2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b68:	2301      	movs	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	e014      	b.n	8005b98 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d105      	bne.n	8005b92 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb27 	bl	80061e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	3301      	adds	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d3e5      	bcc.n	8005b6e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f004 fa38 	bl	800a01c <USB_ReadInterrupts>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb6:	d13b      	bne.n	8005c30 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bb8:	2301      	movs	r3, #1
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbc:	e02b      	b.n	8005c16 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	3340      	adds	r3, #64	; 0x40
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d115      	bne.n	8005c10 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005be4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da12      	bge.n	8005c10 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	333f      	adds	r3, #63	; 0x3f
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fae8 	bl	80061e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	3301      	adds	r3, #1
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d3ce      	bcc.n	8005bbe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695a      	ldr	r2, [r3, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f004 f9f1 	bl	800a01c <USB_ReadInterrupts>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c44:	d155      	bne.n	8005cf2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c46:	2301      	movs	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4a:	e045      	b.n	8005cd8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d12e      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	da2b      	bge.n	8005cd2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c86:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d121      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	4613      	mov	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cce:	6053      	str	r3, [r2, #4]
            break;
 8005cd0:	e007      	b.n	8005ce2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3b4      	bcc.n	8005c4c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 f990 	bl	800a01c <USB_ReadInterrupts>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d10a      	bne.n	8005d1e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f008 f8eb 	bl	800dee4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f004 f97a 	bl	800a01c <USB_ReadInterrupts>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d115      	bne.n	8005d5e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f008 f8db 	bl	800df00 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6859      	ldr	r1, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	e000      	b.n	8005d5e <HAL_PCD_IRQHandler+0x938>
      return;
 8005d5c:	bf00      	nop
    }
  }
}
 8005d5e:	3734      	adds	r7, #52	; 0x34
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd90      	pop	{r4, r7, pc}

08005d64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_PCD_SetAddress+0x1a>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e013      	b.n	8005da6 <HAL_PCD_SetAddress+0x42>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	78fa      	ldrb	r2, [r7, #3]
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f004 f8d8 	bl	8009f4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b084      	sub	sp, #16
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	70fb      	strb	r3, [r7, #3]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	803b      	strh	r3, [r7, #0]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da0f      	bge.n	8005df4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3338      	adds	r3, #56	; 0x38
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	705a      	strb	r2, [r3, #1]
 8005df2:	e00f      	b.n	8005e14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 020f 	and.w	r2, r3, #15
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4413      	add	r3, r2
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e20:	883a      	ldrh	r2, [r7, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	78ba      	ldrb	r2, [r7, #2]
 8005e2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e3e:	78bb      	ldrb	r3, [r7, #2]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d102      	bne.n	8005e4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_PCD_EP_Open+0xaa>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e00e      	b.n	8005e76 <HAL_PCD_EP_Open+0xc8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f003 f958 	bl	800911c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da0f      	bge.n	8005eb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	f003 020f 	and.w	r2, r3, #15
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	3338      	adds	r3, #56	; 0x38
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	705a      	strb	r2, [r3, #1]
 8005eb0:	e00f      	b.n	8005ed2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_PCD_EP_Close+0x6e>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e00e      	b.n	8005f0a <HAL_PCD_EP_Close+0x8c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f003 f996 	bl	800922c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f54:	7afb      	ldrb	r3, [r7, #11]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d102      	bne.n	8005f6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	f003 fc75 	bl	8009874 <USB_EP0StartXfer>
 8005f8a:	e008      	b.n	8005f9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	6979      	ldr	r1, [r7, #20]
 8005f9a:	f003 fa23 	bl	80093e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe8:	7afb      	ldrb	r3, [r7, #11]
 8005fea:	f003 020f 	and.w	r2, r3, #15
 8005fee:	4613      	mov	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	3338      	adds	r3, #56	; 0x38
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2201      	movs	r2, #1
 8006016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d102      	bne.n	8006032 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	f003 fc13 	bl	8009874 <USB_EP0StartXfer>
 800604e:	e008      	b.n	8006062 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	b2db      	uxtb	r3, r3
 800605a:	461a      	mov	r2, r3
 800605c:	6979      	ldr	r1, [r7, #20]
 800605e:	f003 f9c1 	bl	80093e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	429a      	cmp	r2, r3
 8006084:	d901      	bls.n	800608a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e050      	b.n	800612c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800608a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800608e:	2b00      	cmp	r3, #0
 8006090:	da0f      	bge.n	80060b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	3338      	adds	r3, #56	; 0x38
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	4413      	add	r3, r2
 80060a6:	3304      	adds	r3, #4
 80060a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	705a      	strb	r2, [r3, #1]
 80060b0:	e00d      	b.n	80060ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	4613      	mov	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	3304      	adds	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_PCD_EP_SetStall+0x82>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e01e      	b.n	800612c <HAL_PCD_EP_SetStall+0xc0>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f003 fe51 	bl	8009da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	b2d9      	uxtb	r1, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800611c:	461a      	mov	r2, r3
 800611e:	f004 f841 	bl	800a1a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d901      	bls.n	8006152 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e042      	b.n	80061d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	da0f      	bge.n	800617a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	3338      	adds	r3, #56	; 0x38
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	3304      	adds	r3, #4
 8006170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	705a      	strb	r2, [r3, #1]
 8006178:	e00f      	b.n	800619a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	4613      	mov	r3, r2
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	4413      	add	r3, r2
 8006190:	3304      	adds	r3, #4
 8006192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_PCD_EP_ClrStall+0x86>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e00e      	b.n	80061d8 <HAL_PCD_EP_ClrStall+0xa4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f003 fe59 	bl	8009e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da0c      	bge.n	800620e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	3338      	adds	r3, #56	; 0x38
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4413      	add	r3, r2
 8006208:	3304      	adds	r3, #4
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e00c      	b.n	8006228 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	3304      	adds	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	4618      	mov	r0, r3
 8006230:	f003 fc78 	bl	8009b24 <USB_EPStopXfer>
 8006234:	4603      	mov	r3, r0
 8006236:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006238:	7afb      	ldrb	r3, [r7, #11]
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b08a      	sub	sp, #40	; 0x28
 8006246:	af02      	add	r7, sp, #8
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	3338      	adds	r3, #56	; 0x38
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	3304      	adds	r3, #4
 8006268:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1a      	ldr	r2, [r3, #32]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	429a      	cmp	r2, r3
 8006274:	d901      	bls.n	800627a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e06c      	b.n	8006354 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	429a      	cmp	r2, r3
 800628e:	d902      	bls.n	8006296 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3303      	adds	r3, #3
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800629e:	e02b      	b.n	80062f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d902      	bls.n	80062bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3303      	adds	r3, #3
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6919      	ldr	r1, [r3, #16]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	4603      	mov	r3, r0
 80062da:	6978      	ldr	r0, [r7, #20]
 80062dc:	f003 fccc 	bl	8009c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	441a      	add	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	b29b      	uxth	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	429a      	cmp	r2, r3
 800630c:	d809      	bhi.n	8006322 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1a      	ldr	r2, [r3, #32]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006316:	429a      	cmp	r2, r3
 8006318:	d203      	bcs.n	8006322 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1be      	bne.n	80062a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	429a      	cmp	r2, r3
 800632c:	d811      	bhi.n	8006352 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	2201      	movs	r2, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	43db      	mvns	r3, r3
 8006348:	6939      	ldr	r1, [r7, #16]
 800634a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800634e:	4013      	ands	r3, r2
 8006350:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	333c      	adds	r3, #60	; 0x3c
 8006374:	3304      	adds	r3, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d17b      	bne.n	800648a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d015      	beq.n	80063c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4a61      	ldr	r2, [pc, #388]	; (8006524 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	f240 80b9 	bls.w	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80b3 	beq.w	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063be:	461a      	mov	r2, r3
 80063c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	e0a7      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	2320      	movs	r3, #32
 80063e2:	6093      	str	r3, [r2, #8]
 80063e4:	e098      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f040 8093 	bne.w	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4a4b      	ldr	r2, [pc, #300]	; (8006524 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d90f      	bls.n	800641a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	461a      	mov	r2, r3
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	6093      	str	r3, [r2, #8]
 8006418:	e07e      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	0159      	lsls	r1, r3, #5
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	440b      	add	r3, r1
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d114      	bne.n	800647c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006464:	461a      	mov	r2, r3
 8006466:	2101      	movs	r1, #1
 8006468:	f003 fe9c 	bl	800a1a4 <USB_EP0_OutStart>
 800646c:	e006      	b.n	800647c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	691a      	ldr	r2, [r3, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	441a      	add	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f007 fc6a 	bl	800dd5c <HAL_PCD_DataOutStageCallback>
 8006488:	e046      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4a26      	ldr	r2, [pc, #152]	; (8006528 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d124      	bne.n	80064dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	461a      	mov	r2, r3
 80064aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ae:	6093      	str	r3, [r2, #8]
 80064b0:	e032      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c8:	461a      	mov	r2, r3
 80064ca:	2320      	movs	r3, #32
 80064cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f007 fc41 	bl	800dd5c <HAL_PCD_DataOutStageCallback>
 80064da:	e01d      	b.n	8006518 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d114      	bne.n	800650c <PCD_EP_OutXfrComplete_int+0x1b0>
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d108      	bne.n	800650c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006504:	461a      	mov	r2, r3
 8006506:	2100      	movs	r1, #0
 8006508:	f003 fe4c 	bl	800a1a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f007 fc22 	bl	800dd5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	4f54300a 	.word	0x4f54300a
 8006528:	4f54310a 	.word	0x4f54310a

0800652c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	333c      	adds	r3, #60	; 0x3c
 8006544:	3304      	adds	r3, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d90e      	bls.n	8006580 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f007 fbd9 	bl	800dd38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d90c      	bls.n	80065a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d108      	bne.n	80065a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065a0:	461a      	mov	r2, r3
 80065a2:	2101      	movs	r1, #1
 80065a4:	f003 fdfe 	bl	800a1a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	4f54300a 	.word	0x4f54300a

080065b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
 80065c4:	4613      	mov	r3, r2
 80065c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d107      	bne.n	80065e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065d6:	883b      	ldrh	r3, [r7, #0]
 80065d8:	0419      	lsls	r1, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
 80065e4:	e028      	b.n	8006638 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e00d      	b.n	8006616 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	3340      	adds	r3, #64	; 0x40
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	3301      	adds	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
 8006616:	7bfa      	ldrb	r2, [r7, #15]
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	3b01      	subs	r3, #1
 800661c:	429a      	cmp	r2, r3
 800661e:	d3ec      	bcc.n	80065fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006620:	883b      	ldrh	r3, [r7, #0]
 8006622:	0418      	lsls	r0, r3, #16
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6819      	ldr	r1, [r3, #0]
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	3b01      	subs	r3, #1
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	4302      	orrs	r2, r0
 8006630:	3340      	adds	r3, #64	; 0x40
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	887a      	ldrh	r2, [r7, #2]
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e267      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d075      	beq.n	800678a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800669e:	4b88      	ldr	r3, [pc, #544]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d00c      	beq.n	80066c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066aa:	4b85      	ldr	r3, [pc, #532]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d112      	bne.n	80066dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066b6:	4b82      	ldr	r3, [pc, #520]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c2:	d10b      	bne.n	80066dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c4:	4b7e      	ldr	r3, [pc, #504]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d05b      	beq.n	8006788 <HAL_RCC_OscConfig+0x108>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d157      	bne.n	8006788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e242      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d106      	bne.n	80066f4 <HAL_RCC_OscConfig+0x74>
 80066e6:	4b76      	ldr	r3, [pc, #472]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a75      	ldr	r2, [pc, #468]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80066ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e01d      	b.n	8006730 <HAL_RCC_OscConfig+0xb0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066fc:	d10c      	bne.n	8006718 <HAL_RCC_OscConfig+0x98>
 80066fe:	4b70      	ldr	r3, [pc, #448]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a6f      	ldr	r2, [pc, #444]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4b6d      	ldr	r3, [pc, #436]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a6c      	ldr	r2, [pc, #432]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e00b      	b.n	8006730 <HAL_RCC_OscConfig+0xb0>
 8006718:	4b69      	ldr	r3, [pc, #420]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a68      	ldr	r2, [pc, #416]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	4b66      	ldr	r3, [pc, #408]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a65      	ldr	r2, [pc, #404]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800672a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d013      	beq.n	8006760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fd f9c0 	bl	8003abc <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006740:	f7fd f9bc 	bl	8003abc <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	; 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e207      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b5b      	ldr	r3, [pc, #364]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCC_OscConfig+0xc0>
 800675e:	e014      	b.n	800678a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fd f9ac 	bl	8003abc <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006768:	f7fd f9a8 	bl	8003abc <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	; 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1f3      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677a:	4b51      	ldr	r3, [pc, #324]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f0      	bne.n	8006768 <HAL_RCC_OscConfig+0xe8>
 8006786:	e000      	b.n	800678a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d063      	beq.n	800685e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006796:	4b4a      	ldr	r3, [pc, #296]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a2:	4b47      	ldr	r3, [pc, #284]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d11c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ae:	4b44      	ldr	r3, [pc, #272]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d116      	bne.n	80067e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ba:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x152>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d001      	beq.n	80067d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e1c7      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d2:	4b3b      	ldr	r3, [pc, #236]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4937      	ldr	r1, [pc, #220]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e6:	e03a      	b.n	800685e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f0:	4b34      	ldr	r3, [pc, #208]	; (80068c4 <HAL_RCC_OscConfig+0x244>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fd f961 	bl	8003abc <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067fe:	f7fd f95d 	bl	8003abc <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e1a8      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006810:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4925      	ldr	r1, [pc, #148]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]
 8006830:	e015      	b.n	800685e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_RCC_OscConfig+0x244>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006838:	f7fd f940 	bl	8003abc <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006840:	f7fd f93c 	bl	8003abc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e187      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006852:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d036      	beq.n	80068d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d016      	beq.n	80068a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_RCC_OscConfig+0x248>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fd f920 	bl	8003abc <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006880:	f7fd f91c 	bl	8003abc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e167      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <HAL_RCC_OscConfig+0x240>)
 8006894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x200>
 800689e:	e01b      	b.n	80068d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a0:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <HAL_RCC_OscConfig+0x248>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a6:	f7fd f909 	bl	8003abc <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ac:	e00e      	b.n	80068cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ae:	f7fd f905 	bl	8003abc <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d907      	bls.n	80068cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e150      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
 80068c0:	40023800 	.word	0x40023800
 80068c4:	42470000 	.word	0x42470000
 80068c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068cc:	4b88      	ldr	r3, [pc, #544]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1ea      	bne.n	80068ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8097 	beq.w	8006a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ea:	4b81      	ldr	r3, [pc, #516]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10f      	bne.n	8006916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	4b7d      	ldr	r3, [pc, #500]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	4a7c      	ldr	r2, [pc, #496]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006904:	6413      	str	r3, [r2, #64]	; 0x40
 8006906:	4b7a      	ldr	r3, [pc, #488]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006912:	2301      	movs	r3, #1
 8006914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006916:	4b77      	ldr	r3, [pc, #476]	; (8006af4 <HAL_RCC_OscConfig+0x474>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d118      	bne.n	8006954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006922:	4b74      	ldr	r3, [pc, #464]	; (8006af4 <HAL_RCC_OscConfig+0x474>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a73      	ldr	r2, [pc, #460]	; (8006af4 <HAL_RCC_OscConfig+0x474>)
 8006928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800692e:	f7fd f8c5 	bl	8003abc <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006934:	e008      	b.n	8006948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006936:	f7fd f8c1 	bl	8003abc <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e10c      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006948:	4b6a      	ldr	r3, [pc, #424]	; (8006af4 <HAL_RCC_OscConfig+0x474>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0f0      	beq.n	8006936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d106      	bne.n	800696a <HAL_RCC_OscConfig+0x2ea>
 800695c:	4b64      	ldr	r3, [pc, #400]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006960:	4a63      	ldr	r2, [pc, #396]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	6713      	str	r3, [r2, #112]	; 0x70
 8006968:	e01c      	b.n	80069a4 <HAL_RCC_OscConfig+0x324>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b05      	cmp	r3, #5
 8006970:	d10c      	bne.n	800698c <HAL_RCC_OscConfig+0x30c>
 8006972:	4b5f      	ldr	r3, [pc, #380]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a5e      	ldr	r2, [pc, #376]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
 800697e:	4b5c      	ldr	r3, [pc, #368]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a5b      	ldr	r2, [pc, #364]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
 800698a:	e00b      	b.n	80069a4 <HAL_RCC_OscConfig+0x324>
 800698c:	4b58      	ldr	r3, [pc, #352]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	4a57      	ldr	r2, [pc, #348]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	6713      	str	r3, [r2, #112]	; 0x70
 8006998:	4b55      	ldr	r3, [pc, #340]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	4a54      	ldr	r2, [pc, #336]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 800699e:	f023 0304 	bic.w	r3, r3, #4
 80069a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d015      	beq.n	80069d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fd f886 	bl	8003abc <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b2:	e00a      	b.n	80069ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fd f882 	bl	8003abc <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e0cb      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ca:	4b49      	ldr	r3, [pc, #292]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0ee      	beq.n	80069b4 <HAL_RCC_OscConfig+0x334>
 80069d6:	e014      	b.n	8006a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d8:	f7fd f870 	bl	8003abc <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069de:	e00a      	b.n	80069f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069e0:	f7fd f86c 	bl	8003abc <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e0b5      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069f6:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1ee      	bne.n	80069e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d105      	bne.n	8006a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a08:	4b39      	ldr	r3, [pc, #228]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0c:	4a38      	ldr	r2, [pc, #224]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80a1 	beq.w	8006b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a1e:	4b34      	ldr	r3, [pc, #208]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 030c 	and.w	r3, r3, #12
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d05c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d141      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <HAL_RCC_OscConfig+0x478>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fd f840 	bl	8003abc <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fd f83c 	bl	8003abc <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e087      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a52:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	019b      	lsls	r3, r3, #6
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	085b      	lsrs	r3, r3, #1
 8006a76:	3b01      	subs	r3, #1
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	061b      	lsls	r3, r3, #24
 8006a82:	491b      	ldr	r1, [pc, #108]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <HAL_RCC_OscConfig+0x478>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8e:	f7fd f815 	bl	8003abc <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a96:	f7fd f811 	bl	8003abc <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e05c      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x416>
 8006ab4:	e054      	b.n	8006b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <HAL_RCC_OscConfig+0x478>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abc:	f7fc fffe 	bl	8003abc <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac4:	f7fc fffa 	bl	8003abc <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e045      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x444>
 8006ae2:	e03d      	b.n	8006b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e038      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40007000 	.word	0x40007000
 8006af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006afc:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_RCC_OscConfig+0x4ec>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d028      	beq.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d121      	bne.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d11a      	bne.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d111      	bne.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	3b01      	subs	r3, #1
 8006b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d107      	bne.n	8006b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d001      	beq.n	8006b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800

08006b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e0cc      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b84:	4b68      	ldr	r3, [pc, #416]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d90c      	bls.n	8006bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b92:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b63      	ldr	r3, [pc, #396]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d001      	beq.n	8006bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0b8      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d020      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bc4:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a52      	ldr	r2, [pc, #328]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be8:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	494d      	ldr	r1, [pc, #308]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d044      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c0e:	4b47      	ldr	r3, [pc, #284]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d119      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e07f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d003      	beq.n	8006c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d107      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2e:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e06f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e067      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c4e:	4b37      	ldr	r3, [pc, #220]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f023 0203 	bic.w	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	4934      	ldr	r1, [pc, #208]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c60:	f7fc ff2c 	bl	8003abc <HAL_GetTick>
 8006c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c66:	e00a      	b.n	8006c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c68:	f7fc ff28 	bl	8003abc <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e04f      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c7e:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f003 020c 	and.w	r2, r3, #12
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d1eb      	bne.n	8006c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d20c      	bcs.n	8006cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 030f 	and.w	r3, r3, #15
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e032      	b.n	8006d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc4:	4b19      	ldr	r3, [pc, #100]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4916      	ldr	r1, [pc, #88]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ce2:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	490e      	ldr	r1, [pc, #56]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cf6:	f000 f821 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	490a      	ldr	r1, [pc, #40]	; (8006d30 <HAL_RCC_ClockConfig+0x1c0>)
 8006d08:	5ccb      	ldrb	r3, [r1, r3]
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <HAL_RCC_ClockConfig+0x1c4>)
 8006d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d12:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <HAL_RCC_ClockConfig+0x1c8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fa fe34 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	40023c00 	.word	0x40023c00
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	08012e24 	.word	0x08012e24
 8006d34:	20000090 	.word	0x20000090
 8006d38:	20000118 	.word	0x20000118

08006d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d40:	b094      	sub	sp, #80	; 0x50
 8006d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	2300      	movs	r3, #0
 8006d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d54:	4b79      	ldr	r3, [pc, #484]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 030c 	and.w	r3, r3, #12
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d00d      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0x40>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	f200 80e1 	bhi.w	8006f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x34>
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d6e:	e0db      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d70:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d74:	e0db      	b.n	8006f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d76:	4b73      	ldr	r3, [pc, #460]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d7a:	e0d8      	b.n	8006f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d86:	4b6d      	ldr	r3, [pc, #436]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d063      	beq.n	8006e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d92:	4b6a      	ldr	r3, [pc, #424]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	2200      	movs	r2, #0
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30
 8006da6:	2300      	movs	r3, #0
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006dae:	4622      	mov	r2, r4
 8006db0:	462b      	mov	r3, r5
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f04f 0100 	mov.w	r1, #0
 8006dba:	0159      	lsls	r1, r3, #5
 8006dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dc0:	0150      	lsls	r0, r2, #5
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	1a51      	subs	r1, r2, r1
 8006dca:	6139      	str	r1, [r7, #16]
 8006dcc:	4629      	mov	r1, r5
 8006dce:	eb63 0301 	sbc.w	r3, r3, r1
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006de0:	4659      	mov	r1, fp
 8006de2:	018b      	lsls	r3, r1, #6
 8006de4:	4651      	mov	r1, sl
 8006de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dea:	4651      	mov	r1, sl
 8006dec:	018a      	lsls	r2, r1, #6
 8006dee:	4651      	mov	r1, sl
 8006df0:	ebb2 0801 	subs.w	r8, r2, r1
 8006df4:	4659      	mov	r1, fp
 8006df6:	eb63 0901 	sbc.w	r9, r3, r1
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e0e:	4690      	mov	r8, r2
 8006e10:	4699      	mov	r9, r3
 8006e12:	4623      	mov	r3, r4
 8006e14:	eb18 0303 	adds.w	r3, r8, r3
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	eb49 0303 	adc.w	r3, r9, r3
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e2e:	4629      	mov	r1, r5
 8006e30:	024b      	lsls	r3, r1, #9
 8006e32:	4621      	mov	r1, r4
 8006e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e38:	4621      	mov	r1, r4
 8006e3a:	024a      	lsls	r2, r1, #9
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	2200      	movs	r2, #0
 8006e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e4c:	f7f9 ff2c 	bl	8000ca8 <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4613      	mov	r3, r2
 8006e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e58:	e058      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e5a:	4b38      	ldr	r3, [pc, #224]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	099b      	lsrs	r3, r3, #6
 8006e60:	2200      	movs	r2, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	4611      	mov	r1, r2
 8006e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e6a:	623b      	str	r3, [r7, #32]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	f04f 0000 	mov.w	r0, #0
 8006e7c:	f04f 0100 	mov.w	r1, #0
 8006e80:	0159      	lsls	r1, r3, #5
 8006e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e86:	0150      	lsls	r0, r2, #5
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e92:	4649      	mov	r1, r9
 8006e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006eac:	ebb2 040a 	subs.w	r4, r2, sl
 8006eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	00eb      	lsls	r3, r5, #3
 8006ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec2:	00e2      	lsls	r2, r4, #3
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	4643      	mov	r3, r8
 8006eca:	18e3      	adds	r3, r4, r3
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	464b      	mov	r3, r9
 8006ed0:	eb45 0303 	adc.w	r3, r5, r3
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	f04f 0200 	mov.w	r2, #0
 8006eda:	f04f 0300 	mov.w	r3, #0
 8006ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	028b      	lsls	r3, r1, #10
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eec:	4621      	mov	r1, r4
 8006eee:	028a      	lsls	r2, r1, #10
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	61fa      	str	r2, [r7, #28]
 8006efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f00:	f7f9 fed2 	bl	8000ca8 <__aeabi_uldivmod>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4613      	mov	r3, r2
 8006f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	3301      	adds	r3, #1
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f26:	e002      	b.n	8006f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3750      	adds	r7, #80	; 0x50
 8006f34:	46bd      	mov	sp, r7
 8006f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	007a1200 	.word	0x007a1200

08006f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000090 	.word	0x20000090

08006f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f64:	f7ff fff0 	bl	8006f48 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	0a9b      	lsrs	r3, r3, #10
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4903      	ldr	r1, [pc, #12]	; (8006f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40023800 	.word	0x40023800
 8006f84:	08012e34 	.word	0x08012e34

08006f88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	220f      	movs	r2, #15
 8006f96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f98:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0203 	and.w	r2, r3, #3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fbc:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <HAL_RCC_GetClockConfig+0x5c>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	08db      	lsrs	r3, r3, #3
 8006fc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <HAL_RCC_GetClockConfig+0x60>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40023c00 	.word	0x40023c00

08006fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10b      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800701c:	2b00      	cmp	r3, #0
 800701e:	d075      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007020:	4b91      	ldr	r3, [pc, #580]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fc fd49 	bl	8003abc <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800702c:	e008      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800702e:	f7fc fd45 	bl	8003abc <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e189      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007040:	4b8a      	ldr	r3, [pc, #552]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	019a      	lsls	r2, r3, #6
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	071b      	lsls	r3, r3, #28
 8007064:	4981      	ldr	r1, [pc, #516]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007078:	4b7c      	ldr	r3, [pc, #496]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	019a      	lsls	r2, r3, #6
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	431a      	orrs	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	071b      	lsls	r3, r3, #28
 8007098:	4974      	ldr	r1, [pc, #464]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070a0:	4b72      	ldr	r3, [pc, #456]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a6:	f023 021f 	bic.w	r2, r3, #31
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	496e      	ldr	r1, [pc, #440]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	019a      	lsls	r2, r3, #6
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	061b      	lsls	r3, r3, #24
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	071b      	lsls	r3, r3, #28
 80070d8:	4964      	ldr	r1, [pc, #400]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80070e0:	4b61      	ldr	r3, [pc, #388]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070e2:	2201      	movs	r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e6:	f7fc fce9 	bl	8003abc <HAL_GetTick>
 80070ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070ec:	e008      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070ee:	f7fc fce5 	bl	8003abc <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d901      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e129      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007100:	4b5a      	ldr	r3, [pc, #360]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0f0      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d079      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007124:	4b52      	ldr	r3, [pc, #328]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fc fcc7 	bl	8003abc <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007132:	f7fc fcc3 	bl	8003abc <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e107      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007144:	4b49      	ldr	r3, [pc, #292]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007150:	d0ef      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b00      	cmp	r3, #0
 800715c:	d020      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800715e:	4b43      	ldr	r3, [pc, #268]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007164:	0f1b      	lsrs	r3, r3, #28
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	019a      	lsls	r2, r3, #6
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	061b      	lsls	r3, r3, #24
 8007178:	431a      	orrs	r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	071b      	lsls	r3, r3, #28
 800717e:	493b      	ldr	r1, [pc, #236]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800718c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	3b01      	subs	r3, #1
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4934      	ldr	r1, [pc, #208]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01e      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b2:	0e1b      	lsrs	r3, r3, #24
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	019a      	lsls	r2, r3, #6
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	071b      	lsls	r3, r3, #28
 80071cc:	4927      	ldr	r1, [pc, #156]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071d4:	4b25      	ldr	r3, [pc, #148]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	4922      	ldr	r1, [pc, #136]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071ea:	4b21      	ldr	r3, [pc, #132]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f0:	f7fc fc64 	bl	8003abc <HAL_GetTick>
 80071f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071f8:	f7fc fc60 	bl	8003abc <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0a4      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800720a:	4b18      	ldr	r3, [pc, #96]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007216:	d1ef      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 808b 	beq.w	800733c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	4b10      	ldr	r3, [pc, #64]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	4a0f      	ldr	r2, [pc, #60]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	; 0x40
 8007236:	4b0d      	ldr	r3, [pc, #52]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007242:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a0b      	ldr	r2, [pc, #44]	; (8007274 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800724e:	f7fc fc35 	bl	8003abc <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007254:	e010      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007256:	f7fc fc31 	bl	8003abc <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d909      	bls.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e075      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007268:	42470068 	.word	0x42470068
 800726c:	40023800 	.word	0x40023800
 8007270:	42470070 	.word	0x42470070
 8007274:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007278:	4b38      	ldr	r3, [pc, #224]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0e8      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007284:	4b36      	ldr	r3, [pc, #216]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02f      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d028      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072ac:	4b2d      	ldr	r3, [pc, #180]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072b2:	4b2c      	ldr	r3, [pc, #176]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072b8:	4a29      	ldr	r2, [pc, #164]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072be:	4b28      	ldr	r3, [pc, #160]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d114      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072ca:	f7fc fbf7 	bl	8003abc <HAL_GetTick>
 80072ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fc fbf3 	bl	8003abc <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e035      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ee      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007300:	d10d      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	4912      	ldr	r1, [pc, #72]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007318:	4313      	orrs	r3, r2
 800731a:	608b      	str	r3, [r1, #8]
 800731c:	e005      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007324:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007328:	6093      	str	r3, [r2, #8]
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800732c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007336:	490a      	ldr	r1, [pc, #40]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007338:	4313      	orrs	r3, r2
 800733a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007350:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40007000 	.word	0x40007000
 8007360:	40023800 	.word	0x40023800
 8007364:	42470e40 	.word	0x42470e40
 8007368:	424711e0 	.word	0x424711e0

0800736c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e025      	b.n	80073cc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f81d 	bl	80073d4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f001 fa23 	bl	80087f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	f001 fa78 	bl	80088b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d101      	bne.n	8007406 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007402:	2302      	movs	r3, #2
 8007404:	e021      	b.n	800744a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d002      	beq.n	8007412 <HAL_SDRAM_SendCommand+0x2a>
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	2b05      	cmp	r3, #5
 8007410:	d118      	bne.n	8007444 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	4618      	mov	r0, r3
 8007424:	f001 faae 	bl	8008984 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b02      	cmp	r3, #2
 800742e:	d104      	bne.n	800743a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2205      	movs	r2, #5
 8007434:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007438:	e006      	b.n	8007448 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007442:	e001      	b.n	8007448 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d101      	bne.n	800746c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007468:	2302      	movs	r3, #2
 800746a:	e016      	b.n	800749a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d10f      	bne.n	8007498 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f001 fab9 	bl	80089fe <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	e000      	b.n	800749a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b082      	sub	sp, #8
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e07b      	b.n	80075ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d108      	bne.n	80074ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c4:	d009      	beq.n	80074da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	61da      	str	r2, [r3, #28]
 80074cc:	e005      	b.n	80074da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fa f9d3 	bl	80018a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007510:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007554:	431a      	orrs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755e:	ea42 0103 	orr.w	r1, r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	0c1b      	lsrs	r3, r3, #16
 8007578:	f003 0104 	and.w	r1, r3, #4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	f003 0210 	and.w	r2, r3, #16
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800759a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e01a      	b.n	80075fc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fa f9ae 	bl	8001940 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b088      	sub	sp, #32
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4613      	mov	r3, r2
 8007612:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800761e:	2b01      	cmp	r3, #1
 8007620:	d101      	bne.n	8007626 <HAL_SPI_Transmit+0x22>
 8007622:	2302      	movs	r3, #2
 8007624:	e126      	b.n	8007874 <HAL_SPI_Transmit+0x270>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762e:	f7fc fa45 	bl	8003abc <HAL_GetTick>
 8007632:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b01      	cmp	r3, #1
 8007642:	d002      	beq.n	800764a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007644:	2302      	movs	r3, #2
 8007646:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007648:	e10b      	b.n	8007862 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_Transmit+0x52>
 8007650:	88fb      	ldrh	r3, [r7, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800765a:	e102      	b.n	8007862 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2203      	movs	r2, #3
 8007660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	88fa      	ldrh	r2, [r7, #6]
 800767a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a2:	d10f      	bne.n	80076c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d007      	beq.n	80076e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ea:	d14b      	bne.n	8007784 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <HAL_SPI_Transmit+0xf6>
 80076f4:	8afb      	ldrh	r3, [r7, #22]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d13e      	bne.n	8007778 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	881a      	ldrh	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	1c9a      	adds	r2, r3, #2
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800771e:	e02b      	b.n	8007778 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d112      	bne.n	8007754 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	881a      	ldrh	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	1c9a      	adds	r2, r3, #2
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	86da      	strh	r2, [r3, #54]	; 0x36
 8007752:	e011      	b.n	8007778 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007754:	f7fc f9b2 	bl	8003abc <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d803      	bhi.n	800776c <HAL_SPI_Transmit+0x168>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d102      	bne.n	8007772 <HAL_SPI_Transmit+0x16e>
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007776:	e074      	b.n	8007862 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777c:	b29b      	uxth	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1ce      	bne.n	8007720 <HAL_SPI_Transmit+0x11c>
 8007782:	e04c      	b.n	800781e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <HAL_SPI_Transmit+0x18e>
 800778c:	8afb      	ldrh	r3, [r7, #22]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d140      	bne.n	8007814 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	330c      	adds	r3, #12
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077b8:	e02c      	b.n	8007814 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d113      	bne.n	80077f0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	330c      	adds	r3, #12
 80077d2:	7812      	ldrb	r2, [r2, #0]
 80077d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80077ee:	e011      	b.n	8007814 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077f0:	f7fc f964 	bl	8003abc <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d803      	bhi.n	8007808 <HAL_SPI_Transmit+0x204>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007806:	d102      	bne.n	800780e <HAL_SPI_Transmit+0x20a>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007812:	e026      	b.n	8007862 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1cd      	bne.n	80077ba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fcf8 	bl	8008218 <SPI_EndRxTxTransaction>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2220      	movs	r2, #32
 8007832:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e000      	b.n	8007862 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007860:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007872:	7ffb      	ldrb	r3, [r7, #31]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007898:	d112      	bne.n	80078c0 <HAL_SPI_Receive+0x44>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10e      	bne.n	80078c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2204      	movs	r2, #4
 80078a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	68b9      	ldr	r1, [r7, #8]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f8f1 	bl	8007a9e <HAL_SPI_TransmitReceive>
 80078bc:	4603      	mov	r3, r0
 80078be:	e0ea      	b.n	8007a96 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_SPI_Receive+0x52>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e0e3      	b.n	8007a96 <HAL_SPI_Receive+0x21a>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078d6:	f7fc f8f1 	bl	8003abc <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d002      	beq.n	80078ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80078e8:	2302      	movs	r3, #2
 80078ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078ec:	e0ca      	b.n	8007a84 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SPI_Receive+0x7e>
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d102      	bne.n	8007900 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80078fe:	e0c1      	b.n	8007a84 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2204      	movs	r2, #4
 8007904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	88fa      	ldrh	r2, [r7, #6]
 800791e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007946:	d10f      	bne.n	8007968 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007956:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007966:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d007      	beq.n	8007986 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007984:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d162      	bne.n	8007a54 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800798e:	e02e      	b.n	80079ee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d115      	bne.n	80079ca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f103 020c 	add.w	r2, r3, #12
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	b2d2      	uxtb	r2, r2
 80079ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80079c8:	e011      	b.n	80079ee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ca:	f7fc f877 	bl	8003abc <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d803      	bhi.n	80079e2 <HAL_SPI_Receive+0x166>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d102      	bne.n	80079e8 <HAL_SPI_Receive+0x16c>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079ec:	e04a      	b.n	8007a84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1cb      	bne.n	8007990 <HAL_SPI_Receive+0x114>
 80079f8:	e031      	b.n	8007a5e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d113      	bne.n	8007a30 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	b292      	uxth	r2, r2
 8007a14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a2e:	e011      	b.n	8007a54 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a30:	f7fc f844 	bl	8003abc <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d803      	bhi.n	8007a48 <HAL_SPI_Receive+0x1cc>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d102      	bne.n	8007a4e <HAL_SPI_Receive+0x1d2>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d102      	bne.n	8007a54 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a52:	e017      	b.n	8007a84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1cd      	bne.n	80079fa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fb72 	bl	800814c <SPI_EndRxTransaction>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
 8007a80:	e000      	b.n	8007a84 <HAL_SPI_Receive+0x208>
  }

error :
 8007a82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3718      	adds	r7, #24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b08c      	sub	sp, #48	; 0x30
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007aac:	2301      	movs	r3, #1
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x26>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e18a      	b.n	8007dda <HAL_SPI_TransmitReceive+0x33c>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007acc:	f7fb fff6 	bl	8003abc <HAL_GetTick>
 8007ad0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d00f      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x70>
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af4:	d107      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x68>
 8007afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d003      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b06:	2302      	movs	r3, #2
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b0c:	e15b      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x82>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x82>
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b26:	e14e      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d003      	beq.n	8007b3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2205      	movs	r2, #5
 8007b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	887a      	ldrh	r2, [r7, #2]
 8007b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	887a      	ldrh	r2, [r7, #2]
 8007b52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	887a      	ldrh	r2, [r7, #2]
 8007b5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	887a      	ldrh	r2, [r7, #2]
 8007b64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7c:	2b40      	cmp	r3, #64	; 0x40
 8007b7e:	d007      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b98:	d178      	bne.n	8007c8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x10a>
 8007ba2:	8b7b      	ldrh	r3, [r7, #26]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d166      	bne.n	8007c76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bac:	881a      	ldrh	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb8:	1c9a      	adds	r2, r3, #2
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bcc:	e053      	b.n	8007c76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d11b      	bne.n	8007c14 <HAL_SPI_TransmitReceive+0x176>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <HAL_SPI_TransmitReceive+0x176>
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d113      	bne.n	8007c14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf0:	881a      	ldrh	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	1c9a      	adds	r2, r3, #2
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d119      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0x1b8>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d014      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	b292      	uxth	r2, r2
 8007c38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c52:	2301      	movs	r3, #1
 8007c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c56:	f7fb ff31 	bl	8003abc <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d807      	bhi.n	8007c76 <HAL_SPI_TransmitReceive+0x1d8>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6c:	d003      	beq.n	8007c76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c74:	e0a7      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1a6      	bne.n	8007bce <HAL_SPI_TransmitReceive+0x130>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1a1      	bne.n	8007bce <HAL_SPI_TransmitReceive+0x130>
 8007c8a:	e07c      	b.n	8007d86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d002      	beq.n	8007c9a <HAL_SPI_TransmitReceive+0x1fc>
 8007c94:	8b7b      	ldrh	r3, [r7, #26]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d16b      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	7812      	ldrb	r2, [r2, #0]
 8007ca6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc0:	e057      	b.n	8007d72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d11c      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x26c>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d017      	beq.n	8007d0a <HAL_SPI_TransmitReceive+0x26c>
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d114      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d119      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x2ae>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d014      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d4c:	f7fb feb6 	bl	8003abc <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d803      	bhi.n	8007d64 <HAL_SPI_TransmitReceive+0x2c6>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d102      	bne.n	8007d6a <HAL_SPI_TransmitReceive+0x2cc>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d70:	e029      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1a2      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x224>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d19d      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fa44 	bl	8008218 <SPI_EndRxTxTransaction>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d006      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007da2:	e010      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	e000      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007dc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3730      	adds	r7, #48	; 0x30
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	099b      	lsrs	r3, r3, #6
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	099b      	lsrs	r3, r3, #6
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
    return;
 8007e26:	e0d7      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x66>
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	09db      	lsrs	r3, r3, #7
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	4798      	blx	r3
    return;
 8007e48:	e0c6      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10c      	bne.n	8007e70 <HAL_SPI_IRQHandler+0x8c>
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	099b      	lsrs	r3, r3, #6
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	0a1b      	lsrs	r3, r3, #8
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 80b4 	beq.w	8007fd8 <HAL_SPI_IRQHandler+0x1f4>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80ad 	beq.w	8007fd8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	099b      	lsrs	r3, r3, #6
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d023      	beq.n	8007ed2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d011      	beq.n	8007eba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	f043 0204 	orr.w	r2, r3, #4
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	e00b      	b.n	8007ed2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	613b      	str	r3, [r7, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	693b      	ldr	r3, [r7, #16]
        return;
 8007ed0:	e082      	b.n	8007fd8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d014      	beq.n	8007f08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f043 0201 	orr.w	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	60fb      	str	r3, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	0a1b      	lsrs	r3, r3, #8
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00c      	beq.n	8007f2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	f043 0208 	orr.w	r2, r3, #8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f20:	2300      	movs	r3, #0
 8007f22:	60bb      	str	r3, [r7, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d04f      	beq.n	8007fd6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <HAL_SPI_IRQHandler+0x17e>
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d034      	beq.n	8007fcc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0203 	bic.w	r2, r2, #3
 8007f70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d011      	beq.n	8007f9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7e:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <HAL_SPI_IRQHandler+0x1fc>)
 8007f80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fb ffe8 	bl	8003f5c <HAL_DMA_Abort_IT>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d016      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007faa:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <HAL_SPI_IRQHandler+0x1fc>)
 8007fac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fb ffd2 	bl	8003f5c <HAL_DMA_Abort_IT>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007fca:	e003      	b.n	8007fd4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f809 	bl	8007fe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007fd2:	e000      	b.n	8007fd6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007fd4:	bf00      	nop
    return;
 8007fd6:	bf00      	nop
  }
}
 8007fd8:	3720      	adds	r7, #32
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	08008015 	.word	0x08008015

08007fe4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008006:	b2db      	uxtb	r3, r3
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff ffd8 	bl	8007fe4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008034:	bf00      	nop
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	4613      	mov	r3, r2
 800804a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800804c:	f7fb fd36 	bl	8003abc <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4413      	add	r3, r2
 800805a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800805c:	f7fb fd2e 	bl	8003abc <HAL_GetTick>
 8008060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008062:	4b39      	ldr	r3, [pc, #228]	; (8008148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	015b      	lsls	r3, r3, #5
 8008068:	0d1b      	lsrs	r3, r3, #20
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008072:	e054      	b.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d050      	beq.n	800811e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800807c:	f7fb fd1e 	bl	8003abc <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	429a      	cmp	r2, r3
 800808a:	d902      	bls.n	8008092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d13d      	bne.n	800810e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080aa:	d111      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b4:	d004      	beq.n	80080c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080be:	d107      	bne.n	80080d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d8:	d10f      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e017      	b.n	800813e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	3b01      	subs	r3, #1
 800811c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d19b      	bne.n	8008074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3720      	adds	r7, #32
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20000090 	.word	0x20000090

0800814c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008160:	d111      	bne.n	8008186 <SPI_EndRxTransaction+0x3a>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816a:	d004      	beq.n	8008176 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008174:	d107      	bne.n	8008186 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008184:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818e:	d12a      	bne.n	80081e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008198:	d012      	beq.n	80081c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ff49 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02d      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e026      	b.n	800820e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	2101      	movs	r1, #1
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f7ff ff36 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d01a      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e013      	b.n	800820e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2200      	movs	r2, #0
 80081ee:	2101      	movs	r1, #1
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff ff23 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008200:	f043 0220 	orr.w	r2, r3, #32
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e000      	b.n	800820e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <SPI_EndRxTxTransaction+0x7c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1b      	ldr	r2, [pc, #108]	; (8008298 <SPI_EndRxTxTransaction+0x80>)
 800822a:	fba2 2303 	umull	r2, r3, r2, r3
 800822e:	0d5b      	lsrs	r3, r3, #21
 8008230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008242:	d112      	bne.n	800826a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	2180      	movs	r1, #128	; 0x80
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff fef4 	bl	800803c <SPI_WaitFlagStateUntilTimeout>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f043 0220 	orr.w	r2, r3, #32
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e00f      	b.n	800828a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	3b01      	subs	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008280:	2b80      	cmp	r3, #128	; 0x80
 8008282:	d0f2      	beq.n	800826a <SPI_EndRxTxTransaction+0x52>
 8008284:	e000      	b.n	8008288 <SPI_EndRxTxTransaction+0x70>
        break;
 8008286:	bf00      	nop
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000090 	.word	0x20000090
 8008298:	165e9f81 	.word	0x165e9f81

0800829c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e041      	b.n	8008332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f839 	bl	800833a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2202      	movs	r2, #2
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f000 f9d8 	bl	8008690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
	...

08008350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	d001      	beq.n	8008368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e04e      	b.n	8008406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a23      	ldr	r2, [pc, #140]	; (8008414 <HAL_TIM_Base_Start_IT+0xc4>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d022      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008392:	d01d      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <HAL_TIM_Base_Start_IT+0xc8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d018      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1e      	ldr	r2, [pc, #120]	; (800841c <HAL_TIM_Base_Start_IT+0xcc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d013      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1c      	ldr	r2, [pc, #112]	; (8008420 <HAL_TIM_Base_Start_IT+0xd0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00e      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a1b      	ldr	r2, [pc, #108]	; (8008424 <HAL_TIM_Base_Start_IT+0xd4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d009      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a19      	ldr	r2, [pc, #100]	; (8008428 <HAL_TIM_Base_Start_IT+0xd8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <HAL_TIM_Base_Start_IT+0x80>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a18      	ldr	r2, [pc, #96]	; (800842c <HAL_TIM_Base_Start_IT+0xdc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d111      	bne.n	80083f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d010      	beq.n	8008404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0201 	orr.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	e007      	b.n	8008404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0201 	orr.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40010000 	.word	0x40010000
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40010400 	.word	0x40010400
 8008428:	40014000 	.word	0x40014000
 800842c:	40001800 	.word	0x40001800

08008430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b02      	cmp	r3, #2
 8008444:	d122      	bne.n	800848c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b02      	cmp	r3, #2
 8008452:	d11b      	bne.n	800848c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f06f 0202 	mvn.w	r2, #2
 800845c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8ee 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008478:	e005      	b.n	8008486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8e0 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 f8f1 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b04      	cmp	r3, #4
 8008498:	d122      	bne.n	80084e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d11b      	bne.n	80084e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0204 	mvn.w	r2, #4
 80084b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8c4 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 80084cc:	e005      	b.n	80084da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f8b6 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f8c7 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d122      	bne.n	8008534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f003 0308 	and.w	r3, r3, #8
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d11b      	bne.n	8008534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f06f 0208 	mvn.w	r2, #8
 8008504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f89a 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008520:	e005      	b.n	800852e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f88c 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f89d 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b10      	cmp	r3, #16
 8008540:	d122      	bne.n	8008588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b10      	cmp	r3, #16
 800854e:	d11b      	bne.n	8008588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0210 	mvn.w	r2, #16
 8008558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2208      	movs	r2, #8
 800855e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f870 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008574:	e005      	b.n	8008582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f862 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f873 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b01      	cmp	r3, #1
 8008594:	d10e      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d107      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0201 	mvn.w	r2, #1
 80085ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7f9 f932 	bl	8001818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085be:	2b80      	cmp	r3, #128	; 0x80
 80085c0:	d10e      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085cc:	2b80      	cmp	r3, #128	; 0x80
 80085ce:	d107      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f902 	bl	80087e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d10e      	bne.n	800860c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	d107      	bne.n	800860c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f838 	bl	800867c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b20      	cmp	r3, #32
 8008618:	d10e      	bne.n	8008638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b20      	cmp	r3, #32
 8008626:	d107      	bne.n	8008638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0220 	mvn.w	r2, #32
 8008630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f8cc 	bl	80087d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d00f      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3d      	ldr	r2, [pc, #244]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00b      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3b      	ldr	r2, [pc, #236]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3a      	ldr	r2, [pc, #232]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d108      	bne.n	80086e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2f      	ldr	r2, [pc, #188]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d02b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d027      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d023      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d017      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <TIM_Base_SetConfig+0x128>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a27      	ldr	r2, [pc, #156]	; (80087bc <TIM_Base_SetConfig+0x12c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <TIM_Base_SetConfig+0x130>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <TIM_Base_SetConfig+0x134>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d007      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <TIM_Base_SetConfig+0x138>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a23      	ldr	r2, [pc, #140]	; (80087cc <TIM_Base_SetConfig+0x13c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d108      	bne.n	8008754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800
 80087c4:	40001800 	.word	0x40001800
 80087c8:	40001c00 	.word	0x40001c00
 80087cc:	40002000 	.word	0x40002000

080087d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d123      	bne.n	8008852 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	6851      	ldr	r1, [r2, #4]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	6892      	ldr	r2, [r2, #8]
 800881e:	4311      	orrs	r1, r2
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	68d2      	ldr	r2, [r2, #12]
 8008824:	4311      	orrs	r1, r2
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	6912      	ldr	r2, [r2, #16]
 800882a:	4311      	orrs	r1, r2
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	6952      	ldr	r2, [r2, #20]
 8008830:	4311      	orrs	r1, r2
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	6992      	ldr	r2, [r2, #24]
 8008836:	4311      	orrs	r1, r2
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	69d2      	ldr	r2, [r2, #28]
 800883c:	4311      	orrs	r1, r2
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	6a12      	ldr	r2, [r2, #32]
 8008842:	4311      	orrs	r1, r2
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008848:	430a      	orrs	r2, r1
 800884a:	431a      	orrs	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	e028      	b.n	80088a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	69d9      	ldr	r1, [r3, #28]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	4319      	orrs	r1, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	430b      	orrs	r3, r1
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	6851      	ldr	r1, [r2, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	6892      	ldr	r2, [r2, #8]
 8008884:	4311      	orrs	r1, r2
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	68d2      	ldr	r2, [r2, #12]
 800888a:	4311      	orrs	r1, r2
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	6912      	ldr	r2, [r2, #16]
 8008890:	4311      	orrs	r1, r2
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	6952      	ldr	r2, [r2, #20]
 8008896:	4311      	orrs	r1, r2
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	6992      	ldr	r2, [r2, #24]
 800889c:	430a      	orrs	r2, r1
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d128      	bne.n	8008916 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	1e59      	subs	r1, r3, #1
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	4319      	orrs	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	4319      	orrs	r1, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	4319      	orrs	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	4319      	orrs	r1, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	3b01      	subs	r3, #1
 8008900:	051b      	lsls	r3, r3, #20
 8008902:	4319      	orrs	r1, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	3b01      	subs	r3, #1
 800890a:	061b      	lsls	r3, r3, #24
 800890c:	430b      	orrs	r3, r1
 800890e:	431a      	orrs	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	e02f      	b.n	8008976 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800891e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	68d2      	ldr	r2, [r2, #12]
 8008926:	3a01      	subs	r2, #1
 8008928:	0311      	lsls	r1, r2, #12
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	6952      	ldr	r2, [r2, #20]
 800892e:	3a01      	subs	r2, #1
 8008930:	0512      	lsls	r2, r2, #20
 8008932:	430a      	orrs	r2, r1
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	1e59      	subs	r1, r3, #1
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	3b01      	subs	r3, #1
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	4319      	orrs	r1, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	3b01      	subs	r3, #1
 8008958:	021b      	lsls	r3, r3, #8
 800895a:	4319      	orrs	r1, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	3b01      	subs	r3, #1
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	4319      	orrs	r1, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	3b01      	subs	r3, #1
 800896c:	061b      	lsls	r3, r3, #24
 800896e:	430b      	orrs	r3, r1
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	0d9b      	lsrs	r3, r3, #22
 800899a:	059b      	lsls	r3, r3, #22
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	6811      	ldr	r1, [r2, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	6852      	ldr	r2, [r2, #4]
 80089a4:	4311      	orrs	r1, r2
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	6892      	ldr	r2, [r2, #8]
 80089aa:	3a01      	subs	r2, #1
 80089ac:	0152      	lsls	r2, r2, #5
 80089ae:	4311      	orrs	r1, r2
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	68d2      	ldr	r2, [r2, #12]
 80089b4:	0252      	lsls	r2, r2, #9
 80089b6:	430a      	orrs	r2, r1
 80089b8:	431a      	orrs	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80089be:	f7fb f87d 	bl	8003abc <HAL_GetTick>
 80089c2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80089c4:	e010      	b.n	80089e8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089cc:	d00c      	beq.n	80089e8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d007      	beq.n	80089e4 <FMC_SDRAM_SendCommand+0x60>
 80089d4:	f7fb f872 	bl	8003abc <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d201      	bcs.n	80089e8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e006      	b.n	80089f6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d0e8      	beq.n	80089c6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a10:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	0052      	lsls	r2, r2, #1
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	f107 001c 	add.w	r0, r7, #28
 8008a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d122      	bne.n	8008a8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d105      	bne.n	8008a7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fbee 	bl	800a260 <USB_CoreReset>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
 8008a88:	e01a      	b.n	8008ac0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f001 fbe2 	bl	800a260 <USB_CoreReset>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab2:	e005      	b.n	8008ac0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d10b      	bne.n	8008ade <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f043 0206 	orr.w	r2, r3, #6
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aea:	b004      	add	sp, #16
 8008aec:	4770      	bx	lr
	...

08008af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d165      	bne.n	8008bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	4a41      	ldr	r2, [pc, #260]	; (8008c0c <USB_SetTurnaroundTime+0x11c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d906      	bls.n	8008b1a <USB_SetTurnaroundTime+0x2a>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	4a40      	ldr	r2, [pc, #256]	; (8008c10 <USB_SetTurnaroundTime+0x120>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d202      	bcs.n	8008b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b14:	230f      	movs	r3, #15
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	e062      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4a3c      	ldr	r2, [pc, #240]	; (8008c10 <USB_SetTurnaroundTime+0x120>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d306      	bcc.n	8008b30 <USB_SetTurnaroundTime+0x40>
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a3b      	ldr	r2, [pc, #236]	; (8008c14 <USB_SetTurnaroundTime+0x124>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d202      	bcs.n	8008b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b2a:	230e      	movs	r3, #14
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	e057      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <USB_SetTurnaroundTime+0x124>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d306      	bcc.n	8008b46 <USB_SetTurnaroundTime+0x56>
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4a37      	ldr	r2, [pc, #220]	; (8008c18 <USB_SetTurnaroundTime+0x128>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d202      	bcs.n	8008b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b40:	230d      	movs	r3, #13
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e04c      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	4a33      	ldr	r2, [pc, #204]	; (8008c18 <USB_SetTurnaroundTime+0x128>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d306      	bcc.n	8008b5c <USB_SetTurnaroundTime+0x6c>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	4a32      	ldr	r2, [pc, #200]	; (8008c1c <USB_SetTurnaroundTime+0x12c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d802      	bhi.n	8008b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b56:	230c      	movs	r3, #12
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	e041      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	4a2f      	ldr	r2, [pc, #188]	; (8008c1c <USB_SetTurnaroundTime+0x12c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d906      	bls.n	8008b72 <USB_SetTurnaroundTime+0x82>
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	4a2e      	ldr	r2, [pc, #184]	; (8008c20 <USB_SetTurnaroundTime+0x130>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d802      	bhi.n	8008b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b6c:	230b      	movs	r3, #11
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e036      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	4a2a      	ldr	r2, [pc, #168]	; (8008c20 <USB_SetTurnaroundTime+0x130>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d906      	bls.n	8008b88 <USB_SetTurnaroundTime+0x98>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4a29      	ldr	r2, [pc, #164]	; (8008c24 <USB_SetTurnaroundTime+0x134>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d802      	bhi.n	8008b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b82:	230a      	movs	r3, #10
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e02b      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	4a26      	ldr	r2, [pc, #152]	; (8008c24 <USB_SetTurnaroundTime+0x134>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d906      	bls.n	8008b9e <USB_SetTurnaroundTime+0xae>
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4a25      	ldr	r2, [pc, #148]	; (8008c28 <USB_SetTurnaroundTime+0x138>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d202      	bcs.n	8008b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b98:	2309      	movs	r3, #9
 8008b9a:	617b      	str	r3, [r7, #20]
 8008b9c:	e020      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <USB_SetTurnaroundTime+0x138>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d306      	bcc.n	8008bb4 <USB_SetTurnaroundTime+0xc4>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <USB_SetTurnaroundTime+0x13c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d802      	bhi.n	8008bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bae:	2308      	movs	r3, #8
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e015      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	4a1d      	ldr	r2, [pc, #116]	; (8008c2c <USB_SetTurnaroundTime+0x13c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d906      	bls.n	8008bca <USB_SetTurnaroundTime+0xda>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4a1c      	ldr	r2, [pc, #112]	; (8008c30 <USB_SetTurnaroundTime+0x140>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d202      	bcs.n	8008bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bc4:	2307      	movs	r3, #7
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e00a      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bca:	2306      	movs	r3, #6
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e007      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bd6:	2309      	movs	r3, #9
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e001      	b.n	8008be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bdc:	2309      	movs	r3, #9
 8008bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	029b      	lsls	r3, r3, #10
 8008bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	00d8acbf 	.word	0x00d8acbf
 8008c10:	00e4e1c0 	.word	0x00e4e1c0
 8008c14:	00f42400 	.word	0x00f42400
 8008c18:	01067380 	.word	0x01067380
 8008c1c:	011a499f 	.word	0x011a499f
 8008c20:	01312cff 	.word	0x01312cff
 8008c24:	014ca43f 	.word	0x014ca43f
 8008c28:	016e3600 	.word	0x016e3600
 8008c2c:	01a6ab1f 	.word	0x01a6ab1f
 8008c30:	01e84800 	.word	0x01e84800

08008c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f043 0201 	orr.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f023 0201 	bic.w	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c94:	78fb      	ldrb	r3, [r7, #3]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d115      	bne.n	8008cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	f7fa ff14 	bl	8003ad4 <HAL_Delay>
      ms++;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f001 fa45 	bl	800a142 <USB_GetMode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d01e      	beq.n	8008cfc <USB_SetCurrentMode+0x84>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b31      	cmp	r3, #49	; 0x31
 8008cc2:	d9f0      	bls.n	8008ca6 <USB_SetCurrentMode+0x2e>
 8008cc4:	e01a      	b.n	8008cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d115      	bne.n	8008cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f7fa fefb 	bl	8003ad4 <HAL_Delay>
      ms++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 fa2c 	bl	800a142 <USB_GetMode>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <USB_SetCurrentMode+0x84>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b31      	cmp	r3, #49	; 0x31
 8008cf4:	d9f0      	bls.n	8008cd8 <USB_SetCurrentMode+0x60>
 8008cf6:	e001      	b.n	8008cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e005      	b.n	8008d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b32      	cmp	r3, #50	; 0x32
 8008d00:	d101      	bne.n	8008d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d10:	b084      	sub	sp, #16
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	e009      	b.n	8008d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3340      	adds	r3, #64	; 0x40
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	3301      	adds	r3, #1
 8008d42:	613b      	str	r3, [r7, #16]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	2b0e      	cmp	r3, #14
 8008d48:	d9f2      	bls.n	8008d30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d11c      	bne.n	8008d8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d5e:	f043 0302 	orr.w	r3, r3, #2
 8008d62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
 8008d88:	e00b      	b.n	8008da2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008da8:	461a      	mov	r2, r3
 8008daa:	2300      	movs	r3, #0
 8008dac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db4:	4619      	mov	r1, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	680b      	ldr	r3, [r1, #0]
 8008dc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d10c      	bne.n	8008de2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dce:	2100      	movs	r1, #0
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f965 	bl	80090a0 <USB_SetDevSpeed>
 8008dd6:	e008      	b.n	8008dea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008dd8:	2101      	movs	r1, #1
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f960 	bl	80090a0 <USB_SetDevSpeed>
 8008de0:	e003      	b.n	8008dea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008de2:	2103      	movs	r1, #3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f95b 	bl	80090a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dea:	2110      	movs	r1, #16
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f8f3 	bl	8008fd8 <USB_FlushTxFifo>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f91f 	bl	8009040 <USB_FlushRxFifo>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e12:	461a      	mov	r2, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	461a      	mov	r2, r3
 8008e20:	2300      	movs	r3, #0
 8008e22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e30:	2300      	movs	r3, #0
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	e043      	b.n	8008ebe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e4c:	d118      	bne.n	8008e80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e60:	461a      	mov	r2, r3
 8008e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	e013      	b.n	8008e92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e76:	461a      	mov	r2, r3
 8008e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e008      	b.n	8008e92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d3b7      	bcc.n	8008e36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	e043      	b.n	8008f54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ee2:	d118      	bne.n	8008f16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	e013      	b.n	8008f28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	e008      	b.n	8008f28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f22:	461a      	mov	r2, r3
 8008f24:	2300      	movs	r3, #0
 8008f26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f34:	461a      	mov	r2, r3
 8008f36:	2300      	movs	r3, #0
 8008f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f46:	461a      	mov	r2, r3
 8008f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	613b      	str	r3, [r7, #16]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d3b7      	bcc.n	8008ecc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f043 0210 	orr.w	r2, r3, #16
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699a      	ldr	r2, [r3, #24]
 8008f94:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <USB_DevInit+0x2c4>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	f043 0208 	orr.w	r2, r3, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d107      	bne.n	8008fc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fbc:	f043 0304 	orr.w	r3, r3, #4
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fd0:	b004      	add	sp, #16
 8008fd2:	4770      	bx	lr
 8008fd4:	803c3800 	.word	0x803c3800

08008fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a13      	ldr	r2, [pc, #76]	; (800903c <USB_FlushTxFifo+0x64>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d901      	bls.n	8008ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e01b      	b.n	8009030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	daf2      	bge.n	8008fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	019b      	lsls	r3, r3, #6
 8009008:	f043 0220 	orr.w	r2, r3, #32
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4a08      	ldr	r2, [pc, #32]	; (800903c <USB_FlushTxFifo+0x64>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d901      	bls.n	8009022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e006      	b.n	8009030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b20      	cmp	r3, #32
 800902c:	d0f0      	beq.n	8009010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	00030d40 	.word	0x00030d40

08009040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3301      	adds	r3, #1
 8009050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	4a11      	ldr	r2, [pc, #68]	; (800909c <USB_FlushRxFifo+0x5c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d901      	bls.n	800905e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e018      	b.n	8009090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	daf2      	bge.n	800904c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2210      	movs	r2, #16
 800906e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4a08      	ldr	r2, [pc, #32]	; (800909c <USB_FlushRxFifo+0x5c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d901      	bls.n	8009082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e006      	b.n	8009090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0310 	and.w	r3, r3, #16
 800908a:	2b10      	cmp	r3, #16
 800908c:	d0f0      	beq.n	8009070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	00030d40 	.word	0x00030d40

080090a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	78fb      	ldrb	r3, [r7, #3]
 80090ba:	68f9      	ldr	r1, [r7, #12]
 80090bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b087      	sub	sp, #28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f003 0306 	and.w	r3, r3, #6
 80090ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090f2:	2300      	movs	r3, #0
 80090f4:	75fb      	strb	r3, [r7, #23]
 80090f6:	e00a      	b.n	800910e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d002      	beq.n	8009104 <USB_GetDevSpeed+0x32>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b06      	cmp	r3, #6
 8009102:	d102      	bne.n	800910a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009104:	2302      	movs	r3, #2
 8009106:	75fb      	strb	r3, [r7, #23]
 8009108:	e001      	b.n	800910e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800910a:	230f      	movs	r3, #15
 800910c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800910e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009110:	4618      	mov	r0, r3
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d13a      	bne.n	80091ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800913e:	69da      	ldr	r2, [r3, #28]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	2101      	movs	r1, #1
 800914a:	fa01 f303 	lsl.w	r3, r1, r3
 800914e:	b29b      	uxth	r3, r3
 8009150:	68f9      	ldr	r1, [r7, #12]
 8009152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009156:	4313      	orrs	r3, r2
 8009158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d155      	bne.n	800921c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	791b      	ldrb	r3, [r3, #4]
 800918a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800918c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	059b      	lsls	r3, r3, #22
 8009192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009194:	4313      	orrs	r3, r2
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	68fa      	ldr	r2, [r7, #12]
 800919c:	440a      	add	r2, r1
 800919e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	e036      	b.n	800921c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b4:	69da      	ldr	r2, [r3, #28]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	2101      	movs	r1, #1
 80091c0:	fa01 f303 	lsl.w	r3, r1, r3
 80091c4:	041b      	lsls	r3, r3, #16
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d11a      	bne.n	800921c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	791b      	ldrb	r3, [r3, #4]
 8009200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009202:	430b      	orrs	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	440a      	add	r2, r1
 800920e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800921a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d161      	bne.n	800930c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800925a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800925e:	d11f      	bne.n	80092a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800927e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	0151      	lsls	r1, r2, #5
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	440a      	add	r2, r1
 8009296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800929e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	2101      	movs	r1, #1
 80092b2:	fa01 f303 	lsl.w	r3, r1, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	43db      	mvns	r3, r3
 80092ba:	68f9      	ldr	r1, [r7, #12]
 80092bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c0:	4013      	ands	r3, r2
 80092c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ca:	69da      	ldr	r2, [r3, #28]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	2101      	movs	r1, #1
 80092d6:	fa01 f303 	lsl.w	r3, r1, r3
 80092da:	b29b      	uxth	r3, r3
 80092dc:	43db      	mvns	r3, r3
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092e4:	4013      	ands	r3, r2
 80092e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	0159      	lsls	r1, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	440b      	add	r3, r1
 80092fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009302:	4619      	mov	r1, r3
 8009304:	4b35      	ldr	r3, [pc, #212]	; (80093dc <USB_DeactivateEndpoint+0x1b0>)
 8009306:	4013      	ands	r3, r2
 8009308:	600b      	str	r3, [r1, #0]
 800930a:	e060      	b.n	80093ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009322:	d11f      	bne.n	8009364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800935e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	43db      	mvns	r3, r3
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009384:	4013      	ands	r3, r2
 8009386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	2101      	movs	r1, #1
 800939a:	fa01 f303 	lsl.w	r3, r1, r3
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	43db      	mvns	r3, r3
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a8:	4013      	ands	r3, r2
 80093aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	0159      	lsls	r1, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	4619      	mov	r1, r3
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <USB_DeactivateEndpoint+0x1b4>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	ec337800 	.word	0xec337800
 80093e0:	eff37800 	.word	0xeff37800

080093e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	; 0x28
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b01      	cmp	r3, #1
 8009402:	f040 815c 	bne.w	80096be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d132      	bne.n	8009474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	0151      	lsls	r1, r2, #5
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	440a      	add	r2, r1
 8009424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800942c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800944c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800946c:	0cdb      	lsrs	r3, r3, #19
 800946e:	04db      	lsls	r3, r3, #19
 8009470:	6113      	str	r3, [r2, #16]
 8009472:	e074      	b.n	800955e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800948e:	0cdb      	lsrs	r3, r3, #19
 8009490:	04db      	lsls	r3, r3, #19
 8009492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	0151      	lsls	r1, r2, #5
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	440a      	add	r2, r1
 80094aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6999      	ldr	r1, [r3, #24]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	440b      	add	r3, r1
 80094d0:	1e59      	subs	r1, r3, #1
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094dc:	4b9d      	ldr	r3, [pc, #628]	; (8009754 <USB_EPStartXfer+0x370>)
 80094de:	400b      	ands	r3, r1
 80094e0:	69b9      	ldr	r1, [r7, #24]
 80094e2:	0148      	lsls	r0, r1, #5
 80094e4:	69f9      	ldr	r1, [r7, #28]
 80094e6:	4401      	add	r1, r0
 80094e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094ec:	4313      	orrs	r3, r2
 80094ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	691a      	ldr	r2, [r3, #16]
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009506:	69b9      	ldr	r1, [r7, #24]
 8009508:	0148      	lsls	r0, r1, #5
 800950a:	69f9      	ldr	r1, [r7, #28]
 800950c:	4401      	add	r1, r0
 800950e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009512:	4313      	orrs	r3, r2
 8009514:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	791b      	ldrb	r3, [r3, #4]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d11f      	bne.n	800955e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	4413      	add	r3, r2
 8009526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	69fa      	ldr	r2, [r7, #28]
 8009532:	440a      	add	r2, r1
 8009534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009538:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800953c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800955c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d14b      	bne.n	80095fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009578:	461a      	mov	r2, r3
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	695b      	ldr	r3, [r3, #20]
 800957e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	791b      	ldrb	r3, [r3, #4]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d128      	bne.n	80095da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009594:	2b00      	cmp	r3, #0
 8009596:	d110      	bne.n	80095ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e00f      	b.n	80095da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69ba      	ldr	r2, [r7, #24]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	69fa      	ldr	r2, [r7, #28]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	e133      	b.n	8009864 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	440a      	add	r2, r1
 8009612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800961a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	791b      	ldrb	r3, [r3, #4]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d015      	beq.n	8009650 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 811b 	beq.w	8009864 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	f003 030f 	and.w	r3, r3, #15
 800963e:	2101      	movs	r1, #1
 8009640:	fa01 f303 	lsl.w	r3, r1, r3
 8009644:	69f9      	ldr	r1, [r7, #28]
 8009646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800964a:	4313      	orrs	r3, r2
 800964c:	634b      	str	r3, [r1, #52]	; 0x34
 800964e:	e109      	b.n	8009864 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965c:	2b00      	cmp	r3, #0
 800965e:	d110      	bne.n	8009682 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	0151      	lsls	r1, r2, #5
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	440a      	add	r2, r1
 8009676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800967a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	e00f      	b.n	80096a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	0151      	lsls	r1, r2, #5
 8009694:	69fa      	ldr	r2, [r7, #28]
 8009696:	440a      	add	r2, r1
 8009698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800969c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6919      	ldr	r1, [r3, #16]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	b298      	uxth	r0, r3
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	4603      	mov	r3, r0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fade 	bl	8009c78 <USB_WritePacket>
 80096bc:	e0d2      	b.n	8009864 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d8:	0cdb      	lsrs	r3, r3, #19
 80096da:	04db      	lsls	r3, r3, #19
 80096dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009700:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d126      	bne.n	8009758 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009720:	69b9      	ldr	r1, [r7, #24]
 8009722:	0148      	lsls	r0, r1, #5
 8009724:	69f9      	ldr	r1, [r7, #28]
 8009726:	4401      	add	r1, r0
 8009728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800972c:	4313      	orrs	r3, r2
 800972e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	440a      	add	r2, r1
 8009746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800974e:	6113      	str	r3, [r2, #16]
 8009750:	e03a      	b.n	80097c8 <USB_EPStartXfer+0x3e4>
 8009752:	bf00      	nop
 8009754:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	699a      	ldr	r2, [r3, #24]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	4413      	add	r3, r2
 8009762:	1e5a      	subs	r2, r3, #1
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	8afa      	ldrh	r2, [r7, #22]
 8009774:	fb03 f202 	mul.w	r2, r3, r2
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009788:	691a      	ldr	r2, [r3, #16]
 800978a:	8afb      	ldrh	r3, [r7, #22]
 800978c:	04d9      	lsls	r1, r3, #19
 800978e:	4b38      	ldr	r3, [pc, #224]	; (8009870 <USB_EPStartXfer+0x48c>)
 8009790:	400b      	ands	r3, r1
 8009792:	69b9      	ldr	r1, [r7, #24]
 8009794:	0148      	lsls	r0, r1, #5
 8009796:	69f9      	ldr	r1, [r7, #28]
 8009798:	4401      	add	r1, r0
 800979a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800979e:	4313      	orrs	r3, r2
 80097a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097b8:	69b9      	ldr	r1, [r7, #24]
 80097ba:	0148      	lsls	r0, r1, #5
 80097bc:	69f9      	ldr	r1, [r7, #28]
 80097be:	4401      	add	r1, r0
 80097c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097c4:	4313      	orrs	r3, r2
 80097c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d10d      	bne.n	80097ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6919      	ldr	r1, [r3, #16]
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	460a      	mov	r2, r1
 80097e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	791b      	ldrb	r3, [r3, #4]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d128      	bne.n	8009844 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d110      	bne.n	8009824 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	e00f      	b.n	8009844 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	440a      	add	r2, r1
 800983a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800983e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009842:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800985e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	1ff80000 	.word	0x1ff80000

08009874 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b01      	cmp	r3, #1
 8009892:	f040 80ce 	bne.w	8009a32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d132      	bne.n	8009904 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	693a      	ldr	r2, [r7, #16]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098fc:	0cdb      	lsrs	r3, r3, #19
 80098fe:	04db      	lsls	r3, r3, #19
 8009900:	6113      	str	r3, [r2, #16]
 8009902:	e04e      	b.n	80099a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	0151      	lsls	r1, r2, #5
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	440a      	add	r2, r1
 800991a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800991e:	0cdb      	lsrs	r3, r3, #19
 8009920:	04db      	lsls	r3, r3, #19
 8009922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	0151      	lsls	r1, r2, #5
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	440a      	add	r2, r1
 800993a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009946:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	429a      	cmp	r2, r3
 8009952:	d903      	bls.n	800995c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	0151      	lsls	r1, r2, #5
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	440a      	add	r2, r1
 8009972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800997a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009992:	6939      	ldr	r1, [r7, #16]
 8009994:	0148      	lsls	r0, r1, #5
 8009996:	6979      	ldr	r1, [r7, #20]
 8009998:	4401      	add	r1, r0
 800999a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800999e:	4313      	orrs	r3, r2
 80099a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099a2:	79fb      	ldrb	r3, [r7, #7]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d11e      	bne.n	80099e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d009      	beq.n	80099c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	461a      	mov	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	015a      	lsls	r2, r3, #5
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4413      	add	r3, r2
 80099cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	0151      	lsls	r1, r2, #5
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	440a      	add	r2, r1
 80099da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	e097      	b.n	8009b16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 8083 	beq.w	8009b16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 030f 	and.w	r3, r3, #15
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f303 	lsl.w	r3, r1, r3
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	634b      	str	r3, [r1, #52]	; 0x34
 8009a30:	e071      	b.n	8009b16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	0151      	lsls	r1, r2, #5
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	440a      	add	r2, r1
 8009a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a4c:	0cdb      	lsrs	r3, r3, #19
 8009a4e:	04db      	lsls	r3, r3, #19
 8009a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68da      	ldr	r2, [r3, #12]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	691a      	ldr	r2, [r3, #16]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ac4:	6939      	ldr	r1, [r7, #16]
 8009ac6:	0148      	lsls	r0, r1, #5
 8009ac8:	6979      	ldr	r1, [r7, #20]
 8009aca:	4401      	add	r1, r0
 8009acc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10d      	bne.n	8009af6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d009      	beq.n	8009af6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6919      	ldr	r1, [r3, #16]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	460a      	mov	r2, r1
 8009af4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	0151      	lsls	r1, r2, #5
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	440a      	add	r2, r1
 8009b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d14a      	bne.n	8009bd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b5a:	f040 8086 	bne.w	8009c6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	7812      	ldrb	r2, [r2, #0]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	015a      	lsls	r2, r3, #5
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	7812      	ldrb	r2, [r2, #0]
 8009b96:	0151      	lsls	r1, r2, #5
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	440a      	add	r2, r1
 8009b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d902      	bls.n	8009bbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009bba:	e056      	b.n	8009c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd4:	d0e7      	beq.n	8009ba6 <USB_EPStopXfer+0x82>
 8009bd6:	e048      	b.n	8009c6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf0:	d13b      	bne.n	8009c6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	7812      	ldrb	r2, [r2, #0]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d902      	bls.n	8009c50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c4e:	e00c      	b.n	8009c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c68:	d0e7      	beq.n	8009c3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	371c      	adds	r7, #28
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	; 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4611      	mov	r1, r2
 8009c84:	461a      	mov	r2, r3
 8009c86:	460b      	mov	r3, r1
 8009c88:	71fb      	strb	r3, [r7, #7]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d123      	bne.n	8009ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c9e:	88bb      	ldrh	r3, [r7, #4]
 8009ca0:	3303      	adds	r3, #3
 8009ca2:	089b      	lsrs	r3, r3, #2
 8009ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e018      	b.n	8009cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cac:	79fb      	ldrb	r3, [r7, #7]
 8009cae:	031a      	lsls	r2, r3, #12
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb8:	461a      	mov	r2, r3
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61bb      	str	r3, [r7, #24]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d3e2      	bcc.n	8009cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3724      	adds	r7, #36	; 0x24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b08b      	sub	sp, #44	; 0x2c
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	089b      	lsrs	r3, r3, #2
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d12:	88fb      	ldrh	r3, [r7, #6]
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	623b      	str	r3, [r7, #32]
 8009d1e:	e014      	b.n	8009d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	3301      	adds	r3, #1
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	3301      	adds	r3, #1
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	3301      	adds	r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	3301      	adds	r3, #1
 8009d48:	623b      	str	r3, [r7, #32]
 8009d4a:	6a3a      	ldr	r2, [r7, #32]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d3e6      	bcc.n	8009d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d52:	8bfb      	ldrh	r3, [r7, #30]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01e      	beq.n	8009d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d62:	461a      	mov	r2, r3
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	6812      	ldr	r2, [r2, #0]
 8009d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	00db      	lsls	r3, r3, #3
 8009d74:	fa22 f303 	lsr.w	r3, r2, r3
 8009d78:	b2da      	uxtb	r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	3301      	adds	r3, #1
 8009d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	3301      	adds	r3, #1
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d8a:	8bfb      	ldrh	r3, [r7, #30]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d90:	8bfb      	ldrh	r3, [r7, #30]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1ea      	bne.n	8009d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	372c      	adds	r7, #44	; 0x2c
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	785b      	ldrb	r3, [r3, #1]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d12c      	bne.n	8009e1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	db12      	blt.n	8009df8 <USB_EPSetStall+0x54>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00f      	beq.n	8009df8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	0151      	lsls	r1, r2, #5
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	440a      	add	r2, r1
 8009dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009df6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	015a      	lsls	r2, r3, #5
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4413      	add	r3, r2
 8009e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	0151      	lsls	r1, r2, #5
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	440a      	add	r2, r1
 8009e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	e02b      	b.n	8009e72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db12      	blt.n	8009e52 <USB_EPSetStall+0xae>
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00f      	beq.n	8009e52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	0151      	lsls	r1, r2, #5
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	440a      	add	r2, r1
 8009e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	0151      	lsls	r1, r2, #5
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	440a      	add	r2, r1
 8009e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d128      	bne.n	8009eee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d003      	beq.n	8009ecc <USB_EPClearStall+0x4c>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	791b      	ldrb	r3, [r3, #4]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d138      	bne.n	8009f3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	e027      	b.n	8009f3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	0151      	lsls	r1, r2, #5
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	440a      	add	r2, r1
 8009f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	791b      	ldrb	r3, [r3, #4]
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d003      	beq.n	8009f1e <USB_EPClearStall+0x9e>
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	791b      	ldrb	r3, [r3, #4]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d10f      	bne.n	8009f3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	015a      	lsls	r2, r3, #5
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4413      	add	r3, r2
 8009f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	0151      	lsls	r1, r2, #5
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	440a      	add	r2, r1
 8009f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f80:	68f9      	ldr	r1, [r7, #12]
 8009f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f86:	4313      	orrs	r3, r2
 8009f88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fc6:	f023 0302 	bic.w	r3, r3, #2
 8009fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ff4:	f023 0303 	bic.w	r3, r3, #3
 8009ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a008:	f043 0302 	orr.w	r3, r3, #2
 800a00c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695b      	ldr	r3, [r3, #20]
 800a028:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4013      	ands	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a034:	68fb      	ldr	r3, [r7, #12]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a042:	b480      	push	{r7}
 800a044:	b085      	sub	sp, #20
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	4013      	ands	r3, r2
 800a064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	0c1b      	lsrs	r3, r3, #16
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a092:	69db      	ldr	r3, [r3, #28]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	4013      	ands	r3, r2
 800a098:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	b29b      	uxth	r3, r3
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b085      	sub	sp, #20
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b087      	sub	sp, #28
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	f003 030f 	and.w	r3, r3, #15
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	fa22 f303 	lsr.w	r3, r2, r3
 800a116:	01db      	lsls	r3, r3, #7
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	015a      	lsls	r2, r3, #5
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	4413      	add	r3, r2
 800a128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4013      	ands	r3, r2
 800a132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a134:	68bb      	ldr	r3, [r7, #8]
}
 800a136:	4618      	mov	r0, r3
 800a138:	371c      	adds	r7, #28
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	f003 0301 	and.w	r3, r3, #1
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a178:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a17c:	f023 0307 	bic.w	r3, r3, #7
 800a180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	333c      	adds	r3, #60	; 0x3c
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	4a26      	ldr	r2, [pc, #152]	; (800a25c <USB_EP0_OutStart+0xb8>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d90a      	bls.n	800a1de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1d8:	d101      	bne.n	800a1de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e037      	b.n	800a24e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a20c:	f043 0318 	orr.w	r3, r3, #24
 800a210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d10f      	bne.n	800a24c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a232:	461a      	mov	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a24a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	4f54300a 	.word	0x4f54300a

0800a260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <USB_CoreReset+0x64>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d901      	bls.n	800a27e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e01b      	b.n	800a2b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b00      	cmp	r3, #0
 800a284:	daf2      	bge.n	800a26c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f043 0201 	orr.w	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3301      	adds	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <USB_CoreReset+0x64>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d901      	bls.n	800a2a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e006      	b.n	800a2b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d0f0      	beq.n	800a296 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	00030d40 	.word	0x00030d40

0800a2c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a2d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2da:	2b84      	cmp	r3, #132	; 0x84
 800a2dc:	d005      	beq.n	800a2ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a2de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	3303      	adds	r3, #3
 800a2e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a2fc:	f000 ff82 	bl	800b204 <vTaskStartScheduler>
  
  return osOK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	bd80      	pop	{r7, pc}

0800a306 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a306:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a308:	b089      	sub	sp, #36	; 0x24
 800a30a:	af04      	add	r7, sp, #16
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d020      	beq.n	800a35a <osThreadCreate+0x54>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01c      	beq.n	800a35a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685c      	ldr	r4, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681d      	ldr	r5, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691e      	ldr	r6, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ffc8 	bl	800a2c8 <makeFreeRtosPriority>
 800a338:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a342:	9202      	str	r2, [sp, #8]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	9100      	str	r1, [sp, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	4632      	mov	r2, r6
 800a34c:	4629      	mov	r1, r5
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fcea 	bl	800ad28 <xTaskCreateStatic>
 800a354:	4603      	mov	r3, r0
 800a356:	60fb      	str	r3, [r7, #12]
 800a358:	e01c      	b.n	800a394 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685c      	ldr	r4, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a366:	b29e      	uxth	r6, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff ffaa 	bl	800a2c8 <makeFreeRtosPriority>
 800a374:	4602      	mov	r2, r0
 800a376:	f107 030c 	add.w	r3, r7, #12
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	9200      	str	r2, [sp, #0]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	4632      	mov	r2, r6
 800a382:	4629      	mov	r1, r5
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fd2c 	bl	800ade2 <xTaskCreate>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d001      	beq.n	800a394 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a394:	68fb      	ldr	r3, [r7, #12]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a39e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <osDelay+0x16>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	e000      	b.n	800a3b6 <osDelay+0x18>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fef0 	bl	800b19c <vTaskDelay>
  
  return osOK;
 800a3bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	; 0x28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d4:	f000 ff80 	bl	800b2d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3d8:	4b5b      	ldr	r3, [pc, #364]	; (800a548 <pvPortMalloc+0x180>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d101      	bne.n	800a3e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e0:	f000 f920 	bl	800a624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e4:	4b59      	ldr	r3, [pc, #356]	; (800a54c <pvPortMalloc+0x184>)
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 8093 	bne.w	800a518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01d      	beq.n	800a434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f003 0307 	and.w	r3, r3, #7
 800a406:	2b00      	cmp	r3, #0
 800a408:	d014      	beq.n	800a434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	3308      	adds	r3, #8
 800a412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00a      	beq.n	800a434 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a430:	bf00      	nop
 800a432:	e7fe      	b.n	800a432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d06e      	beq.n	800a518 <pvPortMalloc+0x150>
 800a43a:	4b45      	ldr	r3, [pc, #276]	; (800a550 <pvPortMalloc+0x188>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d869      	bhi.n	800a518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a444:	4b43      	ldr	r3, [pc, #268]	; (800a554 <pvPortMalloc+0x18c>)
 800a446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a448:	4b42      	ldr	r3, [pc, #264]	; (800a554 <pvPortMalloc+0x18c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a44e:	e004      	b.n	800a45a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d903      	bls.n	800a46c <pvPortMalloc+0xa4>
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1f1      	bne.n	800a450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a46c:	4b36      	ldr	r3, [pc, #216]	; (800a548 <pvPortMalloc+0x180>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	429a      	cmp	r2, r3
 800a474:	d050      	beq.n	800a518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2208      	movs	r2, #8
 800a47c:	4413      	add	r3, r2
 800a47e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	2308      	movs	r3, #8
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	429a      	cmp	r2, r3
 800a496:	d91f      	bls.n	800a4d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4413      	add	r3, r2
 800a49e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	f003 0307 	and.w	r3, r3, #7
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	613b      	str	r3, [r7, #16]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4d2:	69b8      	ldr	r0, [r7, #24]
 800a4d4:	f000 f908 	bl	800a6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4d8:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <pvPortMalloc+0x188>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	4a1b      	ldr	r2, [pc, #108]	; (800a550 <pvPortMalloc+0x188>)
 800a4e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <pvPortMalloc+0x188>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <pvPortMalloc+0x190>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d203      	bcs.n	800a4fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4f2:	4b17      	ldr	r3, [pc, #92]	; (800a550 <pvPortMalloc+0x188>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a18      	ldr	r2, [pc, #96]	; (800a558 <pvPortMalloc+0x190>)
 800a4f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <pvPortMalloc+0x184>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	431a      	orrs	r2, r3
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	2200      	movs	r2, #0
 800a50c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a50e:	4b13      	ldr	r3, [pc, #76]	; (800a55c <pvPortMalloc+0x194>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	4a11      	ldr	r2, [pc, #68]	; (800a55c <pvPortMalloc+0x194>)
 800a516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a518:	f000 feec 	bl	800b2f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <pvPortMalloc+0x174>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	60fb      	str	r3, [r7, #12]
}
 800a538:	bf00      	nop
 800a53a:	e7fe      	b.n	800a53a <pvPortMalloc+0x172>
	return pvReturn;
 800a53c:	69fb      	ldr	r3, [r7, #28]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3728      	adds	r7, #40	; 0x28
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20004608 	.word	0x20004608
 800a54c:	2000461c 	.word	0x2000461c
 800a550:	2000460c 	.word	0x2000460c
 800a554:	20004600 	.word	0x20004600
 800a558:	20004610 	.word	0x20004610
 800a55c:	20004614 	.word	0x20004614

0800a560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d04d      	beq.n	800a60e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a572:	2308      	movs	r3, #8
 800a574:	425b      	negs	r3, r3
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4413      	add	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	4b24      	ldr	r3, [pc, #144]	; (800a618 <vPortFree+0xb8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4013      	ands	r3, r2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <vPortFree+0x44>
	__asm volatile
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	60fb      	str	r3, [r7, #12]
}
 800a5a0:	bf00      	nop
 800a5a2:	e7fe      	b.n	800a5a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <vPortFree+0x62>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	60bb      	str	r3, [r7, #8]
}
 800a5be:	bf00      	nop
 800a5c0:	e7fe      	b.n	800a5c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	685a      	ldr	r2, [r3, #4]
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <vPortFree+0xb8>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01e      	beq.n	800a60e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d11a      	bne.n	800a60e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	4b0e      	ldr	r3, [pc, #56]	; (800a618 <vPortFree+0xb8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	401a      	ands	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5e8:	f000 fe76 	bl	800b2d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <vPortFree+0xbc>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	4a09      	ldr	r2, [pc, #36]	; (800a61c <vPortFree+0xbc>)
 800a5f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f000 f874 	bl	800a6e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <vPortFree+0xc0>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a06      	ldr	r2, [pc, #24]	; (800a620 <vPortFree+0xc0>)
 800a608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a60a:	f000 fe73 	bl	800b2f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a60e:	bf00      	nop
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000461c 	.word	0x2000461c
 800a61c:	2000460c 	.word	0x2000460c
 800a620:	20004618 	.word	0x20004618

0800a624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a62a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <prvHeapInit+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00c      	beq.n	800a658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3307      	adds	r3, #7
 800a642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0307 	bic.w	r3, r3, #7
 800a64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <prvHeapInit+0xac>)
 800a654:	4413      	add	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a65c:	4a1d      	ldr	r2, [pc, #116]	; (800a6d4 <prvHeapInit+0xb0>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <prvHeapInit+0xb0>)
 800a664:	2200      	movs	r2, #0
 800a666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	4413      	add	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a670:	2208      	movs	r2, #8
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <prvHeapInit+0xb4>)
 800a684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <prvHeapInit+0xb4>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a68e:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <prvHeapInit+0xb4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvHeapInit+0xb4>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <prvHeapInit+0xb8>)
 800a6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <prvHeapInit+0xbc>)
 800a6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <prvHeapInit+0xc0>)
 800a6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20000a00 	.word	0x20000a00
 800a6d4:	20004600 	.word	0x20004600
 800a6d8:	20004608 	.word	0x20004608
 800a6dc:	20004610 	.word	0x20004610
 800a6e0:	2000460c 	.word	0x2000460c
 800a6e4:	2000461c 	.word	0x2000461c

0800a6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6f0:	4b28      	ldr	r3, [pc, #160]	; (800a794 <prvInsertBlockIntoFreeList+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e002      	b.n	800a6fc <prvInsertBlockIntoFreeList+0x14>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d8f7      	bhi.n	800a6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d108      	bne.n	800a72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	441a      	add	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d118      	bne.n	800a770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d00d      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	441a      	add	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e008      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e003      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d002      	beq.n	800a786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20004600 	.word	0x20004600
 800a798:	20004608 	.word	0x20004608

0800a79c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f103 0208 	add.w	r2, r3, #8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 0208 	add.w	r2, r3, #8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f103 0208 	add.w	r2, r3, #8
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	601a      	str	r2, [r3, #0]
}
 800a832:	bf00      	nop
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a854:	d103      	bne.n	800a85e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e00c      	b.n	800a878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3308      	adds	r3, #8
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <vListInsert+0x2e>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	429a      	cmp	r2, r3
 800a876:	d2f6      	bcs.n	800a866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6892      	ldr	r2, [r2, #8]
 800a8c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6852      	ldr	r2, [r2, #4]
 800a8d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d103      	bne.n	800a8e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	1e5a      	subs	r2, r3, #1
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3b04      	subs	r3, #4
 800a914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a91c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3b04      	subs	r3, #4
 800a922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	f023 0201 	bic.w	r2, r3, #1
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3b04      	subs	r3, #4
 800a932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a934:	4a0c      	ldr	r2, [pc, #48]	; (800a968 <pxPortInitialiseStack+0x64>)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	3b14      	subs	r3, #20
 800a93e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3b04      	subs	r3, #4
 800a94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f06f 0202 	mvn.w	r2, #2
 800a952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3b20      	subs	r3, #32
 800a958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a95a:	68fb      	ldr	r3, [r7, #12]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	0800a96d 	.word	0x0800a96d

0800a96c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a976:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <prvTaskExitError+0x54>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97e:	d00a      	beq.n	800a996 <prvTaskExitError+0x2a>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <prvTaskExitError+0x28>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60bb      	str	r3, [r7, #8]
}
 800a9a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9aa:	bf00      	nop
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d0fc      	beq.n	800a9ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	20000120 	.word	0x20000120
	...

0800a9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9d0:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <pxCurrentTCBConst2>)
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	f380 8809 	msr	PSP, r0
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8811 	msr	BASEPRI, r0
 800a9ea:	4770      	bx	lr
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst2>:
 800a9f0:	20004628 	.word	0x20004628
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9f8:	4808      	ldr	r0, [pc, #32]	; (800aa1c <prvPortStartFirstTask+0x24>)
 800a9fa:	6800      	ldr	r0, [r0, #0]
 800a9fc:	6800      	ldr	r0, [r0, #0]
 800a9fe:	f380 8808 	msr	MSP, r0
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8814 	msr	CONTROL, r0
 800aa0a:	b662      	cpsie	i
 800aa0c:	b661      	cpsie	f
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	df00      	svc	0
 800aa18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa1a:	bf00      	nop
 800aa1c:	e000ed08 	.word	0xe000ed08

0800aa20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa26:	4b46      	ldr	r3, [pc, #280]	; (800ab40 <xPortStartScheduler+0x120>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a46      	ldr	r2, [pc, #280]	; (800ab44 <xPortStartScheduler+0x124>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d10a      	bne.n	800aa46 <xPortStartScheduler+0x26>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	613b      	str	r3, [r7, #16]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa46:	4b3e      	ldr	r3, [pc, #248]	; (800ab40 <xPortStartScheduler+0x120>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a3f      	ldr	r2, [pc, #252]	; (800ab48 <xPortStartScheduler+0x128>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10a      	bne.n	800aa66 <xPortStartScheduler+0x46>
	__asm volatile
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	60fb      	str	r3, [r7, #12]
}
 800aa62:	bf00      	nop
 800aa64:	e7fe      	b.n	800aa64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa66:	4b39      	ldr	r3, [pc, #228]	; (800ab4c <xPortStartScheduler+0x12c>)
 800aa68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	22ff      	movs	r2, #255	; 0xff
 800aa76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	4b31      	ldr	r3, [pc, #196]	; (800ab50 <xPortStartScheduler+0x130>)
 800aa8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa8e:	4b31      	ldr	r3, [pc, #196]	; (800ab54 <xPortStartScheduler+0x134>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa94:	e009      	b.n	800aaaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa96:	4b2f      	ldr	r3, [pc, #188]	; (800ab54 <xPortStartScheduler+0x134>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	4a2d      	ldr	r2, [pc, #180]	; (800ab54 <xPortStartScheduler+0x134>)
 800aa9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaa0:	78fb      	ldrb	r3, [r7, #3]
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab2:	2b80      	cmp	r3, #128	; 0x80
 800aab4:	d0ef      	beq.n	800aa96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aab6:	4b27      	ldr	r3, [pc, #156]	; (800ab54 <xPortStartScheduler+0x134>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f1c3 0307 	rsb	r3, r3, #7
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d00a      	beq.n	800aad8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac6:	f383 8811 	msr	BASEPRI, r3
 800aaca:	f3bf 8f6f 	isb	sy
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	60bb      	str	r3, [r7, #8]
}
 800aad4:	bf00      	nop
 800aad6:	e7fe      	b.n	800aad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aad8:	4b1e      	ldr	r3, [pc, #120]	; (800ab54 <xPortStartScheduler+0x134>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	021b      	lsls	r3, r3, #8
 800aade:	4a1d      	ldr	r2, [pc, #116]	; (800ab54 <xPortStartScheduler+0x134>)
 800aae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aae2:	4b1c      	ldr	r3, [pc, #112]	; (800ab54 <xPortStartScheduler+0x134>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aaea:	4a1a      	ldr	r2, [pc, #104]	; (800ab54 <xPortStartScheduler+0x134>)
 800aaec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aaf6:	4b18      	ldr	r3, [pc, #96]	; (800ab58 <xPortStartScheduler+0x138>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a17      	ldr	r2, [pc, #92]	; (800ab58 <xPortStartScheduler+0x138>)
 800aafc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <xPortStartScheduler+0x138>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a14      	ldr	r2, [pc, #80]	; (800ab58 <xPortStartScheduler+0x138>)
 800ab08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab0e:	f000 f8dd 	bl	800accc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab12:	4b12      	ldr	r3, [pc, #72]	; (800ab5c <xPortStartScheduler+0x13c>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab18:	f000 f8fc 	bl	800ad14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab1c:	4b10      	ldr	r3, [pc, #64]	; (800ab60 <xPortStartScheduler+0x140>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a0f      	ldr	r2, [pc, #60]	; (800ab60 <xPortStartScheduler+0x140>)
 800ab22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab28:	f7ff ff66 	bl	800a9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab2c:	f000 fd36 	bl	800b59c <vTaskSwitchContext>
	prvTaskExitError();
 800ab30:	f7ff ff1c 	bl	800a96c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	e000ed00 	.word	0xe000ed00
 800ab44:	410fc271 	.word	0x410fc271
 800ab48:	410fc270 	.word	0x410fc270
 800ab4c:	e000e400 	.word	0xe000e400
 800ab50:	20004620 	.word	0x20004620
 800ab54:	20004624 	.word	0x20004624
 800ab58:	e000ed20 	.word	0xe000ed20
 800ab5c:	20000120 	.word	0x20000120
 800ab60:	e000ef34 	.word	0xe000ef34

0800ab64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	607b      	str	r3, [r7, #4]
}
 800ab7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab7e:	4b0f      	ldr	r3, [pc, #60]	; (800abbc <vPortEnterCritical+0x58>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	4a0d      	ldr	r2, [pc, #52]	; (800abbc <vPortEnterCritical+0x58>)
 800ab86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <vPortEnterCritical+0x58>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d10f      	bne.n	800abb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <vPortEnterCritical+0x5c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	603b      	str	r3, [r7, #0]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <vPortEnterCritical+0x4a>
	}
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20000120 	.word	0x20000120
 800abc0:	e000ed04 	.word	0xe000ed04

0800abc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <vPortExitCritical+0x50>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10a      	bne.n	800abe8 <vPortExitCritical+0x24>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	607b      	str	r3, [r7, #4]
}
 800abe4:	bf00      	nop
 800abe6:	e7fe      	b.n	800abe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abe8:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <vPortExitCritical+0x50>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3b01      	subs	r3, #1
 800abee:	4a09      	ldr	r2, [pc, #36]	; (800ac14 <vPortExitCritical+0x50>)
 800abf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abf2:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <vPortExitCritical+0x50>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <vPortExitCritical+0x42>
 800abfa:	2300      	movs	r3, #0
 800abfc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20000120 	.word	0x20000120
	...

0800ac20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac20:	f3ef 8009 	mrs	r0, PSP
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <pxCurrentTCBConst>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f01e 0f10 	tst.w	lr, #16
 800ac30:	bf08      	it	eq
 800ac32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	6010      	str	r0, [r2, #0]
 800ac3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac44:	f380 8811 	msr	BASEPRI, r0
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f000 fca4 	bl	800b59c <vTaskSwitchContext>
 800ac54:	f04f 0000 	mov.w	r0, #0
 800ac58:	f380 8811 	msr	BASEPRI, r0
 800ac5c:	bc09      	pop	{r0, r3}
 800ac5e:	6819      	ldr	r1, [r3, #0]
 800ac60:	6808      	ldr	r0, [r1, #0]
 800ac62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac66:	f01e 0f10 	tst.w	lr, #16
 800ac6a:	bf08      	it	eq
 800ac6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac70:	f380 8809 	msr	PSP, r0
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst>:
 800ac80:	20004628 	.word	0x20004628
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aca2:	f000 fbc3 	bl	800b42c <xTaskIncrementTick>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <SysTick_Handler+0x40>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f383 8811 	msr	BASEPRI, r3
}
 800acbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <vPortSetupTimerInterrupt+0x38>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <vPortSetupTimerInterrupt+0x3c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <vPortSetupTimerInterrupt+0x40>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	099b      	lsrs	r3, r3, #6
 800ace8:	4a09      	ldr	r2, [pc, #36]	; (800ad10 <vPortSetupTimerInterrupt+0x44>)
 800acea:	3b01      	subs	r3, #1
 800acec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acee:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	e000e010 	.word	0xe000e010
 800ad04:	e000e018 	.word	0xe000e018
 800ad08:	20000090 	.word	0x20000090
 800ad0c:	10624dd3 	.word	0x10624dd3
 800ad10:	e000e014 	.word	0xe000e014

0800ad14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad24 <vPortEnableVFP+0x10>
 800ad18:	6801      	ldr	r1, [r0, #0]
 800ad1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad1e:	6001      	str	r1, [r0, #0]
 800ad20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad22:	bf00      	nop
 800ad24:	e000ed88 	.word	0xe000ed88

0800ad28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af04      	add	r7, sp, #16
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	623b      	str	r3, [r7, #32]
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <xTaskCreateStatic+0x46>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	61fb      	str	r3, [r7, #28]
}
 800ad6a:	bf00      	nop
 800ad6c:	e7fe      	b.n	800ad6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad6e:	23b4      	movs	r3, #180	; 0xb4
 800ad70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	2bb4      	cmp	r3, #180	; 0xb4
 800ad76:	d00a      	beq.n	800ad8e <xTaskCreateStatic+0x66>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	61bb      	str	r3, [r7, #24]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d01e      	beq.n	800add4 <xTaskCreateStatic+0xac>
 800ad96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01b      	beq.n	800add4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ada4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adae:	2300      	movs	r3, #0
 800adb0:	9303      	str	r3, [sp, #12]
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	9302      	str	r3, [sp, #8]
 800adb6:	f107 0314 	add.w	r3, r7, #20
 800adba:	9301      	str	r3, [sp, #4]
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	68b9      	ldr	r1, [r7, #8]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 f850 	bl	800ae6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adce:	f000 f8eb 	bl	800afa8 <prvAddNewTaskToReadyList>
 800add2:	e001      	b.n	800add8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800add8:	697b      	ldr	r3, [r7, #20]
	}
 800adda:	4618      	mov	r0, r3
 800addc:	3728      	adds	r7, #40	; 0x28
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b08c      	sub	sp, #48	; 0x30
 800ade6:	af04      	add	r7, sp, #16
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4613      	mov	r3, r2
 800adf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff fae6 	bl	800a3c8 <pvPortMalloc>
 800adfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00e      	beq.n	800ae22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae04:	20b4      	movs	r0, #180	; 0xb4
 800ae06:	f7ff fadf 	bl	800a3c8 <pvPortMalloc>
 800ae0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	631a      	str	r2, [r3, #48]	; 0x30
 800ae18:	e005      	b.n	800ae26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f7ff fba0 	bl	800a560 <vPortFree>
 800ae20:	e001      	b.n	800ae26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d017      	beq.n	800ae5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae34:	88fa      	ldrh	r2, [r7, #6]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9303      	str	r3, [sp, #12]
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	9302      	str	r3, [sp, #8]
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68b9      	ldr	r1, [r7, #8]
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f80e 	bl	800ae6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae50:	69f8      	ldr	r0, [r7, #28]
 800ae52:	f000 f8a9 	bl	800afa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae56:	2301      	movs	r3, #1
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e002      	b.n	800ae62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae62:	69bb      	ldr	r3, [r7, #24]
	}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae84:	3b01      	subs	r3, #1
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	f023 0307 	bic.w	r3, r3, #7
 800ae92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f003 0307 	and.w	r3, r3, #7
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00a      	beq.n	800aeb4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	617b      	str	r3, [r7, #20]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01f      	beq.n	800aefa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeba:	2300      	movs	r3, #0
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e012      	b.n	800aee6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4413      	add	r3, r2
 800aec6:	7819      	ldrb	r1, [r3, #0]
 800aec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	4413      	add	r3, r2
 800aece:	3334      	adds	r3, #52	; 0x34
 800aed0:	460a      	mov	r2, r1
 800aed2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	4413      	add	r3, r2
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d006      	beq.n	800aeee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	3301      	adds	r3, #1
 800aee4:	61fb      	str	r3, [r7, #28]
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	2b0f      	cmp	r3, #15
 800aeea:	d9e9      	bls.n	800aec0 <prvInitialiseNewTask+0x54>
 800aeec:	e000      	b.n	800aef0 <prvInitialiseNewTask+0x84>
			{
				break;
 800aeee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aef8:	e003      	b.n	800af02 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	2b06      	cmp	r3, #6
 800af06:	d901      	bls.n	800af0c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af08:	2306      	movs	r3, #6
 800af0a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af10:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af16:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	2200      	movs	r2, #0
 800af1c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	3304      	adds	r3, #4
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff fc5a 	bl	800a7dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2a:	3318      	adds	r3, #24
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fc55 	bl	800a7dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	f1c3 0207 	rsb	r2, r3, #7
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af46:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	2200      	movs	r2, #0
 800af54:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5a:	334c      	adds	r3, #76	; 0x4c
 800af5c:	2260      	movs	r2, #96	; 0x60
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f003 fae0 	bl	800e526 <memset>
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <prvInitialiseNewTask+0x130>)
 800af6a:	651a      	str	r2, [r3, #80]	; 0x50
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	4a0c      	ldr	r2, [pc, #48]	; (800afa0 <prvInitialiseNewTask+0x134>)
 800af70:	655a      	str	r2, [r3, #84]	; 0x54
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	4a0b      	ldr	r2, [pc, #44]	; (800afa4 <prvInitialiseNewTask+0x138>)
 800af76:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	68f9      	ldr	r1, [r7, #12]
 800af7c:	69b8      	ldr	r0, [r7, #24]
 800af7e:	f7ff fcc1 	bl	800a904 <pxPortInitialiseStack>
 800af82:	4602      	mov	r2, r0
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d002      	beq.n	800af94 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af94:	bf00      	nop
 800af96:	3720      	adds	r7, #32
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	080157f4 	.word	0x080157f4
 800afa0:	08015814 	.word	0x08015814
 800afa4:	080157d4 	.word	0x080157d4

0800afa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afb0:	f7ff fdd8 	bl	800ab64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afb4:	4b2a      	ldr	r3, [pc, #168]	; (800b060 <prvAddNewTaskToReadyList+0xb8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	4a29      	ldr	r2, [pc, #164]	; (800b060 <prvAddNewTaskToReadyList+0xb8>)
 800afbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afbe:	4b29      	ldr	r3, [pc, #164]	; (800b064 <prvAddNewTaskToReadyList+0xbc>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d109      	bne.n	800afda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afc6:	4a27      	ldr	r2, [pc, #156]	; (800b064 <prvAddNewTaskToReadyList+0xbc>)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afcc:	4b24      	ldr	r3, [pc, #144]	; (800b060 <prvAddNewTaskToReadyList+0xb8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d110      	bne.n	800aff6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afd4:	f000 fb5c 	bl	800b690 <prvInitialiseTaskLists>
 800afd8:	e00d      	b.n	800aff6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afda:	4b23      	ldr	r3, [pc, #140]	; (800b068 <prvAddNewTaskToReadyList+0xc0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afe2:	4b20      	ldr	r3, [pc, #128]	; (800b064 <prvAddNewTaskToReadyList+0xbc>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afec:	429a      	cmp	r2, r3
 800afee:	d802      	bhi.n	800aff6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aff0:	4a1c      	ldr	r2, [pc, #112]	; (800b064 <prvAddNewTaskToReadyList+0xbc>)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aff6:	4b1d      	ldr	r3, [pc, #116]	; (800b06c <prvAddNewTaskToReadyList+0xc4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3301      	adds	r3, #1
 800affc:	4a1b      	ldr	r2, [pc, #108]	; (800b06c <prvAddNewTaskToReadyList+0xc4>)
 800affe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	2201      	movs	r2, #1
 800b006:	409a      	lsls	r2, r3
 800b008:	4b19      	ldr	r3, [pc, #100]	; (800b070 <prvAddNewTaskToReadyList+0xc8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	4a18      	ldr	r2, [pc, #96]	; (800b070 <prvAddNewTaskToReadyList+0xc8>)
 800b010:	6013      	str	r3, [r2, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b016:	4613      	mov	r3, r2
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4a15      	ldr	r2, [pc, #84]	; (800b074 <prvAddNewTaskToReadyList+0xcc>)
 800b020:	441a      	add	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3304      	adds	r3, #4
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7ff fbe4 	bl	800a7f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b02e:	f7ff fdc9 	bl	800abc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b032:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <prvAddNewTaskToReadyList+0xc0>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00e      	beq.n	800b058 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b03a:	4b0a      	ldr	r3, [pc, #40]	; (800b064 <prvAddNewTaskToReadyList+0xbc>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	429a      	cmp	r2, r3
 800b046:	d207      	bcs.n	800b058 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b048:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <prvAddNewTaskToReadyList+0xd0>)
 800b04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b04e:	601a      	str	r2, [r3, #0]
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b058:	bf00      	nop
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	20004728 	.word	0x20004728
 800b064:	20004628 	.word	0x20004628
 800b068:	20004734 	.word	0x20004734
 800b06c:	20004744 	.word	0x20004744
 800b070:	20004730 	.word	0x20004730
 800b074:	2000462c 	.word	0x2000462c
 800b078:	e000ed04 	.word	0xe000ed04

0800b07c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b084:	f7ff fd6e 	bl	800ab64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <vTaskDelete+0x18>
 800b08e:	4b39      	ldr	r3, [pc, #228]	; (800b174 <vTaskDelete+0xf8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	e000      	b.n	800b096 <vTaskDelete+0x1a>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3304      	adds	r3, #4
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fc07 	bl	800a8b0 <uxListRemove>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d115      	bne.n	800b0d4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	4932      	ldr	r1, [pc, #200]	; (800b178 <vTaskDelete+0xfc>)
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <vTaskDelete+0x58>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c8:	43da      	mvns	r2, r3
 800b0ca:	4b2c      	ldr	r3, [pc, #176]	; (800b17c <vTaskDelete+0x100>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	4a2a      	ldr	r2, [pc, #168]	; (800b17c <vTaskDelete+0x100>)
 800b0d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d004      	beq.n	800b0e6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3318      	adds	r3, #24
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff fbe5 	bl	800a8b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b0e6:	4b26      	ldr	r3, [pc, #152]	; (800b180 <vTaskDelete+0x104>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	4a24      	ldr	r2, [pc, #144]	; (800b180 <vTaskDelete+0x104>)
 800b0ee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b0f0:	4b20      	ldr	r3, [pc, #128]	; (800b174 <vTaskDelete+0xf8>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d10b      	bne.n	800b112 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4619      	mov	r1, r3
 800b100:	4820      	ldr	r0, [pc, #128]	; (800b184 <vTaskDelete+0x108>)
 800b102:	f7ff fb78 	bl	800a7f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b106:	4b20      	ldr	r3, [pc, #128]	; (800b188 <vTaskDelete+0x10c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3301      	adds	r3, #1
 800b10c:	4a1e      	ldr	r2, [pc, #120]	; (800b188 <vTaskDelete+0x10c>)
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	e009      	b.n	800b126 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b112:	4b1e      	ldr	r3, [pc, #120]	; (800b18c <vTaskDelete+0x110>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3b01      	subs	r3, #1
 800b118:	4a1c      	ldr	r2, [pc, #112]	; (800b18c <vTaskDelete+0x110>)
 800b11a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 fb25 	bl	800b76c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b122:	f000 fb57 	bl	800b7d4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b126:	f7ff fd4d 	bl	800abc4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b12a:	4b19      	ldr	r3, [pc, #100]	; (800b190 <vTaskDelete+0x114>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d01b      	beq.n	800b16a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b132:	4b10      	ldr	r3, [pc, #64]	; (800b174 <vTaskDelete+0xf8>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d116      	bne.n	800b16a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b13c:	4b15      	ldr	r3, [pc, #84]	; (800b194 <vTaskDelete+0x118>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00a      	beq.n	800b15a <vTaskDelete+0xde>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	60bb      	str	r3, [r7, #8]
}
 800b156:	bf00      	nop
 800b158:	e7fe      	b.n	800b158 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b15a:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <vTaskDelete+0x11c>)
 800b15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b16a:	bf00      	nop
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20004628 	.word	0x20004628
 800b178:	2000462c 	.word	0x2000462c
 800b17c:	20004730 	.word	0x20004730
 800b180:	20004744 	.word	0x20004744
 800b184:	200046fc 	.word	0x200046fc
 800b188:	20004710 	.word	0x20004710
 800b18c:	20004728 	.word	0x20004728
 800b190:	20004734 	.word	0x20004734
 800b194:	20004750 	.word	0x20004750
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d017      	beq.n	800b1de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ae:	4b13      	ldr	r3, [pc, #76]	; (800b1fc <vTaskDelay+0x60>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <vTaskDelay+0x30>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60bb      	str	r3, [r7, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	e7fe      	b.n	800b1ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1cc:	f000 f884 	bl	800b2d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fb1e 	bl	800b814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1d8:	f000 f88c 	bl	800b2f4 <xTaskResumeAll>
 800b1dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d107      	bne.n	800b1f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b1e4:	4b06      	ldr	r3, [pc, #24]	; (800b200 <vTaskDelay+0x64>)
 800b1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20004750 	.word	0x20004750
 800b200:	e000ed04 	.word	0xe000ed04

0800b204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b08a      	sub	sp, #40	; 0x28
 800b208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b212:	463a      	mov	r2, r7
 800b214:	1d39      	adds	r1, r7, #4
 800b216:	f107 0308 	add.w	r3, r7, #8
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f5 fefc 	bl	8001018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	9202      	str	r2, [sp, #8]
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	2300      	movs	r3, #0
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	2300      	movs	r3, #0
 800b230:	460a      	mov	r2, r1
 800b232:	4921      	ldr	r1, [pc, #132]	; (800b2b8 <vTaskStartScheduler+0xb4>)
 800b234:	4821      	ldr	r0, [pc, #132]	; (800b2bc <vTaskStartScheduler+0xb8>)
 800b236:	f7ff fd77 	bl	800ad28 <xTaskCreateStatic>
 800b23a:	4603      	mov	r3, r0
 800b23c:	4a20      	ldr	r2, [pc, #128]	; (800b2c0 <vTaskStartScheduler+0xbc>)
 800b23e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b240:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <vTaskStartScheduler+0xbc>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b248:	2301      	movs	r3, #1
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	e001      	b.n	800b252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b24e:	2300      	movs	r3, #0
 800b250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d11b      	bne.n	800b290 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	613b      	str	r3, [r7, #16]
}
 800b26a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b26c:	4b15      	ldr	r3, [pc, #84]	; (800b2c4 <vTaskStartScheduler+0xc0>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	334c      	adds	r3, #76	; 0x4c
 800b272:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <vTaskStartScheduler+0xc4>)
 800b274:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b276:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <vTaskStartScheduler+0xc8>)
 800b278:	f04f 32ff 	mov.w	r2, #4294967295
 800b27c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b27e:	4b14      	ldr	r3, [pc, #80]	; (800b2d0 <vTaskStartScheduler+0xcc>)
 800b280:	2201      	movs	r2, #1
 800b282:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b284:	4b13      	ldr	r3, [pc, #76]	; (800b2d4 <vTaskStartScheduler+0xd0>)
 800b286:	2200      	movs	r2, #0
 800b288:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b28a:	f7ff fbc9 	bl	800aa20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b28e:	e00e      	b.n	800b2ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b296:	d10a      	bne.n	800b2ae <vTaskStartScheduler+0xaa>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <vTaskStartScheduler+0xa8>
}
 800b2ae:	bf00      	nop
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	08012dd4 	.word	0x08012dd4
 800b2bc:	0800b661 	.word	0x0800b661
 800b2c0:	2000474c 	.word	0x2000474c
 800b2c4:	20004628 	.word	0x20004628
 800b2c8:	20000214 	.word	0x20000214
 800b2cc:	20004748 	.word	0x20004748
 800b2d0:	20004734 	.word	0x20004734
 800b2d4:	2000472c 	.word	0x2000472c

0800b2d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2dc:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <vTaskSuspendAll+0x18>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	4a03      	ldr	r2, [pc, #12]	; (800b2f0 <vTaskSuspendAll+0x18>)
 800b2e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2e6:	bf00      	nop
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20004750 	.word	0x20004750

0800b2f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b302:	4b41      	ldr	r3, [pc, #260]	; (800b408 <xTaskResumeAll+0x114>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d10a      	bne.n	800b320 <xTaskResumeAll+0x2c>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	603b      	str	r3, [r7, #0]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b320:	f7ff fc20 	bl	800ab64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b324:	4b38      	ldr	r3, [pc, #224]	; (800b408 <xTaskResumeAll+0x114>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3b01      	subs	r3, #1
 800b32a:	4a37      	ldr	r2, [pc, #220]	; (800b408 <xTaskResumeAll+0x114>)
 800b32c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b32e:	4b36      	ldr	r3, [pc, #216]	; (800b408 <xTaskResumeAll+0x114>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d161      	bne.n	800b3fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b336:	4b35      	ldr	r3, [pc, #212]	; (800b40c <xTaskResumeAll+0x118>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d05d      	beq.n	800b3fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b33e:	e02e      	b.n	800b39e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b340:	4b33      	ldr	r3, [pc, #204]	; (800b410 <xTaskResumeAll+0x11c>)
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3318      	adds	r3, #24
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff faaf 	bl	800a8b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3304      	adds	r3, #4
 800b356:	4618      	mov	r0, r3
 800b358:	f7ff faaa 	bl	800a8b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	2201      	movs	r2, #1
 800b362:	409a      	lsls	r2, r3
 800b364:	4b2b      	ldr	r3, [pc, #172]	; (800b414 <xTaskResumeAll+0x120>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4313      	orrs	r3, r2
 800b36a:	4a2a      	ldr	r2, [pc, #168]	; (800b414 <xTaskResumeAll+0x120>)
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	4a27      	ldr	r2, [pc, #156]	; (800b418 <xTaskResumeAll+0x124>)
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	3304      	adds	r3, #4
 800b382:	4619      	mov	r1, r3
 800b384:	4610      	mov	r0, r2
 800b386:	f7ff fa36 	bl	800a7f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38e:	4b23      	ldr	r3, [pc, #140]	; (800b41c <xTaskResumeAll+0x128>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	429a      	cmp	r2, r3
 800b396:	d302      	bcc.n	800b39e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b398:	4b21      	ldr	r3, [pc, #132]	; (800b420 <xTaskResumeAll+0x12c>)
 800b39a:	2201      	movs	r2, #1
 800b39c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b39e:	4b1c      	ldr	r3, [pc, #112]	; (800b410 <xTaskResumeAll+0x11c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1cc      	bne.n	800b340 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3ac:	f000 fa12 	bl	800b7d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3b0:	4b1c      	ldr	r3, [pc, #112]	; (800b424 <xTaskResumeAll+0x130>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d010      	beq.n	800b3de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3bc:	f000 f836 	bl	800b42c <xTaskIncrementTick>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b3c6:	4b16      	ldr	r3, [pc, #88]	; (800b420 <xTaskResumeAll+0x12c>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d1f1      	bne.n	800b3bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b3d8:	4b12      	ldr	r3, [pc, #72]	; (800b424 <xTaskResumeAll+0x130>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3de:	4b10      	ldr	r3, [pc, #64]	; (800b420 <xTaskResumeAll+0x12c>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d009      	beq.n	800b3fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ea:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <xTaskResumeAll+0x134>)
 800b3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3fa:	f7ff fbe3 	bl	800abc4 <vPortExitCritical>

	return xAlreadyYielded;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20004750 	.word	0x20004750
 800b40c:	20004728 	.word	0x20004728
 800b410:	200046e8 	.word	0x200046e8
 800b414:	20004730 	.word	0x20004730
 800b418:	2000462c 	.word	0x2000462c
 800b41c:	20004628 	.word	0x20004628
 800b420:	2000473c 	.word	0x2000473c
 800b424:	20004738 	.word	0x20004738
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b436:	4b4e      	ldr	r3, [pc, #312]	; (800b570 <xTaskIncrementTick+0x144>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 808e 	bne.w	800b55c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b440:	4b4c      	ldr	r3, [pc, #304]	; (800b574 <xTaskIncrementTick+0x148>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b448:	4a4a      	ldr	r2, [pc, #296]	; (800b574 <xTaskIncrementTick+0x148>)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d120      	bne.n	800b496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b454:	4b48      	ldr	r3, [pc, #288]	; (800b578 <xTaskIncrementTick+0x14c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <xTaskIncrementTick+0x48>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	603b      	str	r3, [r7, #0]
}
 800b470:	bf00      	nop
 800b472:	e7fe      	b.n	800b472 <xTaskIncrementTick+0x46>
 800b474:	4b40      	ldr	r3, [pc, #256]	; (800b578 <xTaskIncrementTick+0x14c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	60fb      	str	r3, [r7, #12]
 800b47a:	4b40      	ldr	r3, [pc, #256]	; (800b57c <xTaskIncrementTick+0x150>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a3e      	ldr	r2, [pc, #248]	; (800b578 <xTaskIncrementTick+0x14c>)
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	4a3e      	ldr	r2, [pc, #248]	; (800b57c <xTaskIncrementTick+0x150>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	4b3d      	ldr	r3, [pc, #244]	; (800b580 <xTaskIncrementTick+0x154>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3301      	adds	r3, #1
 800b48e:	4a3c      	ldr	r2, [pc, #240]	; (800b580 <xTaskIncrementTick+0x154>)
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	f000 f99f 	bl	800b7d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b496:	4b3b      	ldr	r3, [pc, #236]	; (800b584 <xTaskIncrementTick+0x158>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d348      	bcc.n	800b532 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a0:	4b35      	ldr	r3, [pc, #212]	; (800b578 <xTaskIncrementTick+0x14c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d104      	bne.n	800b4b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4aa:	4b36      	ldr	r3, [pc, #216]	; (800b584 <xTaskIncrementTick+0x158>)
 800b4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b0:	601a      	str	r2, [r3, #0]
					break;
 800b4b2:	e03e      	b.n	800b532 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b4:	4b30      	ldr	r3, [pc, #192]	; (800b578 <xTaskIncrementTick+0x14c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d203      	bcs.n	800b4d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4cc:	4a2d      	ldr	r2, [pc, #180]	; (800b584 <xTaskIncrementTick+0x158>)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4d2:	e02e      	b.n	800b532 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff f9e9 	bl	800a8b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	3318      	adds	r3, #24
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff f9e0 	bl	800a8b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	409a      	lsls	r2, r3
 800b4f8:	4b23      	ldr	r3, [pc, #140]	; (800b588 <xTaskIncrementTick+0x15c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	4a22      	ldr	r2, [pc, #136]	; (800b588 <xTaskIncrementTick+0x15c>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4a1f      	ldr	r2, [pc, #124]	; (800b58c <xTaskIncrementTick+0x160>)
 800b510:	441a      	add	r2, r3
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	3304      	adds	r3, #4
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f7ff f96c 	bl	800a7f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b522:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <xTaskIncrementTick+0x164>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	429a      	cmp	r2, r3
 800b52a:	d3b9      	bcc.n	800b4a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b530:	e7b6      	b.n	800b4a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b532:	4b17      	ldr	r3, [pc, #92]	; (800b590 <xTaskIncrementTick+0x164>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b538:	4914      	ldr	r1, [pc, #80]	; (800b58c <xTaskIncrementTick+0x160>)
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	440b      	add	r3, r1
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d901      	bls.n	800b54e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b54e:	4b11      	ldr	r3, [pc, #68]	; (800b594 <xTaskIncrementTick+0x168>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	617b      	str	r3, [r7, #20]
 800b55a:	e004      	b.n	800b566 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b55c:	4b0e      	ldr	r3, [pc, #56]	; (800b598 <xTaskIncrementTick+0x16c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3301      	adds	r3, #1
 800b562:	4a0d      	ldr	r2, [pc, #52]	; (800b598 <xTaskIncrementTick+0x16c>)
 800b564:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b566:	697b      	ldr	r3, [r7, #20]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20004750 	.word	0x20004750
 800b574:	2000472c 	.word	0x2000472c
 800b578:	200046e0 	.word	0x200046e0
 800b57c:	200046e4 	.word	0x200046e4
 800b580:	20004740 	.word	0x20004740
 800b584:	20004748 	.word	0x20004748
 800b588:	20004730 	.word	0x20004730
 800b58c:	2000462c 	.word	0x2000462c
 800b590:	20004628 	.word	0x20004628
 800b594:	2000473c 	.word	0x2000473c
 800b598:	20004738 	.word	0x20004738

0800b59c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5a2:	4b29      	ldr	r3, [pc, #164]	; (800b648 <vTaskSwitchContext+0xac>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5aa:	4b28      	ldr	r3, [pc, #160]	; (800b64c <vTaskSwitchContext+0xb0>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5b0:	e044      	b.n	800b63c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b5b2:	4b26      	ldr	r3, [pc, #152]	; (800b64c <vTaskSwitchContext+0xb0>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b8:	4b25      	ldr	r3, [pc, #148]	; (800b650 <vTaskSwitchContext+0xb4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	fab3 f383 	clz	r3, r3
 800b5c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b5c6:	7afb      	ldrb	r3, [r7, #11]
 800b5c8:	f1c3 031f 	rsb	r3, r3, #31
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	4921      	ldr	r1, [pc, #132]	; (800b654 <vTaskSwitchContext+0xb8>)
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10a      	bne.n	800b5f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	607b      	str	r3, [r7, #4]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <vTaskSwitchContext+0x5a>
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4a14      	ldr	r2, [pc, #80]	; (800b654 <vTaskSwitchContext+0xb8>)
 800b604:	4413      	add	r3, r2
 800b606:	613b      	str	r3, [r7, #16]
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	685a      	ldr	r2, [r3, #4]
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	605a      	str	r2, [r3, #4]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	3308      	adds	r3, #8
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d104      	bne.n	800b628 <vTaskSwitchContext+0x8c>
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	605a      	str	r2, [r3, #4]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <vTaskSwitchContext+0xbc>)
 800b630:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b632:	4b09      	ldr	r3, [pc, #36]	; (800b658 <vTaskSwitchContext+0xbc>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	334c      	adds	r3, #76	; 0x4c
 800b638:	4a08      	ldr	r2, [pc, #32]	; (800b65c <vTaskSwitchContext+0xc0>)
 800b63a:	6013      	str	r3, [r2, #0]
}
 800b63c:	bf00      	nop
 800b63e:	371c      	adds	r7, #28
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	20004750 	.word	0x20004750
 800b64c:	2000473c 	.word	0x2000473c
 800b650:	20004730 	.word	0x20004730
 800b654:	2000462c 	.word	0x2000462c
 800b658:	20004628 	.word	0x20004628
 800b65c:	20000214 	.word	0x20000214

0800b660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b668:	f000 f852 	bl	800b710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b66c:	4b06      	ldr	r3, [pc, #24]	; (800b688 <prvIdleTask+0x28>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d9f9      	bls.n	800b668 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b674:	4b05      	ldr	r3, [pc, #20]	; (800b68c <prvIdleTask+0x2c>)
 800b676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b684:	e7f0      	b.n	800b668 <prvIdleTask+0x8>
 800b686:	bf00      	nop
 800b688:	2000462c 	.word	0x2000462c
 800b68c:	e000ed04 	.word	0xe000ed04

0800b690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b696:	2300      	movs	r3, #0
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	e00c      	b.n	800b6b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <prvInitialiseTaskLists+0x60>)
 800b6a8:	4413      	add	r3, r2
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff f876 	bl	800a79c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	607b      	str	r3, [r7, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	d9ef      	bls.n	800b69c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6bc:	480d      	ldr	r0, [pc, #52]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6be:	f7ff f86d 	bl	800a79c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6c2:	480d      	ldr	r0, [pc, #52]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6c4:	f7ff f86a 	bl	800a79c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6c8:	480c      	ldr	r0, [pc, #48]	; (800b6fc <prvInitialiseTaskLists+0x6c>)
 800b6ca:	f7ff f867 	bl	800a79c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6ce:	480c      	ldr	r0, [pc, #48]	; (800b700 <prvInitialiseTaskLists+0x70>)
 800b6d0:	f7ff f864 	bl	800a79c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6d4:	480b      	ldr	r0, [pc, #44]	; (800b704 <prvInitialiseTaskLists+0x74>)
 800b6d6:	f7ff f861 	bl	800a79c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <prvInitialiseTaskLists+0x78>)
 800b6dc:	4a05      	ldr	r2, [pc, #20]	; (800b6f4 <prvInitialiseTaskLists+0x64>)
 800b6de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <prvInitialiseTaskLists+0x7c>)
 800b6e2:	4a05      	ldr	r2, [pc, #20]	; (800b6f8 <prvInitialiseTaskLists+0x68>)
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	2000462c 	.word	0x2000462c
 800b6f4:	200046b8 	.word	0x200046b8
 800b6f8:	200046cc 	.word	0x200046cc
 800b6fc:	200046e8 	.word	0x200046e8
 800b700:	200046fc 	.word	0x200046fc
 800b704:	20004714 	.word	0x20004714
 800b708:	200046e0 	.word	0x200046e0
 800b70c:	200046e4 	.word	0x200046e4

0800b710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b716:	e019      	b.n	800b74c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b718:	f7ff fa24 	bl	800ab64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71c:	4b10      	ldr	r3, [pc, #64]	; (800b760 <prvCheckTasksWaitingTermination+0x50>)
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff f8c1 	bl	800a8b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3b01      	subs	r3, #1
 800b734:	4a0b      	ldr	r2, [pc, #44]	; (800b764 <prvCheckTasksWaitingTermination+0x54>)
 800b736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	4a0a      	ldr	r2, [pc, #40]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b742:	f7ff fa3f 	bl	800abc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f810 	bl	800b76c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74c:	4b06      	ldr	r3, [pc, #24]	; (800b768 <prvCheckTasksWaitingTermination+0x58>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e1      	bne.n	800b718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	200046fc 	.word	0x200046fc
 800b764:	20004728 	.word	0x20004728
 800b768:	20004710 	.word	0x20004710

0800b76c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	334c      	adds	r3, #76	; 0x4c
 800b778:	4618      	mov	r0, r3
 800b77a:	f003 fdf9 	bl	800f370 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b784:	2b00      	cmp	r3, #0
 800b786:	d108      	bne.n	800b79a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fee7 	bl	800a560 <vPortFree>
				vPortFree( pxTCB );
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fe fee4 	bl	800a560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b798:	e018      	b.n	800b7cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d103      	bne.n	800b7ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7fe fedb 	bl	800a560 <vPortFree>
	}
 800b7aa:	e00f      	b.n	800b7cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d00a      	beq.n	800b7cc <prvDeleteTCB+0x60>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	60fb      	str	r3, [r7, #12]
}
 800b7c8:	bf00      	nop
 800b7ca:	e7fe      	b.n	800b7ca <prvDeleteTCB+0x5e>
	}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7da:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <prvResetNextTaskUnblockTime+0x38>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7e4:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <prvResetNextTaskUnblockTime+0x3c>)
 800b7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7ec:	e008      	b.n	800b800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ee:	4b07      	ldr	r3, [pc, #28]	; (800b80c <prvResetNextTaskUnblockTime+0x38>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	4a04      	ldr	r2, [pc, #16]	; (800b810 <prvResetNextTaskUnblockTime+0x3c>)
 800b7fe:	6013      	str	r3, [r2, #0]
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	200046e0 	.word	0x200046e0
 800b810:	20004748 	.word	0x20004748

0800b814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b81e:	4b29      	ldr	r3, [pc, #164]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b824:	4b28      	ldr	r3, [pc, #160]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3304      	adds	r3, #4
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff f840 	bl	800a8b0 <uxListRemove>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10b      	bne.n	800b84e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b836:	4b24      	ldr	r3, [pc, #144]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	2201      	movs	r2, #1
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	43da      	mvns	r2, r3
 800b844:	4b21      	ldr	r3, [pc, #132]	; (800b8cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4013      	ands	r3, r2
 800b84a:	4a20      	ldr	r2, [pc, #128]	; (800b8cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800b84c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d10a      	bne.n	800b86c <prvAddCurrentTaskToDelayedList+0x58>
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d007      	beq.n	800b86c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3304      	adds	r3, #4
 800b862:	4619      	mov	r1, r3
 800b864:	481a      	ldr	r0, [pc, #104]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b866:	f7fe ffc6 	bl	800a7f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b86a:	e026      	b.n	800b8ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4413      	add	r3, r2
 800b872:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b874:	4b14      	ldr	r3, [pc, #80]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d209      	bcs.n	800b898 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b884:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	4b0f      	ldr	r3, [pc, #60]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fe ffd4 	bl	800a83e <vListInsert>
}
 800b896:	e010      	b.n	800b8ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b898:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7fe ffca 	bl	800a83e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d202      	bcs.n	800b8ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b8b4:	4a09      	ldr	r2, [pc, #36]	; (800b8dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	6013      	str	r3, [r2, #0]
}
 800b8ba:	bf00      	nop
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	2000472c 	.word	0x2000472c
 800b8c8:	20004628 	.word	0x20004628
 800b8cc:	20004730 	.word	0x20004730
 800b8d0:	20004714 	.word	0x20004714
 800b8d4:	200046e4 	.word	0x200046e4
 800b8d8:	200046e0 	.word	0x200046e0
 800b8dc:	20004748 	.word	0x20004748

0800b8e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b8ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b8f0:	f002 fca4 	bl	800e23c <USBD_static_malloc>
 800b8f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	32b0      	adds	r2, #176	; 0xb0
 800b906:	2100      	movs	r1, #0
 800b908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b90c:	2302      	movs	r3, #2
 800b90e:	e0d4      	b.n	800baba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b910:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b914:	2100      	movs	r1, #0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f002 fe05 	bl	800e526 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	32b0      	adds	r2, #176	; 0xb0
 800b926:	68f9      	ldr	r1, [r7, #12]
 800b928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	32b0      	adds	r2, #176	; 0xb0
 800b936:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7c1b      	ldrb	r3, [r3, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d138      	bne.n	800b9ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b948:	4b5e      	ldr	r3, [pc, #376]	; (800bac4 <USBD_CDC_Init+0x1e4>)
 800b94a:	7819      	ldrb	r1, [r3, #0]
 800b94c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b950:	2202      	movs	r2, #2
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f002 fb4f 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b958:	4b5a      	ldr	r3, [pc, #360]	; (800bac4 <USBD_CDC_Init+0x1e4>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	f003 020f 	and.w	r2, r3, #15
 800b960:	6879      	ldr	r1, [r7, #4]
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	440b      	add	r3, r1
 800b96c:	3324      	adds	r3, #36	; 0x24
 800b96e:	2201      	movs	r2, #1
 800b970:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b972:	4b55      	ldr	r3, [pc, #340]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800b974:	7819      	ldrb	r1, [r3, #0]
 800b976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b97a:	2202      	movs	r2, #2
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f002 fb3a 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b982:	4b51      	ldr	r3, [pc, #324]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	f003 020f 	and.w	r2, r3, #15
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	4613      	mov	r3, r2
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	440b      	add	r3, r1
 800b996:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b99a:	2201      	movs	r2, #1
 800b99c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b99e:	4b4b      	ldr	r3, [pc, #300]	; (800bacc <USBD_CDC_Init+0x1ec>)
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	f003 020f 	and.w	r2, r3, #15
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	440b      	add	r3, r1
 800b9b2:	3326      	adds	r3, #38	; 0x26
 800b9b4:	2210      	movs	r2, #16
 800b9b6:	801a      	strh	r2, [r3, #0]
 800b9b8:	e035      	b.n	800ba26 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9ba:	4b42      	ldr	r3, [pc, #264]	; (800bac4 <USBD_CDC_Init+0x1e4>)
 800b9bc:	7819      	ldrb	r1, [r3, #0]
 800b9be:	2340      	movs	r3, #64	; 0x40
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f002 fb17 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b9c8:	4b3e      	ldr	r3, [pc, #248]	; (800bac4 <USBD_CDC_Init+0x1e4>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	f003 020f 	and.w	r2, r3, #15
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	440b      	add	r3, r1
 800b9dc:	3324      	adds	r3, #36	; 0x24
 800b9de:	2201      	movs	r2, #1
 800b9e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9e2:	4b39      	ldr	r3, [pc, #228]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800b9e4:	7819      	ldrb	r1, [r3, #0]
 800b9e6:	2340      	movs	r3, #64	; 0x40
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f002 fb03 	bl	800dff6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b9f0:	4b35      	ldr	r3, [pc, #212]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 020f 	and.w	r2, r3, #15
 800b9f8:	6879      	ldr	r1, [r7, #4]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	440b      	add	r3, r1
 800ba04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba08:	2201      	movs	r2, #1
 800ba0a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ba0c:	4b2f      	ldr	r3, [pc, #188]	; (800bacc <USBD_CDC_Init+0x1ec>)
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 020f 	and.w	r2, r3, #15
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	4613      	mov	r3, r2
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	440b      	add	r3, r1
 800ba20:	3326      	adds	r3, #38	; 0x26
 800ba22:	2210      	movs	r2, #16
 800ba24:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba26:	4b29      	ldr	r3, [pc, #164]	; (800bacc <USBD_CDC_Init+0x1ec>)
 800ba28:	7819      	ldrb	r1, [r3, #0]
 800ba2a:	2308      	movs	r3, #8
 800ba2c:	2203      	movs	r2, #3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f002 fae1 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ba34:	4b25      	ldr	r3, [pc, #148]	; (800bacc <USBD_CDC_Init+0x1ec>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	f003 020f 	and.w	r2, r3, #15
 800ba3c:	6879      	ldr	r1, [r7, #4]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	4413      	add	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	440b      	add	r3, r1
 800ba48:	3324      	adds	r3, #36	; 0x24
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	33b0      	adds	r3, #176	; 0xb0
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ba84:	2302      	movs	r3, #2
 800ba86:	e018      	b.n	800baba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7c1b      	ldrb	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba90:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800ba92:	7819      	ldrb	r1, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f002 fb98 	bl	800e1d4 <USBD_LL_PrepareReceive>
 800baa4:	e008      	b.n	800bab8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800baa6:	4b08      	ldr	r3, [pc, #32]	; (800bac8 <USBD_CDC_Init+0x1e8>)
 800baa8:	7819      	ldrb	r1, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f002 fb8e 	bl	800e1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	200001ab 	.word	0x200001ab
 800bac8:	200001ac 	.word	0x200001ac
 800bacc:	200001ad 	.word	0x200001ad

0800bad0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800badc:	4b3a      	ldr	r3, [pc, #232]	; (800bbc8 <USBD_CDC_DeInit+0xf8>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f002 faad 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bae8:	4b37      	ldr	r3, [pc, #220]	; (800bbc8 <USBD_CDC_DeInit+0xf8>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f003 020f 	and.w	r2, r3, #15
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	440b      	add	r3, r1
 800bafc:	3324      	adds	r3, #36	; 0x24
 800bafe:	2200      	movs	r2, #0
 800bb00:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bb02:	4b32      	ldr	r3, [pc, #200]	; (800bbcc <USBD_CDC_DeInit+0xfc>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f002 fa9a 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bb0e:	4b2f      	ldr	r3, [pc, #188]	; (800bbcc <USBD_CDC_DeInit+0xfc>)
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	f003 020f 	and.w	r2, r3, #15
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb26:	2200      	movs	r2, #0
 800bb28:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bb2a:	4b29      	ldr	r3, [pc, #164]	; (800bbd0 <USBD_CDC_DeInit+0x100>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f002 fa86 	bl	800e042 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bb36:	4b26      	ldr	r3, [pc, #152]	; (800bbd0 <USBD_CDC_DeInit+0x100>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	f003 020f 	and.w	r2, r3, #15
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	440b      	add	r3, r1
 800bb4a:	3324      	adds	r3, #36	; 0x24
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bb50:	4b1f      	ldr	r3, [pc, #124]	; (800bbd0 <USBD_CDC_DeInit+0x100>)
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f003 020f 	and.w	r2, r3, #15
 800bb58:	6879      	ldr	r1, [r7, #4]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	440b      	add	r3, r1
 800bb64:	3326      	adds	r3, #38	; 0x26
 800bb66:	2200      	movs	r2, #0
 800bb68:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	32b0      	adds	r2, #176	; 0xb0
 800bb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d01f      	beq.n	800bbbc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	33b0      	adds	r3, #176	; 0xb0
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	32b0      	adds	r2, #176	; 0xb0
 800bb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f002 fb5a 	bl	800e258 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	32b0      	adds	r2, #176	; 0xb0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200001ab 	.word	0x200001ab
 800bbcc:	200001ac 	.word	0x200001ac
 800bbd0:	200001ad 	.word	0x200001ad

0800bbd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	32b0      	adds	r2, #176	; 0xb0
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e0bf      	b.n	800bd84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d050      	beq.n	800bcb2 <USBD_CDC_Setup+0xde>
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	f040 80af 	bne.w	800bd74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	88db      	ldrh	r3, [r3, #6]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d03a      	beq.n	800bc94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	b25b      	sxtb	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	da1b      	bge.n	800bc60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	33b0      	adds	r3, #176	; 0xb0
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bc3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	88d2      	ldrh	r2, [r2, #6]
 800bc44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	88db      	ldrh	r3, [r3, #6]
 800bc4a:	2b07      	cmp	r3, #7
 800bc4c:	bf28      	it	cs
 800bc4e:	2307      	movcs	r3, #7
 800bc50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	89fa      	ldrh	r2, [r7, #14]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fd89 	bl	800d770 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bc5e:	e090      	b.n	800bd82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	785a      	ldrb	r2, [r3, #1]
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	88db      	ldrh	r3, [r3, #6]
 800bc6e:	2b3f      	cmp	r3, #63	; 0x3f
 800bc70:	d803      	bhi.n	800bc7a <USBD_CDC_Setup+0xa6>
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	88db      	ldrh	r3, [r3, #6]
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	e000      	b.n	800bc7c <USBD_CDC_Setup+0xa8>
 800bc7a:	2240      	movs	r2, #64	; 0x40
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bc82:	6939      	ldr	r1, [r7, #16]
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f001 fd9b 	bl	800d7c8 <USBD_CtlPrepareRx>
      break;
 800bc92:	e076      	b.n	800bd82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	33b0      	adds	r3, #176	; 0xb0
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	7850      	ldrb	r0, [r2, #1]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	4798      	blx	r3
      break;
 800bcb0:	e067      	b.n	800bd82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	785b      	ldrb	r3, [r3, #1]
 800bcb6:	2b0b      	cmp	r3, #11
 800bcb8:	d851      	bhi.n	800bd5e <USBD_CDC_Setup+0x18a>
 800bcba:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <USBD_CDC_Setup+0xec>)
 800bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc0:	0800bcf1 	.word	0x0800bcf1
 800bcc4:	0800bd6d 	.word	0x0800bd6d
 800bcc8:	0800bd5f 	.word	0x0800bd5f
 800bccc:	0800bd5f 	.word	0x0800bd5f
 800bcd0:	0800bd5f 	.word	0x0800bd5f
 800bcd4:	0800bd5f 	.word	0x0800bd5f
 800bcd8:	0800bd5f 	.word	0x0800bd5f
 800bcdc:	0800bd5f 	.word	0x0800bd5f
 800bce0:	0800bd5f 	.word	0x0800bd5f
 800bce4:	0800bd5f 	.word	0x0800bd5f
 800bce8:	0800bd1b 	.word	0x0800bd1b
 800bcec:	0800bd45 	.word	0x0800bd45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b03      	cmp	r3, #3
 800bcfa:	d107      	bne.n	800bd0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bcfc:	f107 030a 	add.w	r3, r7, #10
 800bd00:	2202      	movs	r2, #2
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 fd33 	bl	800d770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd0a:	e032      	b.n	800bd72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f001 fcbd 	bl	800d68e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd14:	2303      	movs	r3, #3
 800bd16:	75fb      	strb	r3, [r7, #23]
          break;
 800bd18:	e02b      	b.n	800bd72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d107      	bne.n	800bd36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd26:	f107 030d 	add.w	r3, r7, #13
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 fd1e 	bl	800d770 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd34:	e01d      	b.n	800bd72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f001 fca8 	bl	800d68e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	75fb      	strb	r3, [r7, #23]
          break;
 800bd42:	e016      	b.n	800bd72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d00f      	beq.n	800bd70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fc9b 	bl	800d68e <USBD_CtlError>
            ret = USBD_FAIL;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bd5c:	e008      	b.n	800bd70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f001 fc94 	bl	800d68e <USBD_CtlError>
          ret = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	75fb      	strb	r3, [r7, #23]
          break;
 800bd6a:	e002      	b.n	800bd72 <USBD_CDC_Setup+0x19e>
          break;
 800bd6c:	bf00      	nop
 800bd6e:	e008      	b.n	800bd82 <USBD_CDC_Setup+0x1ae>
          break;
 800bd70:	bf00      	nop
      }
      break;
 800bd72:	e006      	b.n	800bd82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bd74:	6839      	ldr	r1, [r7, #0]
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 fc89 	bl	800d68e <USBD_CtlError>
      ret = USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd80:	bf00      	nop
  }

  return (uint8_t)ret;
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3718      	adds	r7, #24
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	32b0      	adds	r2, #176	; 0xb0
 800bdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e065      	b.n	800be82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	32b0      	adds	r2, #176	; 0xb0
 800bdc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	f003 020f 	and.w	r2, r3, #15
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	440b      	add	r3, r1
 800bdd8:	3318      	adds	r3, #24
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d02f      	beq.n	800be40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3318      	adds	r3, #24
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	78fb      	ldrb	r3, [r7, #3]
 800bdf8:	f003 010f 	and.w	r1, r3, #15
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	460b      	mov	r3, r1
 800be00:	00db      	lsls	r3, r3, #3
 800be02:	440b      	add	r3, r1
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4403      	add	r3, r0
 800be08:	3348      	adds	r3, #72	; 0x48
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	fbb2 f1f3 	udiv	r1, r2, r3
 800be10:	fb01 f303 	mul.w	r3, r1, r3
 800be14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be16:	2b00      	cmp	r3, #0
 800be18:	d112      	bne.n	800be40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	f003 020f 	and.w	r2, r3, #15
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3318      	adds	r3, #24
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be32:	78f9      	ldrb	r1, [r7, #3]
 800be34:	2300      	movs	r3, #0
 800be36:	2200      	movs	r2, #0
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f002 f9aa 	bl	800e192 <USBD_LL_Transmit>
 800be3e:	e01f      	b.n	800be80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	33b0      	adds	r3, #176	; 0xb0
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d010      	beq.n	800be80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	33b0      	adds	r3, #176	; 0xb0
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800be7c:	78fa      	ldrb	r2, [r7, #3]
 800be7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	32b0      	adds	r2, #176	; 0xb0
 800bea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	32b0      	adds	r2, #176	; 0xb0
 800beb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800beb8:	2303      	movs	r3, #3
 800beba:	e01a      	b.n	800bef2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f002 f9a8 	bl	800e216 <USBD_LL_GetRxDataSize>
 800bec6:	4602      	mov	r2, r0
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	33b0      	adds	r3, #176	; 0xb0
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800beec:	4611      	mov	r1, r2
 800beee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	32b0      	adds	r2, #176	; 0xb0
 800bf0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e025      	b.n	800bf68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	33b0      	adds	r3, #176	; 0xb0
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01a      	beq.n	800bf66 <USBD_CDC_EP0_RxReady+0x6c>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf36:	2bff      	cmp	r3, #255	; 0xff
 800bf38:	d015      	beq.n	800bf66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	33b0      	adds	r3, #176	; 0xb0
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bf52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bf5a:	b292      	uxth	r2, r2
 800bf5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	22ff      	movs	r2, #255	; 0xff
 800bf62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf78:	2182      	movs	r1, #130	; 0x82
 800bf7a:	4818      	ldr	r0, [pc, #96]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf7c:	f000 fd4f 	bl	800ca1e <USBD_GetEpDesc>
 800bf80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf82:	2101      	movs	r1, #1
 800bf84:	4815      	ldr	r0, [pc, #84]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf86:	f000 fd4a 	bl	800ca1e <USBD_GetEpDesc>
 800bf8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf8c:	2181      	movs	r1, #129	; 0x81
 800bf8e:	4813      	ldr	r0, [pc, #76]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bf90:	f000 fd45 	bl	800ca1e <USBD_GetEpDesc>
 800bf94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d006      	beq.n	800bfb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfb0:	711a      	strb	r2, [r3, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d006      	beq.n	800bfca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfc4:	711a      	strb	r2, [r3, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2243      	movs	r2, #67	; 0x43
 800bfce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bfd0:	4b02      	ldr	r3, [pc, #8]	; (800bfdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	20000168 	.word	0x20000168

0800bfe0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfe8:	2182      	movs	r1, #130	; 0x82
 800bfea:	4818      	ldr	r0, [pc, #96]	; (800c04c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bfec:	f000 fd17 	bl	800ca1e <USBD_GetEpDesc>
 800bff0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bff2:	2101      	movs	r1, #1
 800bff4:	4815      	ldr	r0, [pc, #84]	; (800c04c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bff6:	f000 fd12 	bl	800ca1e <USBD_GetEpDesc>
 800bffa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bffc:	2181      	movs	r1, #129	; 0x81
 800bffe:	4813      	ldr	r0, [pc, #76]	; (800c04c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c000:	f000 fd0d 	bl	800ca1e <USBD_GetEpDesc>
 800c004:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2210      	movs	r2, #16
 800c010:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	2200      	movs	r2, #0
 800c01c:	711a      	strb	r2, [r3, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f042 0202 	orr.w	r2, r2, #2
 800c024:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d006      	beq.n	800c03a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	711a      	strb	r2, [r3, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f042 0202 	orr.w	r2, r2, #2
 800c038:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2243      	movs	r2, #67	; 0x43
 800c03e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	20000168 	.word	0x20000168

0800c050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c058:	2182      	movs	r1, #130	; 0x82
 800c05a:	4818      	ldr	r0, [pc, #96]	; (800c0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c05c:	f000 fcdf 	bl	800ca1e <USBD_GetEpDesc>
 800c060:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c062:	2101      	movs	r1, #1
 800c064:	4815      	ldr	r0, [pc, #84]	; (800c0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c066:	f000 fcda 	bl	800ca1e <USBD_GetEpDesc>
 800c06a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c06c:	2181      	movs	r1, #129	; 0x81
 800c06e:	4813      	ldr	r0, [pc, #76]	; (800c0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c070:	f000 fcd5 	bl	800ca1e <USBD_GetEpDesc>
 800c074:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d002      	beq.n	800c082 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2210      	movs	r2, #16
 800c080:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d006      	beq.n	800c096 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c090:	711a      	strb	r2, [r3, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d006      	beq.n	800c0aa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0a4:	711a      	strb	r2, [r3, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2243      	movs	r2, #67	; 0x43
 800c0ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0b0:	4b02      	ldr	r3, [pc, #8]	; (800c0bc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000168 	.word	0x20000168

0800c0c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c0ce:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	20000124 	.word	0x20000124

0800c0e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e009      	b.n	800c108 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	33b0      	adds	r3, #176	; 0xb0
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	60f8      	str	r0, [r7, #12]
 800c11c:	60b9      	str	r1, [r7, #8]
 800c11e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	32b0      	adds	r2, #176	; 0xb0
 800c12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c136:	2303      	movs	r3, #3
 800c138:	e008      	b.n	800c14c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	371c      	adds	r7, #28
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	32b0      	adds	r2, #176	; 0xb0
 800c16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c170:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c178:	2303      	movs	r3, #3
 800c17a:	e004      	b.n	800c186 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	683a      	ldr	r2, [r7, #0]
 800c180:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
	...

0800c194 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	32b0      	adds	r2, #176	; 0xb0
 800c1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	32b0      	adds	r2, #176	; 0xb0
 800c1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e025      	b.n	800c212 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11f      	bne.n	800c210 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c1d8:	4b10      	ldr	r3, [pc, #64]	; (800c21c <USBD_CDC_TransmitPacket+0x88>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 020f 	and.w	r2, r3, #15
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4403      	add	r3, r0
 800c1f2:	3318      	adds	r3, #24
 800c1f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c1f6:	4b09      	ldr	r3, [pc, #36]	; (800c21c <USBD_CDC_TransmitPacket+0x88>)
 800c1f8:	7819      	ldrb	r1, [r3, #0]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f001 ffc3 	bl	800e192 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c210:	7bfb      	ldrb	r3, [r7, #15]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3710      	adds	r7, #16
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	200001ab 	.word	0x200001ab

0800c220 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32b0      	adds	r2, #176	; 0xb0
 800c232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c236:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	32b0      	adds	r2, #176	; 0xb0
 800c242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e018      	b.n	800c280 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7c1b      	ldrb	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <USBD_CDC_ReceivePacket+0x68>)
 800c258:	7819      	ldrb	r1, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c260:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 ffb5 	bl	800e1d4 <USBD_LL_PrepareReceive>
 800c26a:	e008      	b.n	800c27e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <USBD_CDC_ReceivePacket+0x68>)
 800c26e:	7819      	ldrb	r1, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c276:	2340      	movs	r3, #64	; 0x40
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f001 ffab 	bl	800e1d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	200001ac 	.word	0x200001ac

0800c28c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	4613      	mov	r3, r2
 800c298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e01f      	b.n	800c2e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	79fa      	ldrb	r2, [r7, #7]
 800c2d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f001 fe1f 	bl	800df1c <USBD_LL_Init>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c300:	2303      	movs	r3, #3
 800c302:	e025      	b.n	800c350 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	32ae      	adds	r2, #174	; 0xae
 800c316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00f      	beq.n	800c340 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	32ae      	adds	r2, #174	; 0xae
 800c32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c330:	f107 020e 	add.w	r2, r7, #14
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
 800c338:	4602      	mov	r2, r0
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 fe2d 	bl	800dfc0 <USBD_LL_Start>
 800c366:	4603      	mov	r3, r0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c378:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b084      	sub	sp, #16
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	460b      	mov	r3, r1
 800c390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	78fa      	ldrb	r2, [r7, #3]
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	4798      	blx	r3
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	78fa      	ldrb	r2, [r7, #3]
 800c3d8:	4611      	mov	r1, r2
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	4798      	blx	r3
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d001      	beq.n	800c3e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	f001 f908 	bl	800d61a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c418:	461a      	mov	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c426:	f003 031f 	and.w	r3, r3, #31
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d01a      	beq.n	800c464 <USBD_LL_SetupStage+0x72>
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d822      	bhi.n	800c478 <USBD_LL_SetupStage+0x86>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d002      	beq.n	800c43c <USBD_LL_SetupStage+0x4a>
 800c436:	2b01      	cmp	r3, #1
 800c438:	d00a      	beq.n	800c450 <USBD_LL_SetupStage+0x5e>
 800c43a:	e01d      	b.n	800c478 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c442:	4619      	mov	r1, r3
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fb5f 	bl	800cb08 <USBD_StdDevReq>
 800c44a:	4603      	mov	r3, r0
 800c44c:	73fb      	strb	r3, [r7, #15]
      break;
 800c44e:	e020      	b.n	800c492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fbc7 	bl	800cbec <USBD_StdItfReq>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
      break;
 800c462:	e016      	b.n	800c492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fc29 	bl	800ccc4 <USBD_StdEPReq>
 800c472:	4603      	mov	r3, r0
 800c474:	73fb      	strb	r3, [r7, #15]
      break;
 800c476:	e00c      	b.n	800c492 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c47e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c482:	b2db      	uxtb	r3, r3
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fdfa 	bl	800e080 <USBD_LL_StallEP>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]
      break;
 800c490:	bf00      	nop
  }

  return ret;
 800c492:	7bfb      	ldrb	r3, [r7, #15]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d16e      	bne.n	800c592 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c4ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	f040 8098 	bne.w	800c5f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d913      	bls.n	800c4fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	689a      	ldr	r2, [r3, #8]
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	1ad2      	subs	r2, r2, r3
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	bf28      	it	cs
 800c4ee:	4613      	movcs	r3, r2
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f001 f984 	bl	800d802 <USBD_CtlContinueRx>
 800c4fa:	e07d      	b.n	800c5f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c502:	f003 031f 	and.w	r3, r3, #31
 800c506:	2b02      	cmp	r3, #2
 800c508:	d014      	beq.n	800c534 <USBD_LL_DataOutStage+0x98>
 800c50a:	2b02      	cmp	r3, #2
 800c50c:	d81d      	bhi.n	800c54a <USBD_LL_DataOutStage+0xae>
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d002      	beq.n	800c518 <USBD_LL_DataOutStage+0x7c>
 800c512:	2b01      	cmp	r3, #1
 800c514:	d003      	beq.n	800c51e <USBD_LL_DataOutStage+0x82>
 800c516:	e018      	b.n	800c54a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	75bb      	strb	r3, [r7, #22]
            break;
 800c51c:	e018      	b.n	800c550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c524:	b2db      	uxtb	r3, r3
 800c526:	4619      	mov	r1, r3
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 fa5e 	bl	800c9ea <USBD_CoreFindIF>
 800c52e:	4603      	mov	r3, r0
 800c530:	75bb      	strb	r3, [r7, #22]
            break;
 800c532:	e00d      	b.n	800c550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	4619      	mov	r1, r3
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fa60 	bl	800ca04 <USBD_CoreFindEP>
 800c544:	4603      	mov	r3, r0
 800c546:	75bb      	strb	r3, [r7, #22]
            break;
 800c548:	e002      	b.n	800c550 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75bb      	strb	r3, [r7, #22]
            break;
 800c54e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c550:	7dbb      	ldrb	r3, [r7, #22]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d119      	bne.n	800c58a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d113      	bne.n	800c58a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c562:	7dba      	ldrb	r2, [r7, #22]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	32ae      	adds	r2, #174	; 0xae
 800c568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c572:	7dba      	ldrb	r2, [r7, #22]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c57a:	7dba      	ldrb	r2, [r7, #22]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	32ae      	adds	r2, #174	; 0xae
 800c580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f001 f94a 	bl	800d824 <USBD_CtlSendStatus>
 800c590:	e032      	b.n	800c5f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	4619      	mov	r1, r3
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 fa31 	bl	800ca04 <USBD_CoreFindEP>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5a6:	7dbb      	ldrb	r3, [r7, #22]
 800c5a8:	2bff      	cmp	r3, #255	; 0xff
 800c5aa:	d025      	beq.n	800c5f8 <USBD_LL_DataOutStage+0x15c>
 800c5ac:	7dbb      	ldrb	r3, [r7, #22]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d122      	bne.n	800c5f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d117      	bne.n	800c5ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c5be:	7dba      	ldrb	r2, [r7, #22]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	32ae      	adds	r2, #174	; 0xae
 800c5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00f      	beq.n	800c5ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c5ce:	7dba      	ldrb	r2, [r7, #22]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c5d6:	7dba      	ldrb	r2, [r7, #22]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	32ae      	adds	r2, #174	; 0xae
 800c5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	7afa      	ldrb	r2, [r7, #11]
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	4798      	blx	r3
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c5f4:	7dfb      	ldrb	r3, [r7, #23]
 800c5f6:	e000      	b.n	800c5fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3718      	adds	r7, #24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b086      	sub	sp, #24
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	460b      	mov	r3, r1
 800c60c:	607a      	str	r2, [r7, #4]
 800c60e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c610:	7afb      	ldrb	r3, [r7, #11]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d16f      	bne.n	800c6f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3314      	adds	r3, #20
 800c61a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c622:	2b02      	cmp	r3, #2
 800c624:	d15a      	bne.n	800c6dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	689a      	ldr	r2, [r3, #8]
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d914      	bls.n	800c65c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	689a      	ldr	r2, [r3, #8]
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	1ad2      	subs	r2, r2, r3
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	461a      	mov	r2, r3
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f001 f8ac 	bl	800d7a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c64e:	2300      	movs	r3, #0
 800c650:	2200      	movs	r2, #0
 800c652:	2100      	movs	r1, #0
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f001 fdbd 	bl	800e1d4 <USBD_LL_PrepareReceive>
 800c65a:	e03f      	b.n	800c6dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	d11c      	bne.n	800c6a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c670:	429a      	cmp	r2, r3
 800c672:	d316      	bcc.n	800c6a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c67e:	429a      	cmp	r2, r3
 800c680:	d20f      	bcs.n	800c6a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c682:	2200      	movs	r2, #0
 800c684:	2100      	movs	r1, #0
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f001 f88d 	bl	800d7a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c694:	2300      	movs	r3, #0
 800c696:	2200      	movs	r2, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f001 fd9a 	bl	800e1d4 <USBD_LL_PrepareReceive>
 800c6a0:	e01c      	b.n	800c6dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d10f      	bne.n	800c6ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d009      	beq.n	800c6ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6ce:	2180      	movs	r1, #128	; 0x80
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f001 fcd5 	bl	800e080 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f001 f8b7 	bl	800d84a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d03a      	beq.n	800c75c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7ff fe42 	bl	800c370 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c6f4:	e032      	b.n	800c75c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c6f6:	7afb      	ldrb	r3, [r7, #11]
 800c6f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	4619      	mov	r1, r3
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f000 f97f 	bl	800ca04 <USBD_CoreFindEP>
 800c706:	4603      	mov	r3, r0
 800c708:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c70a:	7dfb      	ldrb	r3, [r7, #23]
 800c70c:	2bff      	cmp	r3, #255	; 0xff
 800c70e:	d025      	beq.n	800c75c <USBD_LL_DataInStage+0x15a>
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d122      	bne.n	800c75c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d11c      	bne.n	800c75c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c722:	7dfa      	ldrb	r2, [r7, #23]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	32ae      	adds	r2, #174	; 0xae
 800c728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d014      	beq.n	800c75c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c732:	7dfa      	ldrb	r2, [r7, #23]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c73a:	7dfa      	ldrb	r2, [r7, #23]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	32ae      	adds	r2, #174	; 0xae
 800c740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	7afa      	ldrb	r2, [r7, #11]
 800c748:	4611      	mov	r1, r2
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	4798      	blx	r3
 800c74e:	4603      	mov	r3, r0
 800c750:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c752:	7dbb      	ldrb	r3, [r7, #22]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c758:	7dbb      	ldrb	r3, [r7, #22]
 800c75a:	e000      	b.n	800c75e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d014      	beq.n	800c7cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	6852      	ldr	r2, [r2, #4]
 800c7ba:	b2d2      	uxtb	r2, r2
 800c7bc:	4611      	mov	r1, r2
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	4798      	blx	r3
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d001      	beq.n	800c7cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fc0f 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2240      	movs	r2, #64	; 0x40
 800c7e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7e8:	2340      	movs	r3, #64	; 0x40
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2180      	movs	r1, #128	; 0x80
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f001 fc01 	bl	800dff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2240      	movs	r2, #64	; 0x40
 800c7fe:	621a      	str	r2, [r3, #32]

  return ret;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
 800c812:	460b      	mov	r3, r1
 800c814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	78fa      	ldrb	r2, [r7, #3]
 800c81a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	370c      	adds	r7, #12
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr

0800c82a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2204      	movs	r2, #4
 800c844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c856:	b480      	push	{r7}
 800c858:	b083      	sub	sp, #12
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b04      	cmp	r3, #4
 800c868:	d106      	bne.n	800c878 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c870:	b2da      	uxtb	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b082      	sub	sp, #8
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c894:	b2db      	uxtb	r3, r3
 800c896:	2b03      	cmp	r3, #3
 800c898:	d110      	bne.n	800c8bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8aa:	69db      	ldr	r3, [r3, #28]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	32ae      	adds	r2, #174	; 0xae
 800c8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e01c      	b.n	800c922 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d115      	bne.n	800c920 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	32ae      	adds	r2, #174	; 0xae
 800c8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c902:	6a1b      	ldr	r3, [r3, #32]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00b      	beq.n	800c920 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	32ae      	adds	r2, #174	; 0xae
 800c912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	4611      	mov	r1, r2
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	32ae      	adds	r2, #174	; 0xae
 800c940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c948:	2303      	movs	r3, #3
 800c94a:	e01c      	b.n	800c986 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b03      	cmp	r3, #3
 800c956:	d115      	bne.n	800c984 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	32ae      	adds	r2, #174	; 0xae
 800c962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00b      	beq.n	800c984 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	32ae      	adds	r2, #174	; 0xae
 800c976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	4611      	mov	r1, r2
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00e      	beq.n	800c9e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6852      	ldr	r2, [r2, #4]
 800c9ce:	b2d2      	uxtb	r2, r2
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	4798      	blx	r3
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3710      	adds	r7, #16
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c9f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b086      	sub	sp, #24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	885b      	ldrh	r3, [r3, #2]
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d920      	bls.n	800ca88 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ca4e:	e013      	b.n	800ca78 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ca50:	f107 030a 	add.w	r3, r7, #10
 800ca54:	4619      	mov	r1, r3
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f000 f81b 	bl	800ca92 <USBD_GetNextDesc>
 800ca5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	785b      	ldrb	r3, [r3, #1]
 800ca62:	2b05      	cmp	r3, #5
 800ca64:	d108      	bne.n	800ca78 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	789b      	ldrb	r3, [r3, #2]
 800ca6e:	78fa      	ldrb	r2, [r7, #3]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d008      	beq.n	800ca86 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ca74:	2300      	movs	r3, #0
 800ca76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	885b      	ldrh	r3, [r3, #2]
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	897b      	ldrh	r3, [r7, #10]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d8e5      	bhi.n	800ca50 <USBD_GetEpDesc+0x32>
 800ca84:	e000      	b.n	800ca88 <USBD_GetEpDesc+0x6a>
          break;
 800ca86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ca88:	693b      	ldr	r3, [r7, #16]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b085      	sub	sp, #20
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	881a      	ldrh	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4413      	add	r3, r2
 800caac:	b29a      	uxth	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4413      	add	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cabe:	68fb      	ldr	r3, [r7, #12]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cacc:	b480      	push	{r7}
 800cace:	b087      	sub	sp, #28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	3301      	adds	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800caea:	8a3b      	ldrh	r3, [r7, #16]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	b21a      	sxth	r2, r3
 800caf0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	b21b      	sxth	r3, r3
 800caf8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cafa:	89fb      	ldrh	r3, [r7, #14]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb1e:	2b40      	cmp	r3, #64	; 0x40
 800cb20:	d005      	beq.n	800cb2e <USBD_StdDevReq+0x26>
 800cb22:	2b40      	cmp	r3, #64	; 0x40
 800cb24:	d857      	bhi.n	800cbd6 <USBD_StdDevReq+0xce>
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00f      	beq.n	800cb4a <USBD_StdDevReq+0x42>
 800cb2a:	2b20      	cmp	r3, #32
 800cb2c:	d153      	bne.n	800cbd6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	32ae      	adds	r2, #174	; 0xae
 800cb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	4798      	blx	r3
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
      break;
 800cb48:	e04a      	b.n	800cbe0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b09      	cmp	r3, #9
 800cb50:	d83b      	bhi.n	800cbca <USBD_StdDevReq+0xc2>
 800cb52:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <USBD_StdDevReq+0x50>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cbc1 	.word	0x0800cbc1
 800cb60:	0800cbcb 	.word	0x0800cbcb
 800cb64:	0800cbb7 	.word	0x0800cbb7
 800cb68:	0800cbcb 	.word	0x0800cbcb
 800cb6c:	0800cb8b 	.word	0x0800cb8b
 800cb70:	0800cb81 	.word	0x0800cb81
 800cb74:	0800cbcb 	.word	0x0800cbcb
 800cb78:	0800cba3 	.word	0x0800cba3
 800cb7c:	0800cb95 	.word	0x0800cb95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fa3c 	bl	800d000 <USBD_GetDescriptor>
          break;
 800cb88:	e024      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb8a:	6839      	ldr	r1, [r7, #0]
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 fba1 	bl	800d2d4 <USBD_SetAddress>
          break;
 800cb92:	e01f      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb94:	6839      	ldr	r1, [r7, #0]
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fbe0 	bl	800d35c <USBD_SetConfig>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	73fb      	strb	r3, [r7, #15]
          break;
 800cba0:	e018      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 fc83 	bl	800d4b0 <USBD_GetConfig>
          break;
 800cbaa:	e013      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cbac:	6839      	ldr	r1, [r7, #0]
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fcb4 	bl	800d51c <USBD_GetStatus>
          break;
 800cbb4:	e00e      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f000 fce3 	bl	800d584 <USBD_SetFeature>
          break;
 800cbbe:	e009      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fd07 	bl	800d5d6 <USBD_ClrFeature>
          break;
 800cbc8:	e004      	b.n	800cbd4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 fd5e 	bl	800d68e <USBD_CtlError>
          break;
 800cbd2:	bf00      	nop
      }
      break;
 800cbd4:	e004      	b.n	800cbe0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 fd58 	bl	800d68e <USBD_CtlError>
      break;
 800cbde:	bf00      	nop
  }

  return ret;
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop

0800cbec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc02:	2b40      	cmp	r3, #64	; 0x40
 800cc04:	d005      	beq.n	800cc12 <USBD_StdItfReq+0x26>
 800cc06:	2b40      	cmp	r3, #64	; 0x40
 800cc08:	d852      	bhi.n	800ccb0 <USBD_StdItfReq+0xc4>
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d001      	beq.n	800cc12 <USBD_StdItfReq+0x26>
 800cc0e:	2b20      	cmp	r3, #32
 800cc10:	d14e      	bne.n	800ccb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d840      	bhi.n	800cca2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	889b      	ldrh	r3, [r3, #4]
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d836      	bhi.n	800cc98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	889b      	ldrh	r3, [r3, #4]
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fed9 	bl	800c9ea <USBD_CoreFindIF>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc3c:	7bbb      	ldrb	r3, [r7, #14]
 800cc3e:	2bff      	cmp	r3, #255	; 0xff
 800cc40:	d01d      	beq.n	800cc7e <USBD_StdItfReq+0x92>
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11a      	bne.n	800cc7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cc48:	7bba      	ldrb	r2, [r7, #14]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	32ae      	adds	r2, #174	; 0xae
 800cc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc52:	689b      	ldr	r3, [r3, #8]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00f      	beq.n	800cc78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cc58:	7bba      	ldrb	r2, [r7, #14]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc60:	7bba      	ldrb	r2, [r7, #14]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	32ae      	adds	r2, #174	; 0xae
 800cc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc76:	e004      	b.n	800cc82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cc7c:	e001      	b.n	800cc82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	88db      	ldrh	r3, [r3, #6]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d110      	bne.n	800ccac <USBD_StdItfReq+0xc0>
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10d      	bne.n	800ccac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fdc7 	bl	800d824 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc96:	e009      	b.n	800ccac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fcf7 	bl	800d68e <USBD_CtlError>
          break;
 800cca0:	e004      	b.n	800ccac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fcf2 	bl	800d68e <USBD_CtlError>
          break;
 800ccaa:	e000      	b.n	800ccae <USBD_StdItfReq+0xc2>
          break;
 800ccac:	bf00      	nop
      }
      break;
 800ccae:	e004      	b.n	800ccba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fceb 	bl	800d68e <USBD_CtlError>
      break;
 800ccb8:	bf00      	nop
  }

  return ret;
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	889b      	ldrh	r3, [r3, #4]
 800ccd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cce0:	2b40      	cmp	r3, #64	; 0x40
 800cce2:	d007      	beq.n	800ccf4 <USBD_StdEPReq+0x30>
 800cce4:	2b40      	cmp	r3, #64	; 0x40
 800cce6:	f200 817f 	bhi.w	800cfe8 <USBD_StdEPReq+0x324>
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d02a      	beq.n	800cd44 <USBD_StdEPReq+0x80>
 800ccee:	2b20      	cmp	r3, #32
 800ccf0:	f040 817a 	bne.w	800cfe8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff fe83 	bl	800ca04 <USBD_CoreFindEP>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd02:	7b7b      	ldrb	r3, [r7, #13]
 800cd04:	2bff      	cmp	r3, #255	; 0xff
 800cd06:	f000 8174 	beq.w	800cff2 <USBD_StdEPReq+0x32e>
 800cd0a:	7b7b      	ldrb	r3, [r7, #13]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f040 8170 	bne.w	800cff2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cd12:	7b7a      	ldrb	r2, [r7, #13]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cd1a:	7b7a      	ldrb	r2, [r7, #13]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	32ae      	adds	r2, #174	; 0xae
 800cd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 8163 	beq.w	800cff2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cd2c:	7b7a      	ldrb	r2, [r7, #13]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	32ae      	adds	r2, #174	; 0xae
 800cd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	6839      	ldr	r1, [r7, #0]
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	4798      	blx	r3
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cd42:	e156      	b.n	800cff2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	785b      	ldrb	r3, [r3, #1]
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d008      	beq.n	800cd5e <USBD_StdEPReq+0x9a>
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	f300 8145 	bgt.w	800cfdc <USBD_StdEPReq+0x318>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 809b 	beq.w	800ce8e <USBD_StdEPReq+0x1ca>
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d03c      	beq.n	800cdd6 <USBD_StdEPReq+0x112>
 800cd5c:	e13e      	b.n	800cfdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d002      	beq.n	800cd70 <USBD_StdEPReq+0xac>
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d016      	beq.n	800cd9c <USBD_StdEPReq+0xd8>
 800cd6e:	e02c      	b.n	800cdca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00d      	beq.n	800cd92 <USBD_StdEPReq+0xce>
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
 800cd78:	2b80      	cmp	r3, #128	; 0x80
 800cd7a:	d00a      	beq.n	800cd92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd7c:	7bbb      	ldrb	r3, [r7, #14]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 f97d 	bl	800e080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd86:	2180      	movs	r1, #128	; 0x80
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 f979 	bl	800e080 <USBD_LL_StallEP>
 800cd8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd90:	e020      	b.n	800cdd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 fc7a 	bl	800d68e <USBD_CtlError>
              break;
 800cd9a:	e01b      	b.n	800cdd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	885b      	ldrh	r3, [r3, #2]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10e      	bne.n	800cdc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00b      	beq.n	800cdc2 <USBD_StdEPReq+0xfe>
 800cdaa:	7bbb      	ldrb	r3, [r7, #14]
 800cdac:	2b80      	cmp	r3, #128	; 0x80
 800cdae:	d008      	beq.n	800cdc2 <USBD_StdEPReq+0xfe>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	88db      	ldrh	r3, [r3, #6]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d104      	bne.n	800cdc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f001 f95f 	bl	800e080 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fd2e 	bl	800d824 <USBD_CtlSendStatus>

              break;
 800cdc8:	e004      	b.n	800cdd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fc5e 	bl	800d68e <USBD_CtlError>
              break;
 800cdd2:	bf00      	nop
          }
          break;
 800cdd4:	e107      	b.n	800cfe6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d002      	beq.n	800cde8 <USBD_StdEPReq+0x124>
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d016      	beq.n	800ce14 <USBD_StdEPReq+0x150>
 800cde6:	e04b      	b.n	800ce80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cde8:	7bbb      	ldrb	r3, [r7, #14]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00d      	beq.n	800ce0a <USBD_StdEPReq+0x146>
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
 800cdf0:	2b80      	cmp	r3, #128	; 0x80
 800cdf2:	d00a      	beq.n	800ce0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f001 f941 	bl	800e080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdfe:	2180      	movs	r1, #128	; 0x80
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f001 f93d 	bl	800e080 <USBD_LL_StallEP>
 800ce06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce08:	e040      	b.n	800ce8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fc3e 	bl	800d68e <USBD_CtlError>
              break;
 800ce12:	e03b      	b.n	800ce8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	885b      	ldrh	r3, [r3, #2]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d136      	bne.n	800ce8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d004      	beq.n	800ce30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f001 f947 	bl	800e0be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fcf7 	bl	800d824 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fde2 	bl	800ca04 <USBD_CoreFindEP>
 800ce40:	4603      	mov	r3, r0
 800ce42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce44:	7b7b      	ldrb	r3, [r7, #13]
 800ce46:	2bff      	cmp	r3, #255	; 0xff
 800ce48:	d01f      	beq.n	800ce8a <USBD_StdEPReq+0x1c6>
 800ce4a:	7b7b      	ldrb	r3, [r7, #13]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d11c      	bne.n	800ce8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ce50:	7b7a      	ldrb	r2, [r7, #13]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ce58:	7b7a      	ldrb	r2, [r7, #13]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	32ae      	adds	r2, #174	; 0xae
 800ce5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d010      	beq.n	800ce8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce68:	7b7a      	ldrb	r2, [r7, #13]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	32ae      	adds	r2, #174	; 0xae
 800ce6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	6839      	ldr	r1, [r7, #0]
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	4798      	blx	r3
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ce7e:	e004      	b.n	800ce8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fc03 	bl	800d68e <USBD_CtlError>
              break;
 800ce88:	e000      	b.n	800ce8c <USBD_StdEPReq+0x1c8>
              break;
 800ce8a:	bf00      	nop
          }
          break;
 800ce8c:	e0ab      	b.n	800cfe6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d002      	beq.n	800cea0 <USBD_StdEPReq+0x1dc>
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d032      	beq.n	800cf04 <USBD_StdEPReq+0x240>
 800ce9e:	e097      	b.n	800cfd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <USBD_StdEPReq+0x1f2>
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b80      	cmp	r3, #128	; 0x80
 800ceaa:	d004      	beq.n	800ceb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fbed 	bl	800d68e <USBD_CtlError>
                break;
 800ceb4:	e091      	b.n	800cfda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	da0b      	bge.n	800ced6 <USBD_StdEPReq+0x212>
 800cebe:	7bbb      	ldrb	r3, [r7, #14]
 800cec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cec4:	4613      	mov	r3, r2
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	4413      	add	r3, r2
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	3310      	adds	r3, #16
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	3304      	adds	r3, #4
 800ced4:	e00b      	b.n	800ceee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	4413      	add	r3, r2
 800ceec:	3304      	adds	r3, #4
 800ceee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2200      	movs	r2, #0
 800cef4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2202      	movs	r2, #2
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fc37 	bl	800d770 <USBD_CtlSendData>
              break;
 800cf02:	e06a      	b.n	800cfda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da11      	bge.n	800cf30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	f003 020f 	and.w	r2, r3, #15
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	4613      	mov	r3, r2
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	440b      	add	r3, r1
 800cf1e:	3324      	adds	r3, #36	; 0x24
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d117      	bne.n	800cf56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fbb0 	bl	800d68e <USBD_CtlError>
                  break;
 800cf2e:	e054      	b.n	800cfda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	f003 020f 	and.w	r2, r3, #15
 800cf36:	6879      	ldr	r1, [r7, #4]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	440b      	add	r3, r1
 800cf42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fb9d 	bl	800d68e <USBD_CtlError>
                  break;
 800cf54:	e041      	b.n	800cfda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	da0b      	bge.n	800cf76 <USBD_StdEPReq+0x2b2>
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf64:	4613      	mov	r3, r2
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4413      	add	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	4413      	add	r3, r2
 800cf72:	3304      	adds	r3, #4
 800cf74:	e00b      	b.n	800cf8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	4413      	add	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <USBD_StdEPReq+0x2d8>
 800cf96:	7bbb      	ldrb	r3, [r7, #14]
 800cf98:	2b80      	cmp	r3, #128	; 0x80
 800cf9a:	d103      	bne.n	800cfa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	e00e      	b.n	800cfc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 f8a7 	bl	800e0fc <USBD_LL_IsStallEP>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d003      	beq.n	800cfbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	e002      	b.n	800cfc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2202      	movs	r2, #2
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fbd1 	bl	800d770 <USBD_CtlSendData>
              break;
 800cfce:	e004      	b.n	800cfda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fb5b 	bl	800d68e <USBD_CtlError>
              break;
 800cfd8:	bf00      	nop
          }
          break;
 800cfda:	e004      	b.n	800cfe6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fb55 	bl	800d68e <USBD_CtlError>
          break;
 800cfe4:	bf00      	nop
      }
      break;
 800cfe6:	e005      	b.n	800cff4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fb4f 	bl	800d68e <USBD_CtlError>
      break;
 800cff0:	e000      	b.n	800cff4 <USBD_StdEPReq+0x330>
      break;
 800cff2:	bf00      	nop
  }

  return ret;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
	...

0800d000 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d00a:	2300      	movs	r3, #0
 800d00c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d012:	2300      	movs	r3, #0
 800d014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	885b      	ldrh	r3, [r3, #2]
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b06      	cmp	r3, #6
 800d022:	f200 8128 	bhi.w	800d276 <USBD_GetDescriptor+0x276>
 800d026:	a201      	add	r2, pc, #4	; (adr r2, 800d02c <USBD_GetDescriptor+0x2c>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d049 	.word	0x0800d049
 800d030:	0800d061 	.word	0x0800d061
 800d034:	0800d0a1 	.word	0x0800d0a1
 800d038:	0800d277 	.word	0x0800d277
 800d03c:	0800d277 	.word	0x0800d277
 800d040:	0800d217 	.word	0x0800d217
 800d044:	0800d243 	.word	0x0800d243
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	7c12      	ldrb	r2, [r2, #16]
 800d054:	f107 0108 	add.w	r1, r7, #8
 800d058:	4610      	mov	r0, r2
 800d05a:	4798      	blx	r3
 800d05c:	60f8      	str	r0, [r7, #12]
      break;
 800d05e:	e112      	b.n	800d286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7c1b      	ldrb	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10d      	bne.n	800d084 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	f107 0208 	add.w	r2, r7, #8
 800d074:	4610      	mov	r0, r2
 800d076:	4798      	blx	r3
 800d078:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	2202      	movs	r2, #2
 800d080:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d082:	e100      	b.n	800d286 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	f107 0208 	add.w	r2, r7, #8
 800d090:	4610      	mov	r0, r2
 800d092:	4798      	blx	r3
 800d094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3301      	adds	r3, #1
 800d09a:	2202      	movs	r2, #2
 800d09c:	701a      	strb	r2, [r3, #0]
      break;
 800d09e:	e0f2      	b.n	800d286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	885b      	ldrh	r3, [r3, #2]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b05      	cmp	r3, #5
 800d0a8:	f200 80ac 	bhi.w	800d204 <USBD_GetDescriptor+0x204>
 800d0ac:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <USBD_GetDescriptor+0xb4>)
 800d0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b2:	bf00      	nop
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d135 	.word	0x0800d135
 800d0c0:	0800d169 	.word	0x0800d169
 800d0c4:	0800d19d 	.word	0x0800d19d
 800d0c8:	0800d1d1 	.word	0x0800d1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	7c12      	ldrb	r2, [r2, #16]
 800d0e4:	f107 0108 	add.w	r1, r7, #8
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
 800d0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ee:	e091      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 facb 	bl	800d68e <USBD_CtlError>
            err++;
 800d0f8:	7afb      	ldrb	r3, [r7, #11]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0fe:	e089      	b.n	800d214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	7c12      	ldrb	r2, [r2, #16]
 800d118:	f107 0108 	add.w	r1, r7, #8
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
 800d120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d122:	e077      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fab1 	bl	800d68e <USBD_CtlError>
            err++;
 800d12c:	7afb      	ldrb	r3, [r7, #11]
 800d12e:	3301      	adds	r3, #1
 800d130:	72fb      	strb	r3, [r7, #11]
          break;
 800d132:	e06f      	b.n	800d214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	7c12      	ldrb	r2, [r2, #16]
 800d14c:	f107 0108 	add.w	r1, r7, #8
 800d150:	4610      	mov	r0, r2
 800d152:	4798      	blx	r3
 800d154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d156:	e05d      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fa97 	bl	800d68e <USBD_CtlError>
            err++;
 800d160:	7afb      	ldrb	r3, [r7, #11]
 800d162:	3301      	adds	r3, #1
 800d164:	72fb      	strb	r3, [r7, #11]
          break;
 800d166:	e055      	b.n	800d214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00b      	beq.n	800d18c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	7c12      	ldrb	r2, [r2, #16]
 800d180:	f107 0108 	add.w	r1, r7, #8
 800d184:	4610      	mov	r0, r2
 800d186:	4798      	blx	r3
 800d188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d18a:	e043      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fa7d 	bl	800d68e <USBD_CtlError>
            err++;
 800d194:	7afb      	ldrb	r3, [r7, #11]
 800d196:	3301      	adds	r3, #1
 800d198:	72fb      	strb	r3, [r7, #11]
          break;
 800d19a:	e03b      	b.n	800d214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	7c12      	ldrb	r2, [r2, #16]
 800d1b4:	f107 0108 	add.w	r1, r7, #8
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
 800d1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1be:	e029      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fa63 	bl	800d68e <USBD_CtlError>
            err++;
 800d1c8:	7afb      	ldrb	r3, [r7, #11]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1ce:	e021      	b.n	800d214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00b      	beq.n	800d1f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	7c12      	ldrb	r2, [r2, #16]
 800d1e8:	f107 0108 	add.w	r1, r7, #8
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	4798      	blx	r3
 800d1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1f2:	e00f      	b.n	800d214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fa49 	bl	800d68e <USBD_CtlError>
            err++;
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	3301      	adds	r3, #1
 800d200:	72fb      	strb	r3, [r7, #11]
          break;
 800d202:	e007      	b.n	800d214 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fa41 	bl	800d68e <USBD_CtlError>
          err++;
 800d20c:	7afb      	ldrb	r3, [r7, #11]
 800d20e:	3301      	adds	r3, #1
 800d210:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d212:	bf00      	nop
      }
      break;
 800d214:	e037      	b.n	800d286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7c1b      	ldrb	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d109      	bne.n	800d232 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	f107 0208 	add.w	r2, r7, #8
 800d22a:	4610      	mov	r0, r2
 800d22c:	4798      	blx	r3
 800d22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d230:	e029      	b.n	800d286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa2a 	bl	800d68e <USBD_CtlError>
        err++;
 800d23a:	7afb      	ldrb	r3, [r7, #11]
 800d23c:	3301      	adds	r3, #1
 800d23e:	72fb      	strb	r3, [r7, #11]
      break;
 800d240:	e021      	b.n	800d286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7c1b      	ldrb	r3, [r3, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10d      	bne.n	800d266 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	f107 0208 	add.w	r2, r7, #8
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3
 800d25a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	2207      	movs	r2, #7
 800d262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d264:	e00f      	b.n	800d286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fa10 	bl	800d68e <USBD_CtlError>
        err++;
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	3301      	adds	r3, #1
 800d272:	72fb      	strb	r3, [r7, #11]
      break;
 800d274:	e007      	b.n	800d286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fa08 	bl	800d68e <USBD_CtlError>
      err++;
 800d27e:	7afb      	ldrb	r3, [r7, #11]
 800d280:	3301      	adds	r3, #1
 800d282:	72fb      	strb	r3, [r7, #11]
      break;
 800d284:	bf00      	nop
  }

  if (err != 0U)
 800d286:	7afb      	ldrb	r3, [r7, #11]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d11e      	bne.n	800d2ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	88db      	ldrh	r3, [r3, #6]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d016      	beq.n	800d2c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d294:	893b      	ldrh	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	88da      	ldrh	r2, [r3, #6]
 800d29e:	893b      	ldrh	r3, [r7, #8]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	bf28      	it	cs
 800d2a4:	4613      	movcs	r3, r2
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2aa:	893b      	ldrh	r3, [r7, #8]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa5d 	bl	800d770 <USBD_CtlSendData>
 800d2b6:	e009      	b.n	800d2cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f9e7 	bl	800d68e <USBD_CtlError>
 800d2c0:	e004      	b.n	800d2cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 faae 	bl	800d824 <USBD_CtlSendStatus>
 800d2c8:	e000      	b.n	800d2cc <USBD_GetDescriptor+0x2cc>
    return;
 800d2ca:	bf00      	nop
  }
}
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop

0800d2d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	889b      	ldrh	r3, [r3, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d131      	bne.n	800d34a <USBD_SetAddress+0x76>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d12d      	bne.n	800d34a <USBD_SetAddress+0x76>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	885b      	ldrh	r3, [r3, #2]
 800d2f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2f4:	d829      	bhi.n	800d34a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d104      	bne.n	800d318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f9bc 	bl	800d68e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d316:	e01d      	b.n	800d354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7bfa      	ldrb	r2, [r7, #15]
 800d31c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 ff15 	bl	800e154 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fa7a 	bl	800d824 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d004      	beq.n	800d340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2202      	movs	r2, #2
 800d33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33e:	e009      	b.n	800d354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d348:	e004      	b.n	800d354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f99e 	bl	800d68e <USBD_CtlError>
  }
}
 800d352:	bf00      	nop
 800d354:	bf00      	nop
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	885b      	ldrh	r3, [r3, #2]
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b4e      	ldr	r3, [pc, #312]	; (800d4ac <USBD_SetConfig+0x150>)
 800d372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d374:	4b4d      	ldr	r3, [pc, #308]	; (800d4ac <USBD_SetConfig+0x150>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d905      	bls.n	800d388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f985 	bl	800d68e <USBD_CtlError>
    return USBD_FAIL;
 800d384:	2303      	movs	r3, #3
 800d386:	e08c      	b.n	800d4a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	2b02      	cmp	r3, #2
 800d392:	d002      	beq.n	800d39a <USBD_SetConfig+0x3e>
 800d394:	2b03      	cmp	r3, #3
 800d396:	d029      	beq.n	800d3ec <USBD_SetConfig+0x90>
 800d398:	e075      	b.n	800d486 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d39a:	4b44      	ldr	r3, [pc, #272]	; (800d4ac <USBD_SetConfig+0x150>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d020      	beq.n	800d3e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d3a2:	4b42      	ldr	r3, [pc, #264]	; (800d4ac <USBD_SetConfig+0x150>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3ac:	4b3f      	ldr	r3, [pc, #252]	; (800d4ac <USBD_SetConfig+0x150>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7fe ffe7 	bl	800c386 <USBD_SetClassConfig>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d008      	beq.n	800d3d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f962 	bl	800d68e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3d2:	e065      	b.n	800d4a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 fa25 	bl	800d824 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2203      	movs	r2, #3
 800d3de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3e2:	e05d      	b.n	800d4a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fa1d 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d3ea:	e059      	b.n	800d4a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3ec:	4b2f      	ldr	r3, [pc, #188]	; (800d4ac <USBD_SetConfig+0x150>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d112      	bne.n	800d41a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d3fc:	4b2b      	ldr	r3, [pc, #172]	; (800d4ac <USBD_SetConfig+0x150>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d406:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <USBD_SetConfig+0x150>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	4619      	mov	r1, r3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fe ffd6 	bl	800c3be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fa06 	bl	800d824 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d418:	e042      	b.n	800d4a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d41a:	4b24      	ldr	r3, [pc, #144]	; (800d4ac <USBD_SetConfig+0x150>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	429a      	cmp	r2, r3
 800d426:	d02a      	beq.n	800d47e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7fe ffc4 	bl	800c3be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d436:	4b1d      	ldr	r3, [pc, #116]	; (800d4ac <USBD_SetConfig+0x150>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d440:	4b1a      	ldr	r3, [pc, #104]	; (800d4ac <USBD_SetConfig+0x150>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7fe ff9d 	bl	800c386 <USBD_SetClassConfig>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00f      	beq.n	800d476 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f918 	bl	800d68e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7fe ffa9 	bl	800c3be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d474:	e014      	b.n	800d4a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f9d4 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d47c:	e010      	b.n	800d4a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f9d0 	bl	800d824 <USBD_CtlSendStatus>
      break;
 800d484:	e00c      	b.n	800d4a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 f900 	bl	800d68e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d48e:	4b07      	ldr	r3, [pc, #28]	; (800d4ac <USBD_SetConfig+0x150>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7fe ff92 	bl	800c3be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d49a:	2303      	movs	r3, #3
 800d49c:	73fb      	strb	r3, [r7, #15]
      break;
 800d49e:	bf00      	nop
  }

  return ret;
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20004754 	.word	0x20004754

0800d4b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	88db      	ldrh	r3, [r3, #6]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d004      	beq.n	800d4cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f8e2 	bl	800d68e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4ca:	e023      	b.n	800d514 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	dc02      	bgt.n	800d4de <USBD_GetConfig+0x2e>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc03      	bgt.n	800d4e4 <USBD_GetConfig+0x34>
 800d4dc:	e015      	b.n	800d50a <USBD_GetConfig+0x5a>
 800d4de:	2b03      	cmp	r3, #3
 800d4e0:	d00b      	beq.n	800d4fa <USBD_GetConfig+0x4a>
 800d4e2:	e012      	b.n	800d50a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f93c 	bl	800d770 <USBD_CtlSendData>
        break;
 800d4f8:	e00c      	b.n	800d514 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	2201      	movs	r2, #1
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f934 	bl	800d770 <USBD_CtlSendData>
        break;
 800d508:	e004      	b.n	800d514 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f8be 	bl	800d68e <USBD_CtlError>
        break;
 800d512:	bf00      	nop
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	3b01      	subs	r3, #1
 800d530:	2b02      	cmp	r3, #2
 800d532:	d81e      	bhi.n	800d572 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	88db      	ldrh	r3, [r3, #6]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d004      	beq.n	800d546 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f8a5 	bl	800d68e <USBD_CtlError>
        break;
 800d544:	e01a      	b.n	800d57c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2201      	movs	r2, #1
 800d54a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d552:	2b00      	cmp	r3, #0
 800d554:	d005      	beq.n	800d562 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	f043 0202 	orr.w	r2, r3, #2
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	330c      	adds	r3, #12
 800d566:	2202      	movs	r2, #2
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f900 	bl	800d770 <USBD_CtlSendData>
      break;
 800d570:	e004      	b.n	800d57c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f88a 	bl	800d68e <USBD_CtlError>
      break;
 800d57a:	bf00      	nop
  }
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	885b      	ldrh	r3, [r3, #2]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d107      	bne.n	800d5a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f940 	bl	800d824 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d5a4:	e013      	b.n	800d5ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d10b      	bne.n	800d5c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	889b      	ldrh	r3, [r3, #4]
 800d5b2:	0a1b      	lsrs	r3, r3, #8
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f930 	bl	800d824 <USBD_CtlSendStatus>
}
 800d5c4:	e003      	b.n	800d5ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f860 	bl	800d68e <USBD_CtlError>
}
 800d5ce:	bf00      	nop
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d80b      	bhi.n	800d606 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	885b      	ldrh	r3, [r3, #2]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d10c      	bne.n	800d610 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f910 	bl	800d824 <USBD_CtlSendStatus>
      }
      break;
 800d604:	e004      	b.n	800d610 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f840 	bl	800d68e <USBD_CtlError>
      break;
 800d60e:	e000      	b.n	800d612 <USBD_ClrFeature+0x3c>
      break;
 800d610:	bf00      	nop
  }
}
 800d612:	bf00      	nop
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b084      	sub	sp, #16
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
 800d622:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	3301      	adds	r3, #1
 800d634:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	781a      	ldrb	r2, [r3, #0]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3301      	adds	r3, #1
 800d642:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f7ff fa41 	bl	800cacc <SWAPBYTE>
 800d64a:	4603      	mov	r3, r0
 800d64c:	461a      	mov	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3301      	adds	r3, #1
 800d656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3301      	adds	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff fa34 	bl	800cacc <SWAPBYTE>
 800d664:	4603      	mov	r3, r0
 800d666:	461a      	mov	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	3301      	adds	r3, #1
 800d670:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3301      	adds	r3, #1
 800d676:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f7ff fa27 	bl	800cacc <SWAPBYTE>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	80da      	strh	r2, [r3, #6]
}
 800d686:	bf00      	nop
 800d688:	3710      	adds	r7, #16
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b082      	sub	sp, #8
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d698:	2180      	movs	r1, #128	; 0x80
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fcf0 	bl	800e080 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fcec 	bl	800e080 <USBD_LL_StallEP>
}
 800d6a8:	bf00      	nop
 800d6aa:	3708      	adds	r7, #8
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d036      	beq.n	800d734 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6ca:	6938      	ldr	r0, [r7, #16]
 800d6cc:	f000 f836 	bl	800d73c <USBD_GetLen>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	68ba      	ldr	r2, [r7, #8]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	7812      	ldrb	r2, [r2, #0]
 800d6e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2203      	movs	r2, #3
 800d6f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d700:	e013      	b.n	800d72a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	4413      	add	r3, r2
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	3301      	adds	r3, #1
 800d712:	613b      	str	r3, [r7, #16]
    idx++;
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	3301      	adds	r3, #1
 800d718:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	4413      	add	r3, r2
 800d720:	2200      	movs	r2, #0
 800d722:	701a      	strb	r2, [r3, #0]
    idx++;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
 800d726:	3301      	adds	r3, #1
 800d728:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1e7      	bne.n	800d702 <USBD_GetString+0x52>
 800d732:	e000      	b.n	800d736 <USBD_GetString+0x86>
    return;
 800d734:	bf00      	nop
  }
}
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d74c:	e005      	b.n	800d75a <USBD_GetLen+0x1e>
  {
    len++;
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	3301      	adds	r3, #1
 800d752:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	3301      	adds	r3, #1
 800d758:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f5      	bne.n	800d74e <USBD_GetLen+0x12>
  }

  return len;
 800d762:	7bfb      	ldrb	r3, [r7, #15]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2202      	movs	r2, #2
 800d780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	687a      	ldr	r2, [r7, #4]
 800d788:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	2100      	movs	r1, #0
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f000 fcfb 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	60f8      	str	r0, [r7, #12]
 800d7ae:	60b9      	str	r1, [r7, #8]
 800d7b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 fcea 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3710      	adds	r7, #16
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2203      	movs	r2, #3
 800d7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f000 fcee 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	60f8      	str	r0, [r7, #12]
 800d80a:	60b9      	str	r1, [r7, #8]
 800d80c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68ba      	ldr	r2, [r7, #8]
 800d812:	2100      	movs	r1, #0
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 fcdd 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2204      	movs	r2, #4
 800d830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d834:	2300      	movs	r3, #0
 800d836:	2200      	movs	r2, #0
 800d838:	2100      	movs	r1, #0
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fca9 	bl	800e192 <USBD_LL_Transmit>

  return USBD_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b082      	sub	sp, #8
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2205      	movs	r2, #5
 800d856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d85a:	2300      	movs	r3, #0
 800d85c:	2200      	movs	r2, #0
 800d85e:	2100      	movs	r1, #0
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fcb7 	bl	800e1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d874:	2201      	movs	r2, #1
 800d876:	4912      	ldr	r1, [pc, #72]	; (800d8c0 <MX_USB_DEVICE_Init+0x50>)
 800d878:	4812      	ldr	r0, [pc, #72]	; (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d87a:	f7fe fd07 	bl	800c28c <USBD_Init>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d884:	f7f3 ffda 	bl	800183c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d888:	490f      	ldr	r1, [pc, #60]	; (800d8c8 <MX_USB_DEVICE_Init+0x58>)
 800d88a:	480e      	ldr	r0, [pc, #56]	; (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d88c:	f7fe fd2e 	bl	800c2ec <USBD_RegisterClass>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d896:	f7f3 ffd1 	bl	800183c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d89a:	490c      	ldr	r1, [pc, #48]	; (800d8cc <MX_USB_DEVICE_Init+0x5c>)
 800d89c:	4809      	ldr	r0, [pc, #36]	; (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d89e:	f7fe fc1f 	bl	800c0e0 <USBD_CDC_RegisterInterface>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d001      	beq.n	800d8ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d8a8:	f7f3 ffc8 	bl	800183c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d8ac:	4805      	ldr	r0, [pc, #20]	; (800d8c4 <MX_USB_DEVICE_Init+0x54>)
 800d8ae:	f7fe fd53 	bl	800c358 <USBD_Start>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d8b8:	f7f3 ffc0 	bl	800183c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d8bc:	bf00      	nop
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	200001c4 	.word	0x200001c4
 800d8c4:	20004758 	.word	0x20004758
 800d8c8:	20000130 	.word	0x20000130
 800d8cc:	200001b0 	.word	0x200001b0

0800d8d0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4905      	ldr	r1, [pc, #20]	; (800d8ec <CDC_Init_HS+0x1c>)
 800d8d8:	4805      	ldr	r0, [pc, #20]	; (800d8f0 <CDC_Init_HS+0x20>)
 800d8da:	f7fe fc1b 	bl	800c114 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d8de:	4905      	ldr	r1, [pc, #20]	; (800d8f4 <CDC_Init_HS+0x24>)
 800d8e0:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <CDC_Init_HS+0x20>)
 800d8e2:	f7fe fc39 	bl	800c158 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	200052b4 	.word	0x200052b4
 800d8f0:	20004758 	.word	0x20004758
 800d8f4:	20004ab4 	.word	0x20004ab4

0800d8f8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d8fc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	6039      	str	r1, [r7, #0]
 800d912:	71fb      	strb	r3, [r7, #7]
 800d914:	4613      	mov	r3, r2
 800d916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	2b23      	cmp	r3, #35	; 0x23
 800d91c:	d84a      	bhi.n	800d9b4 <CDC_Control_HS+0xac>
 800d91e:	a201      	add	r2, pc, #4	; (adr r2, 800d924 <CDC_Control_HS+0x1c>)
 800d920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d924:	0800d9b5 	.word	0x0800d9b5
 800d928:	0800d9b5 	.word	0x0800d9b5
 800d92c:	0800d9b5 	.word	0x0800d9b5
 800d930:	0800d9b5 	.word	0x0800d9b5
 800d934:	0800d9b5 	.word	0x0800d9b5
 800d938:	0800d9b5 	.word	0x0800d9b5
 800d93c:	0800d9b5 	.word	0x0800d9b5
 800d940:	0800d9b5 	.word	0x0800d9b5
 800d944:	0800d9b5 	.word	0x0800d9b5
 800d948:	0800d9b5 	.word	0x0800d9b5
 800d94c:	0800d9b5 	.word	0x0800d9b5
 800d950:	0800d9b5 	.word	0x0800d9b5
 800d954:	0800d9b5 	.word	0x0800d9b5
 800d958:	0800d9b5 	.word	0x0800d9b5
 800d95c:	0800d9b5 	.word	0x0800d9b5
 800d960:	0800d9b5 	.word	0x0800d9b5
 800d964:	0800d9b5 	.word	0x0800d9b5
 800d968:	0800d9b5 	.word	0x0800d9b5
 800d96c:	0800d9b5 	.word	0x0800d9b5
 800d970:	0800d9b5 	.word	0x0800d9b5
 800d974:	0800d9b5 	.word	0x0800d9b5
 800d978:	0800d9b5 	.word	0x0800d9b5
 800d97c:	0800d9b5 	.word	0x0800d9b5
 800d980:	0800d9b5 	.word	0x0800d9b5
 800d984:	0800d9b5 	.word	0x0800d9b5
 800d988:	0800d9b5 	.word	0x0800d9b5
 800d98c:	0800d9b5 	.word	0x0800d9b5
 800d990:	0800d9b5 	.word	0x0800d9b5
 800d994:	0800d9b5 	.word	0x0800d9b5
 800d998:	0800d9b5 	.word	0x0800d9b5
 800d99c:	0800d9b5 	.word	0x0800d9b5
 800d9a0:	0800d9b5 	.word	0x0800d9b5
 800d9a4:	0800d9b5 	.word	0x0800d9b5
 800d9a8:	0800d9b5 	.word	0x0800d9b5
 800d9ac:	0800d9b5 	.word	0x0800d9b5
 800d9b0:	0800d9b5 	.word	0x0800d9b5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d9b4:	bf00      	nop
  }

  return (USBD_OK);
 800d9b6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	480a      	ldr	r0, [pc, #40]	; (800d9fc <CDC_Receive_HS+0x38>)
 800d9d2:	f7fe fbc1 	bl	800c158 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d9d6:	4809      	ldr	r0, [pc, #36]	; (800d9fc <CDC_Receive_HS+0x38>)
 800d9d8:	f7fe fc22 	bl	800c220 <USBD_CDC_ReceivePacket>

  if (*Len != 0){
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d006      	beq.n	800d9f2 <CDC_Receive_HS+0x2e>
	  memcpy(receive_data, UserRxBufferHS, *Len);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4905      	ldr	r1, [pc, #20]	; (800da00 <CDC_Receive_HS+0x3c>)
 800d9ec:	4805      	ldr	r0, [pc, #20]	; (800da04 <CDC_Receive_HS+0x40>)
 800d9ee:	f000 fd8c 	bl	800e50a <memcpy>
  }
  return (USBD_OK);
 800d9f2:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20004758 	.word	0x20004758
 800da00:	20004ab4 	.word	0x20004ab4
 800da04:	20004a34 	.word	0x20004a34

0800da08 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	460b      	mov	r3, r1
 800da12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  //memcpy(UserRxBufferHS, sizeof(uint8_t)*Len);
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800da18:	4b0d      	ldr	r3, [pc, #52]	; (800da50 <CDC_Transmit_HS+0x48>)
 800da1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800da2a:	2301      	movs	r3, #1
 800da2c:	e00b      	b.n	800da46 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800da2e:	887b      	ldrh	r3, [r7, #2]
 800da30:	461a      	mov	r2, r3
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	4806      	ldr	r0, [pc, #24]	; (800da50 <CDC_Transmit_HS+0x48>)
 800da36:	f7fe fb6d 	bl	800c114 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800da3a:	4805      	ldr	r0, [pc, #20]	; (800da50 <CDC_Transmit_HS+0x48>)
 800da3c:	f7fe fbaa 	bl	800c194 <USBD_CDC_TransmitPacket>
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800da44:	7bfb      	ldrb	r3, [r7, #15]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20004758 	.word	0x20004758

0800da54 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800da66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
	...

0800da78 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	4603      	mov	r3, r0
 800da80:	6039      	str	r1, [r7, #0]
 800da82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2212      	movs	r2, #18
 800da88:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800da8a:	4b03      	ldr	r3, [pc, #12]	; (800da98 <USBD_HS_DeviceDescriptor+0x20>)
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	200001e0 	.word	0x200001e0

0800da9c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	6039      	str	r1, [r7, #0]
 800daa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2204      	movs	r2, #4
 800daac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800daae:	4b03      	ldr	r3, [pc, #12]	; (800dabc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	200001f4 	.word	0x200001f4

0800dac0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d105      	bne.n	800dade <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	4907      	ldr	r1, [pc, #28]	; (800daf4 <USBD_HS_ProductStrDescriptor+0x34>)
 800dad6:	4808      	ldr	r0, [pc, #32]	; (800daf8 <USBD_HS_ProductStrDescriptor+0x38>)
 800dad8:	f7ff fdea 	bl	800d6b0 <USBD_GetString>
 800dadc:	e004      	b.n	800dae8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	4904      	ldr	r1, [pc, #16]	; (800daf4 <USBD_HS_ProductStrDescriptor+0x34>)
 800dae2:	4805      	ldr	r0, [pc, #20]	; (800daf8 <USBD_HS_ProductStrDescriptor+0x38>)
 800dae4:	f7ff fde4 	bl	800d6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dae8:	4b02      	ldr	r3, [pc, #8]	; (800daf4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20005ab4 	.word	0x20005ab4
 800daf8:	08012ddc 	.word	0x08012ddc

0800dafc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	4904      	ldr	r1, [pc, #16]	; (800db1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800db0c:	4804      	ldr	r0, [pc, #16]	; (800db20 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800db0e:	f7ff fdcf 	bl	800d6b0 <USBD_GetString>
  return USBD_StrDesc;
 800db12:	4b02      	ldr	r3, [pc, #8]	; (800db1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20005ab4 	.word	0x20005ab4
 800db20:	08012df4 	.word	0x08012df4

0800db24 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	6039      	str	r1, [r7, #0]
 800db2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	221a      	movs	r2, #26
 800db34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db36:	f000 f843 	bl	800dbc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800db3a:	4b02      	ldr	r3, [pc, #8]	; (800db44 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	200001f8 	.word	0x200001f8

0800db48 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	6039      	str	r1, [r7, #0]
 800db52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	4907      	ldr	r1, [pc, #28]	; (800db7c <USBD_HS_ConfigStrDescriptor+0x34>)
 800db5e:	4808      	ldr	r0, [pc, #32]	; (800db80 <USBD_HS_ConfigStrDescriptor+0x38>)
 800db60:	f7ff fda6 	bl	800d6b0 <USBD_GetString>
 800db64:	e004      	b.n	800db70 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800db66:	683a      	ldr	r2, [r7, #0]
 800db68:	4904      	ldr	r1, [pc, #16]	; (800db7c <USBD_HS_ConfigStrDescriptor+0x34>)
 800db6a:	4805      	ldr	r0, [pc, #20]	; (800db80 <USBD_HS_ConfigStrDescriptor+0x38>)
 800db6c:	f7ff fda0 	bl	800d6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db70:	4b02      	ldr	r3, [pc, #8]	; (800db7c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800db72:	4618      	mov	r0, r3
 800db74:	3708      	adds	r7, #8
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	20005ab4 	.word	0x20005ab4
 800db80:	08012e08 	.word	0x08012e08

0800db84 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db90:	79fb      	ldrb	r3, [r7, #7]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	4907      	ldr	r1, [pc, #28]	; (800dbb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800db9a:	4808      	ldr	r0, [pc, #32]	; (800dbbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800db9c:	f7ff fd88 	bl	800d6b0 <USBD_GetString>
 800dba0:	e004      	b.n	800dbac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dba8:	f7ff fd82 	bl	800d6b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20005ab4 	.word	0x20005ab4
 800dbbc:	08012e14 	.word	0x08012e14

0800dbc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbc6:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <Get_SerialNum+0x44>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dbcc:	4b0e      	ldr	r3, [pc, #56]	; (800dc08 <Get_SerialNum+0x48>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbd2:	4b0e      	ldr	r3, [pc, #56]	; (800dc0c <Get_SerialNum+0x4c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4413      	add	r3, r2
 800dbde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d009      	beq.n	800dbfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dbe6:	2208      	movs	r2, #8
 800dbe8:	4909      	ldr	r1, [pc, #36]	; (800dc10 <Get_SerialNum+0x50>)
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f000 f814 	bl	800dc18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dbf0:	2204      	movs	r2, #4
 800dbf2:	4908      	ldr	r1, [pc, #32]	; (800dc14 <Get_SerialNum+0x54>)
 800dbf4:	68b8      	ldr	r0, [r7, #8]
 800dbf6:	f000 f80f 	bl	800dc18 <IntToUnicode>
  }
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	1fff7a10 	.word	0x1fff7a10
 800dc08:	1fff7a14 	.word	0x1fff7a14
 800dc0c:	1fff7a18 	.word	0x1fff7a18
 800dc10:	200001fa 	.word	0x200001fa
 800dc14:	2000020a 	.word	0x2000020a

0800dc18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	4613      	mov	r3, r2
 800dc24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	75fb      	strb	r3, [r7, #23]
 800dc2e:	e027      	b.n	800dc80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	0f1b      	lsrs	r3, r3, #28
 800dc34:	2b09      	cmp	r3, #9
 800dc36:	d80b      	bhi.n	800dc50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	0f1b      	lsrs	r3, r3, #28
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	7dfb      	ldrb	r3, [r7, #23]
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	4619      	mov	r1, r3
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	440b      	add	r3, r1
 800dc48:	3230      	adds	r2, #48	; 0x30
 800dc4a:	b2d2      	uxtb	r2, r2
 800dc4c:	701a      	strb	r2, [r3, #0]
 800dc4e:	e00a      	b.n	800dc66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	0f1b      	lsrs	r3, r3, #28
 800dc54:	b2da      	uxtb	r2, r3
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	005b      	lsls	r3, r3, #1
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	440b      	add	r3, r1
 800dc60:	3237      	adds	r2, #55	; 0x37
 800dc62:	b2d2      	uxtb	r2, r2
 800dc64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	011b      	lsls	r3, r3, #4
 800dc6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc6c:	7dfb      	ldrb	r3, [r7, #23]
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	3301      	adds	r3, #1
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	2200      	movs	r2, #0
 800dc78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	75fb      	strb	r3, [r7, #23]
 800dc80:	7dfa      	ldrb	r2, [r7, #23]
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d3d3      	bcc.n	800dc30 <IntToUnicode+0x18>
  }
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	371c      	adds	r7, #28
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
	...

0800dc98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b08a      	sub	sp, #40	; 0x28
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	2200      	movs	r2, #0
 800dca6:	601a      	str	r2, [r3, #0]
 800dca8:	605a      	str	r2, [r3, #4]
 800dcaa:	609a      	str	r2, [r3, #8]
 800dcac:	60da      	str	r2, [r3, #12]
 800dcae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a1d      	ldr	r2, [pc, #116]	; (800dd2c <HAL_PCD_MspInit+0x94>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d134      	bne.n	800dd24 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dcba:	2300      	movs	r3, #0
 800dcbc:	613b      	str	r3, [r7, #16]
 800dcbe:	4b1c      	ldr	r3, [pc, #112]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	4a1b      	ldr	r2, [pc, #108]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dcc4:	f043 0302 	orr.w	r3, r3, #2
 800dcc8:	6313      	str	r3, [r2, #48]	; 0x30
 800dcca:	4b19      	ldr	r3, [pc, #100]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcce:	f003 0302 	and.w	r3, r3, #2
 800dcd2:	613b      	str	r3, [r7, #16]
 800dcd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800dcd6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800dcda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcdc:	2302      	movs	r3, #2
 800dcde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dce0:	2300      	movs	r3, #0
 800dce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dce4:	2303      	movs	r3, #3
 800dce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dce8:	230c      	movs	r3, #12
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcec:	f107 0314 	add.w	r3, r7, #20
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4810      	ldr	r0, [pc, #64]	; (800dd34 <HAL_PCD_MspInit+0x9c>)
 800dcf4:	f7f6 fc9c 	bl	8004630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd00:	4a0b      	ldr	r2, [pc, #44]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dd02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd06:	6313      	str	r3, [r2, #48]	; 0x30
 800dd08:	4b09      	ldr	r3, [pc, #36]	; (800dd30 <HAL_PCD_MspInit+0x98>)
 800dd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dd14:	2200      	movs	r2, #0
 800dd16:	2100      	movs	r1, #0
 800dd18:	204d      	movs	r0, #77	; 0x4d
 800dd1a:	f7f5 ffdb 	bl	8003cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dd1e:	204d      	movs	r0, #77	; 0x4d
 800dd20:	f7f5 fff4 	bl	8003d0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dd24:	bf00      	nop
 800dd26:	3728      	adds	r7, #40	; 0x28
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	40040000 	.word	0x40040000
 800dd30:	40023800 	.word	0x40023800
 800dd34:	40020400 	.word	0x40020400

0800dd38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f7fe fb4f 	bl	800c3f2 <USBD_LL_SetupStage>
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dd6e:	78fa      	ldrb	r2, [r7, #3]
 800dd70:	6879      	ldr	r1, [r7, #4]
 800dd72:	4613      	mov	r3, r2
 800dd74:	00db      	lsls	r3, r3, #3
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	440b      	add	r3, r1
 800dd7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	78fb      	ldrb	r3, [r7, #3]
 800dd84:	4619      	mov	r1, r3
 800dd86:	f7fe fb89 	bl	800c49c <USBD_LL_DataOutStage>
}
 800dd8a:	bf00      	nop
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b082      	sub	sp, #8
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dda4:	78fa      	ldrb	r2, [r7, #3]
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	440b      	add	r3, r1
 800ddb2:	334c      	adds	r3, #76	; 0x4c
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	78fb      	ldrb	r3, [r7, #3]
 800ddb8:	4619      	mov	r1, r3
 800ddba:	f7fe fc22 	bl	800c602 <USBD_LL_DataInStage>
}
 800ddbe:	bf00      	nop
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fd56 	bl	800c886 <USBD_LL_SOF>
}
 800ddda:	bf00      	nop
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ddea:	2301      	movs	r3, #1
 800ddec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	68db      	ldr	r3, [r3, #12]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d102      	bne.n	800ddfc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	73fb      	strb	r3, [r7, #15]
 800ddfa:	e008      	b.n	800de0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	2b02      	cmp	r3, #2
 800de02:	d102      	bne.n	800de0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800de04:	2301      	movs	r3, #1
 800de06:	73fb      	strb	r3, [r7, #15]
 800de08:	e001      	b.n	800de0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800de0a:	f7f3 fd17 	bl	800183c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de14:	7bfa      	ldrb	r2, [r7, #15]
 800de16:	4611      	mov	r1, r2
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe fcf6 	bl	800c80a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fc9e 	bl	800c766 <USBD_LL_Reset>
}
 800de2a:	bf00      	nop
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fcf1 	bl	800c82a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	6812      	ldr	r2, [r2, #0]
 800de56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800de5a:	f043 0301 	orr.w	r3, r3, #1
 800de5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a1b      	ldr	r3, [r3, #32]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d005      	beq.n	800de74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de68:	4b04      	ldr	r3, [pc, #16]	; (800de7c <HAL_PCD_SuspendCallback+0x48>)
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	4a03      	ldr	r2, [pc, #12]	; (800de7c <HAL_PCD_SuspendCallback+0x48>)
 800de6e:	f043 0306 	orr.w	r3, r3, #6
 800de72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	e000ed00 	.word	0xe000ed00

0800de80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fce1 	bl	800c856 <USBD_LL_Resume>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	460b      	mov	r3, r1
 800dea6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800deae:	78fa      	ldrb	r2, [r7, #3]
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fd39 	bl	800c92a <USBD_LL_IsoOUTIncomplete>
}
 800deb8:	bf00      	nop
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ded2:	78fa      	ldrb	r2, [r7, #3]
 800ded4:	4611      	mov	r1, r2
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7fe fcf5 	bl	800c8c6 <USBD_LL_IsoINIncomplete>
}
 800dedc:	bf00      	nop
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800def2:	4618      	mov	r0, r3
 800def4:	f7fe fd4b 	bl	800c98e <USBD_LL_DevConnected>
}
 800def8:	bf00      	nop
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe fd48 	bl	800c9a4 <USBD_LL_DevDisconnected>
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d140      	bne.n	800dfae <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800df2c:	4a22      	ldr	r2, [pc, #136]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a20      	ldr	r2, [pc, #128]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df38:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800df3c:	4b1e      	ldr	r3, [pc, #120]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df3e:	4a1f      	ldr	r2, [pc, #124]	; (800dfbc <USBD_LL_Init+0xa0>)
 800df40:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800df42:	4b1d      	ldr	r3, [pc, #116]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df44:	2206      	movs	r2, #6
 800df46:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800df48:	4b1b      	ldr	r3, [pc, #108]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df4a:	2202      	movs	r2, #2
 800df4c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800df4e:	4b1a      	ldr	r3, [pc, #104]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df50:	2200      	movs	r2, #0
 800df52:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800df54:	4b18      	ldr	r3, [pc, #96]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df56:	2202      	movs	r2, #2
 800df58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800df5a:	4b17      	ldr	r3, [pc, #92]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df5c:	2200      	movs	r2, #0
 800df5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800df60:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df62:	2200      	movs	r2, #0
 800df64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800df66:	4b14      	ldr	r3, [pc, #80]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df68:	2200      	movs	r2, #0
 800df6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800df6c:	4b12      	ldr	r3, [pc, #72]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df6e:	2200      	movs	r2, #0
 800df70:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800df72:	4b11      	ldr	r3, [pc, #68]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df74:	2200      	movs	r2, #0
 800df76:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800df78:	4b0f      	ldr	r3, [pc, #60]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800df7e:	480e      	ldr	r0, [pc, #56]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df80:	f7f7 f901 	bl	8005186 <HAL_PCD_Init>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800df8a:	f7f3 fc57 	bl	800183c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800df8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df92:	4809      	ldr	r0, [pc, #36]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df94:	f7f8 fb57 	bl	8006646 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800df98:	2280      	movs	r2, #128	; 0x80
 800df9a:	2100      	movs	r1, #0
 800df9c:	4806      	ldr	r0, [pc, #24]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800df9e:	f7f8 fb0b 	bl	80065b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dfa2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	4803      	ldr	r0, [pc, #12]	; (800dfb8 <USBD_LL_Init+0x9c>)
 800dfaa:	f7f8 fb05 	bl	80065b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	20005cb4 	.word	0x20005cb4
 800dfbc:	40040000 	.word	0x40040000

0800dfc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7f7 f9f2 	bl	80053c0 <HAL_PCD_Start>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f000 f942 	bl	800e26c <USBD_Get_USB_Status>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	461a      	mov	r2, r3
 800e004:	4603      	mov	r3, r0
 800e006:	70fb      	strb	r3, [r7, #3]
 800e008:	460b      	mov	r3, r1
 800e00a:	70bb      	strb	r3, [r7, #2]
 800e00c:	4613      	mov	r3, r2
 800e00e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e01e:	78bb      	ldrb	r3, [r7, #2]
 800e020:	883a      	ldrh	r2, [r7, #0]
 800e022:	78f9      	ldrb	r1, [r7, #3]
 800e024:	f7f7 fec3 	bl	8005dae <HAL_PCD_EP_Open>
 800e028:	4603      	mov	r3, r0
 800e02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 f91c 	bl	800e26c <USBD_Get_USB_Status>
 800e034:	4603      	mov	r3, r0
 800e036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e038:	7bbb      	ldrb	r3, [r7, #14]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	460b      	mov	r3, r1
 800e04c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e05c:	78fa      	ldrb	r2, [r7, #3]
 800e05e:	4611      	mov	r1, r2
 800e060:	4618      	mov	r0, r3
 800e062:	f7f7 ff0c 	bl	8005e7e <HAL_PCD_EP_Close>
 800e066:	4603      	mov	r3, r0
 800e068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f8fd 	bl	800e26c <USBD_Get_USB_Status>
 800e072:	4603      	mov	r3, r0
 800e074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e076:	7bbb      	ldrb	r3, [r7, #14]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e09a:	78fa      	ldrb	r2, [r7, #3]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f7 ffe4 	bl	800606c <HAL_PCD_EP_SetStall>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0a8:	7bfb      	ldrb	r3, [r7, #15]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f8de 	bl	800e26c <USBD_Get_USB_Status>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0d8:	78fa      	ldrb	r2, [r7, #3]
 800e0da:	4611      	mov	r1, r2
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7f8 f829 	bl	8006134 <HAL_PCD_EP_ClrStall>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f000 f8bf 	bl	800e26c <USBD_Get_USB_Status>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e10e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e114:	2b00      	cmp	r3, #0
 800e116:	da0b      	bge.n	800e130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e118:	78fb      	ldrb	r3, [r7, #3]
 800e11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e11e:	68f9      	ldr	r1, [r7, #12]
 800e120:	4613      	mov	r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	4413      	add	r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	440b      	add	r3, r1
 800e12a:	333e      	adds	r3, #62	; 0x3e
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	e00b      	b.n	800e148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e136:	68f9      	ldr	r1, [r7, #12]
 800e138:	4613      	mov	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	440b      	add	r3, r1
 800e142:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e146:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3714      	adds	r7, #20
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e164:	2300      	movs	r3, #0
 800e166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e16e:	78fa      	ldrb	r2, [r7, #3]
 800e170:	4611      	mov	r1, r2
 800e172:	4618      	mov	r0, r3
 800e174:	f7f7 fdf6 	bl	8005d64 <HAL_PCD_SetAddress>
 800e178:	4603      	mov	r3, r0
 800e17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e17c:	7bfb      	ldrb	r3, [r7, #15]
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 f874 	bl	800e26c <USBD_Get_USB_Status>
 800e184:	4603      	mov	r3, r0
 800e186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e188:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	607a      	str	r2, [r7, #4]
 800e19c:	603b      	str	r3, [r7, #0]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1b0:	7af9      	ldrb	r1, [r7, #11]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	f7f7 ff0f 	bl	8005fd8 <HAL_PCD_EP_Transmit>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1be:	7dfb      	ldrb	r3, [r7, #23]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f853 	bl	800e26c <USBD_Get_USB_Status>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	603b      	str	r3, [r7, #0]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1f2:	7af9      	ldrb	r1, [r7, #11]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	f7f7 fe8b 	bl	8005f12 <HAL_PCD_EP_Receive>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e200:	7dfb      	ldrb	r3, [r7, #23]
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f832 	bl	800e26c <USBD_Get_USB_Status>
 800e208:	4603      	mov	r3, r0
 800e20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b082      	sub	sp, #8
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	4611      	mov	r1, r2
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f7 febb 	bl	8005fa8 <HAL_PCD_EP_GetRxCount>
 800e232:	4603      	mov	r3, r0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e244:	4b03      	ldr	r3, [pc, #12]	; (800e254 <USBD_static_malloc+0x18>)
}
 800e246:	4618      	mov	r0, r3
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	200061c0 	.word	0x200061c0

0800e258 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]

}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	4603      	mov	r3, r0
 800e274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e276:	2300      	movs	r3, #0
 800e278:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e27a:	79fb      	ldrb	r3, [r7, #7]
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d817      	bhi.n	800e2b0 <USBD_Get_USB_Status+0x44>
 800e280:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <USBD_Get_USB_Status+0x1c>)
 800e282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e286:	bf00      	nop
 800e288:	0800e299 	.word	0x0800e299
 800e28c:	0800e29f 	.word	0x0800e29f
 800e290:	0800e2a5 	.word	0x0800e2a5
 800e294:	0800e2ab 	.word	0x0800e2ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	73fb      	strb	r3, [r7, #15]
    break;
 800e29c:	e00b      	b.n	800e2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e29e:	2303      	movs	r3, #3
 800e2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e2a2:	e008      	b.n	800e2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2a8:	e005      	b.n	800e2b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ae:	e002      	b.n	800e2b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2b4:	bf00      	nop
  }
  return usb_status;
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <__errno>:
 800e2c4:	4b01      	ldr	r3, [pc, #4]	; (800e2cc <__errno+0x8>)
 800e2c6:	6818      	ldr	r0, [r3, #0]
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	20000214 	.word	0x20000214

0800e2d0 <std>:
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	b510      	push	{r4, lr}
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2de:	6083      	str	r3, [r0, #8]
 800e2e0:	8181      	strh	r1, [r0, #12]
 800e2e2:	6643      	str	r3, [r0, #100]	; 0x64
 800e2e4:	81c2      	strh	r2, [r0, #14]
 800e2e6:	6183      	str	r3, [r0, #24]
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	2208      	movs	r2, #8
 800e2ec:	305c      	adds	r0, #92	; 0x5c
 800e2ee:	f000 f91a 	bl	800e526 <memset>
 800e2f2:	4b05      	ldr	r3, [pc, #20]	; (800e308 <std+0x38>)
 800e2f4:	6263      	str	r3, [r4, #36]	; 0x24
 800e2f6:	4b05      	ldr	r3, [pc, #20]	; (800e30c <std+0x3c>)
 800e2f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2fa:	4b05      	ldr	r3, [pc, #20]	; (800e310 <std+0x40>)
 800e2fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2fe:	4b05      	ldr	r3, [pc, #20]	; (800e314 <std+0x44>)
 800e300:	6224      	str	r4, [r4, #32]
 800e302:	6323      	str	r3, [r4, #48]	; 0x30
 800e304:	bd10      	pop	{r4, pc}
 800e306:	bf00      	nop
 800e308:	0800f495 	.word	0x0800f495
 800e30c:	0800f4b7 	.word	0x0800f4b7
 800e310:	0800f4ef 	.word	0x0800f4ef
 800e314:	0800f513 	.word	0x0800f513

0800e318 <_cleanup_r>:
 800e318:	4901      	ldr	r1, [pc, #4]	; (800e320 <_cleanup_r+0x8>)
 800e31a:	f000 b8af 	b.w	800e47c <_fwalk_reent>
 800e31e:	bf00      	nop
 800e320:	080110c1 	.word	0x080110c1

0800e324 <__sfmoreglue>:
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	2268      	movs	r2, #104	; 0x68
 800e328:	1e4d      	subs	r5, r1, #1
 800e32a:	4355      	muls	r5, r2
 800e32c:	460e      	mov	r6, r1
 800e32e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e332:	f000 f921 	bl	800e578 <_malloc_r>
 800e336:	4604      	mov	r4, r0
 800e338:	b140      	cbz	r0, 800e34c <__sfmoreglue+0x28>
 800e33a:	2100      	movs	r1, #0
 800e33c:	e9c0 1600 	strd	r1, r6, [r0]
 800e340:	300c      	adds	r0, #12
 800e342:	60a0      	str	r0, [r4, #8]
 800e344:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e348:	f000 f8ed 	bl	800e526 <memset>
 800e34c:	4620      	mov	r0, r4
 800e34e:	bd70      	pop	{r4, r5, r6, pc}

0800e350 <__sfp_lock_acquire>:
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__sfp_lock_acquire+0x8>)
 800e352:	f000 b8d8 	b.w	800e506 <__retarget_lock_acquire_recursive>
 800e356:	bf00      	nop
 800e358:	200063e1 	.word	0x200063e1

0800e35c <__sfp_lock_release>:
 800e35c:	4801      	ldr	r0, [pc, #4]	; (800e364 <__sfp_lock_release+0x8>)
 800e35e:	f000 b8d3 	b.w	800e508 <__retarget_lock_release_recursive>
 800e362:	bf00      	nop
 800e364:	200063e1 	.word	0x200063e1

0800e368 <__sinit_lock_acquire>:
 800e368:	4801      	ldr	r0, [pc, #4]	; (800e370 <__sinit_lock_acquire+0x8>)
 800e36a:	f000 b8cc 	b.w	800e506 <__retarget_lock_acquire_recursive>
 800e36e:	bf00      	nop
 800e370:	200063e2 	.word	0x200063e2

0800e374 <__sinit_lock_release>:
 800e374:	4801      	ldr	r0, [pc, #4]	; (800e37c <__sinit_lock_release+0x8>)
 800e376:	f000 b8c7 	b.w	800e508 <__retarget_lock_release_recursive>
 800e37a:	bf00      	nop
 800e37c:	200063e2 	.word	0x200063e2

0800e380 <__sinit>:
 800e380:	b510      	push	{r4, lr}
 800e382:	4604      	mov	r4, r0
 800e384:	f7ff fff0 	bl	800e368 <__sinit_lock_acquire>
 800e388:	69a3      	ldr	r3, [r4, #24]
 800e38a:	b11b      	cbz	r3, 800e394 <__sinit+0x14>
 800e38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e390:	f7ff bff0 	b.w	800e374 <__sinit_lock_release>
 800e394:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e398:	6523      	str	r3, [r4, #80]	; 0x50
 800e39a:	4b13      	ldr	r3, [pc, #76]	; (800e3e8 <__sinit+0x68>)
 800e39c:	4a13      	ldr	r2, [pc, #76]	; (800e3ec <__sinit+0x6c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e3a2:	42a3      	cmp	r3, r4
 800e3a4:	bf04      	itt	eq
 800e3a6:	2301      	moveq	r3, #1
 800e3a8:	61a3      	streq	r3, [r4, #24]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 f820 	bl	800e3f0 <__sfp>
 800e3b0:	6060      	str	r0, [r4, #4]
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 f81c 	bl	800e3f0 <__sfp>
 800e3b8:	60a0      	str	r0, [r4, #8]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 f818 	bl	800e3f0 <__sfp>
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	60e0      	str	r0, [r4, #12]
 800e3c4:	2104      	movs	r1, #4
 800e3c6:	6860      	ldr	r0, [r4, #4]
 800e3c8:	f7ff ff82 	bl	800e2d0 <std>
 800e3cc:	68a0      	ldr	r0, [r4, #8]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	2109      	movs	r1, #9
 800e3d2:	f7ff ff7d 	bl	800e2d0 <std>
 800e3d6:	68e0      	ldr	r0, [r4, #12]
 800e3d8:	2202      	movs	r2, #2
 800e3da:	2112      	movs	r1, #18
 800e3dc:	f7ff ff78 	bl	800e2d0 <std>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	61a3      	str	r3, [r4, #24]
 800e3e4:	e7d2      	b.n	800e38c <__sinit+0xc>
 800e3e6:	bf00      	nop
 800e3e8:	08015834 	.word	0x08015834
 800e3ec:	0800e319 	.word	0x0800e319

0800e3f0 <__sfp>:
 800e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	f7ff ffac 	bl	800e350 <__sfp_lock_acquire>
 800e3f8:	4b1e      	ldr	r3, [pc, #120]	; (800e474 <__sfp+0x84>)
 800e3fa:	681e      	ldr	r6, [r3, #0]
 800e3fc:	69b3      	ldr	r3, [r6, #24]
 800e3fe:	b913      	cbnz	r3, 800e406 <__sfp+0x16>
 800e400:	4630      	mov	r0, r6
 800e402:	f7ff ffbd 	bl	800e380 <__sinit>
 800e406:	3648      	adds	r6, #72	; 0x48
 800e408:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	d503      	bpl.n	800e418 <__sfp+0x28>
 800e410:	6833      	ldr	r3, [r6, #0]
 800e412:	b30b      	cbz	r3, 800e458 <__sfp+0x68>
 800e414:	6836      	ldr	r6, [r6, #0]
 800e416:	e7f7      	b.n	800e408 <__sfp+0x18>
 800e418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e41c:	b9d5      	cbnz	r5, 800e454 <__sfp+0x64>
 800e41e:	4b16      	ldr	r3, [pc, #88]	; (800e478 <__sfp+0x88>)
 800e420:	60e3      	str	r3, [r4, #12]
 800e422:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e426:	6665      	str	r5, [r4, #100]	; 0x64
 800e428:	f000 f86c 	bl	800e504 <__retarget_lock_init_recursive>
 800e42c:	f7ff ff96 	bl	800e35c <__sfp_lock_release>
 800e430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e438:	6025      	str	r5, [r4, #0]
 800e43a:	61a5      	str	r5, [r4, #24]
 800e43c:	2208      	movs	r2, #8
 800e43e:	4629      	mov	r1, r5
 800e440:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e444:	f000 f86f 	bl	800e526 <memset>
 800e448:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e44c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e450:	4620      	mov	r0, r4
 800e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e454:	3468      	adds	r4, #104	; 0x68
 800e456:	e7d9      	b.n	800e40c <__sfp+0x1c>
 800e458:	2104      	movs	r1, #4
 800e45a:	4638      	mov	r0, r7
 800e45c:	f7ff ff62 	bl	800e324 <__sfmoreglue>
 800e460:	4604      	mov	r4, r0
 800e462:	6030      	str	r0, [r6, #0]
 800e464:	2800      	cmp	r0, #0
 800e466:	d1d5      	bne.n	800e414 <__sfp+0x24>
 800e468:	f7ff ff78 	bl	800e35c <__sfp_lock_release>
 800e46c:	230c      	movs	r3, #12
 800e46e:	603b      	str	r3, [r7, #0]
 800e470:	e7ee      	b.n	800e450 <__sfp+0x60>
 800e472:	bf00      	nop
 800e474:	08015834 	.word	0x08015834
 800e478:	ffff0001 	.word	0xffff0001

0800e47c <_fwalk_reent>:
 800e47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e480:	4606      	mov	r6, r0
 800e482:	4688      	mov	r8, r1
 800e484:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e488:	2700      	movs	r7, #0
 800e48a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e48e:	f1b9 0901 	subs.w	r9, r9, #1
 800e492:	d505      	bpl.n	800e4a0 <_fwalk_reent+0x24>
 800e494:	6824      	ldr	r4, [r4, #0]
 800e496:	2c00      	cmp	r4, #0
 800e498:	d1f7      	bne.n	800e48a <_fwalk_reent+0xe>
 800e49a:	4638      	mov	r0, r7
 800e49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a0:	89ab      	ldrh	r3, [r5, #12]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d907      	bls.n	800e4b6 <_fwalk_reent+0x3a>
 800e4a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	d003      	beq.n	800e4b6 <_fwalk_reent+0x3a>
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	47c0      	blx	r8
 800e4b4:	4307      	orrs	r7, r0
 800e4b6:	3568      	adds	r5, #104	; 0x68
 800e4b8:	e7e9      	b.n	800e48e <_fwalk_reent+0x12>
	...

0800e4bc <__libc_init_array>:
 800e4bc:	b570      	push	{r4, r5, r6, lr}
 800e4be:	4d0d      	ldr	r5, [pc, #52]	; (800e4f4 <__libc_init_array+0x38>)
 800e4c0:	4c0d      	ldr	r4, [pc, #52]	; (800e4f8 <__libc_init_array+0x3c>)
 800e4c2:	1b64      	subs	r4, r4, r5
 800e4c4:	10a4      	asrs	r4, r4, #2
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	42a6      	cmp	r6, r4
 800e4ca:	d109      	bne.n	800e4e0 <__libc_init_array+0x24>
 800e4cc:	4d0b      	ldr	r5, [pc, #44]	; (800e4fc <__libc_init_array+0x40>)
 800e4ce:	4c0c      	ldr	r4, [pc, #48]	; (800e500 <__libc_init_array+0x44>)
 800e4d0:	f004 fc08 	bl	8012ce4 <_init>
 800e4d4:	1b64      	subs	r4, r4, r5
 800e4d6:	10a4      	asrs	r4, r4, #2
 800e4d8:	2600      	movs	r6, #0
 800e4da:	42a6      	cmp	r6, r4
 800e4dc:	d105      	bne.n	800e4ea <__libc_init_array+0x2e>
 800e4de:	bd70      	pop	{r4, r5, r6, pc}
 800e4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4e4:	4798      	blx	r3
 800e4e6:	3601      	adds	r6, #1
 800e4e8:	e7ee      	b.n	800e4c8 <__libc_init_array+0xc>
 800e4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4ee:	4798      	blx	r3
 800e4f0:	3601      	adds	r6, #1
 800e4f2:	e7f2      	b.n	800e4da <__libc_init_array+0x1e>
 800e4f4:	08015c84 	.word	0x08015c84
 800e4f8:	08015c84 	.word	0x08015c84
 800e4fc:	08015c84 	.word	0x08015c84
 800e500:	08015c88 	.word	0x08015c88

0800e504 <__retarget_lock_init_recursive>:
 800e504:	4770      	bx	lr

0800e506 <__retarget_lock_acquire_recursive>:
 800e506:	4770      	bx	lr

0800e508 <__retarget_lock_release_recursive>:
 800e508:	4770      	bx	lr

0800e50a <memcpy>:
 800e50a:	440a      	add	r2, r1
 800e50c:	4291      	cmp	r1, r2
 800e50e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e512:	d100      	bne.n	800e516 <memcpy+0xc>
 800e514:	4770      	bx	lr
 800e516:	b510      	push	{r4, lr}
 800e518:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e51c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e520:	4291      	cmp	r1, r2
 800e522:	d1f9      	bne.n	800e518 <memcpy+0xe>
 800e524:	bd10      	pop	{r4, pc}

0800e526 <memset>:
 800e526:	4402      	add	r2, r0
 800e528:	4603      	mov	r3, r0
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d100      	bne.n	800e530 <memset+0xa>
 800e52e:	4770      	bx	lr
 800e530:	f803 1b01 	strb.w	r1, [r3], #1
 800e534:	e7f9      	b.n	800e52a <memset+0x4>
	...

0800e538 <sbrk_aligned>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4e0e      	ldr	r6, [pc, #56]	; (800e574 <sbrk_aligned+0x3c>)
 800e53c:	460c      	mov	r4, r1
 800e53e:	6831      	ldr	r1, [r6, #0]
 800e540:	4605      	mov	r5, r0
 800e542:	b911      	cbnz	r1, 800e54a <sbrk_aligned+0x12>
 800e544:	f000 ff70 	bl	800f428 <_sbrk_r>
 800e548:	6030      	str	r0, [r6, #0]
 800e54a:	4621      	mov	r1, r4
 800e54c:	4628      	mov	r0, r5
 800e54e:	f000 ff6b 	bl	800f428 <_sbrk_r>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	d00a      	beq.n	800e56c <sbrk_aligned+0x34>
 800e556:	1cc4      	adds	r4, r0, #3
 800e558:	f024 0403 	bic.w	r4, r4, #3
 800e55c:	42a0      	cmp	r0, r4
 800e55e:	d007      	beq.n	800e570 <sbrk_aligned+0x38>
 800e560:	1a21      	subs	r1, r4, r0
 800e562:	4628      	mov	r0, r5
 800e564:	f000 ff60 	bl	800f428 <_sbrk_r>
 800e568:	3001      	adds	r0, #1
 800e56a:	d101      	bne.n	800e570 <sbrk_aligned+0x38>
 800e56c:	f04f 34ff 	mov.w	r4, #4294967295
 800e570:	4620      	mov	r0, r4
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	200063e8 	.word	0x200063e8

0800e578 <_malloc_r>:
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	1ccd      	adds	r5, r1, #3
 800e57e:	f025 0503 	bic.w	r5, r5, #3
 800e582:	3508      	adds	r5, #8
 800e584:	2d0c      	cmp	r5, #12
 800e586:	bf38      	it	cc
 800e588:	250c      	movcc	r5, #12
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	4607      	mov	r7, r0
 800e58e:	db01      	blt.n	800e594 <_malloc_r+0x1c>
 800e590:	42a9      	cmp	r1, r5
 800e592:	d905      	bls.n	800e5a0 <_malloc_r+0x28>
 800e594:	230c      	movs	r3, #12
 800e596:	603b      	str	r3, [r7, #0]
 800e598:	2600      	movs	r6, #0
 800e59a:	4630      	mov	r0, r6
 800e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a0:	4e2e      	ldr	r6, [pc, #184]	; (800e65c <_malloc_r+0xe4>)
 800e5a2:	f003 f969 	bl	8011878 <__malloc_lock>
 800e5a6:	6833      	ldr	r3, [r6, #0]
 800e5a8:	461c      	mov	r4, r3
 800e5aa:	bb34      	cbnz	r4, 800e5fa <_malloc_r+0x82>
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4638      	mov	r0, r7
 800e5b0:	f7ff ffc2 	bl	800e538 <sbrk_aligned>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	4604      	mov	r4, r0
 800e5b8:	d14d      	bne.n	800e656 <_malloc_r+0xde>
 800e5ba:	6834      	ldr	r4, [r6, #0]
 800e5bc:	4626      	mov	r6, r4
 800e5be:	2e00      	cmp	r6, #0
 800e5c0:	d140      	bne.n	800e644 <_malloc_r+0xcc>
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	4631      	mov	r1, r6
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	eb04 0803 	add.w	r8, r4, r3
 800e5cc:	f000 ff2c 	bl	800f428 <_sbrk_r>
 800e5d0:	4580      	cmp	r8, r0
 800e5d2:	d13a      	bne.n	800e64a <_malloc_r+0xd2>
 800e5d4:	6821      	ldr	r1, [r4, #0]
 800e5d6:	3503      	adds	r5, #3
 800e5d8:	1a6d      	subs	r5, r5, r1
 800e5da:	f025 0503 	bic.w	r5, r5, #3
 800e5de:	3508      	adds	r5, #8
 800e5e0:	2d0c      	cmp	r5, #12
 800e5e2:	bf38      	it	cc
 800e5e4:	250c      	movcc	r5, #12
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f7ff ffa5 	bl	800e538 <sbrk_aligned>
 800e5ee:	3001      	adds	r0, #1
 800e5f0:	d02b      	beq.n	800e64a <_malloc_r+0xd2>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	442b      	add	r3, r5
 800e5f6:	6023      	str	r3, [r4, #0]
 800e5f8:	e00e      	b.n	800e618 <_malloc_r+0xa0>
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	1b52      	subs	r2, r2, r5
 800e5fe:	d41e      	bmi.n	800e63e <_malloc_r+0xc6>
 800e600:	2a0b      	cmp	r2, #11
 800e602:	d916      	bls.n	800e632 <_malloc_r+0xba>
 800e604:	1961      	adds	r1, r4, r5
 800e606:	42a3      	cmp	r3, r4
 800e608:	6025      	str	r5, [r4, #0]
 800e60a:	bf18      	it	ne
 800e60c:	6059      	strne	r1, [r3, #4]
 800e60e:	6863      	ldr	r3, [r4, #4]
 800e610:	bf08      	it	eq
 800e612:	6031      	streq	r1, [r6, #0]
 800e614:	5162      	str	r2, [r4, r5]
 800e616:	604b      	str	r3, [r1, #4]
 800e618:	4638      	mov	r0, r7
 800e61a:	f104 060b 	add.w	r6, r4, #11
 800e61e:	f003 f931 	bl	8011884 <__malloc_unlock>
 800e622:	f026 0607 	bic.w	r6, r6, #7
 800e626:	1d23      	adds	r3, r4, #4
 800e628:	1af2      	subs	r2, r6, r3
 800e62a:	d0b6      	beq.n	800e59a <_malloc_r+0x22>
 800e62c:	1b9b      	subs	r3, r3, r6
 800e62e:	50a3      	str	r3, [r4, r2]
 800e630:	e7b3      	b.n	800e59a <_malloc_r+0x22>
 800e632:	6862      	ldr	r2, [r4, #4]
 800e634:	42a3      	cmp	r3, r4
 800e636:	bf0c      	ite	eq
 800e638:	6032      	streq	r2, [r6, #0]
 800e63a:	605a      	strne	r2, [r3, #4]
 800e63c:	e7ec      	b.n	800e618 <_malloc_r+0xa0>
 800e63e:	4623      	mov	r3, r4
 800e640:	6864      	ldr	r4, [r4, #4]
 800e642:	e7b2      	b.n	800e5aa <_malloc_r+0x32>
 800e644:	4634      	mov	r4, r6
 800e646:	6876      	ldr	r6, [r6, #4]
 800e648:	e7b9      	b.n	800e5be <_malloc_r+0x46>
 800e64a:	230c      	movs	r3, #12
 800e64c:	603b      	str	r3, [r7, #0]
 800e64e:	4638      	mov	r0, r7
 800e650:	f003 f918 	bl	8011884 <__malloc_unlock>
 800e654:	e7a1      	b.n	800e59a <_malloc_r+0x22>
 800e656:	6025      	str	r5, [r4, #0]
 800e658:	e7de      	b.n	800e618 <_malloc_r+0xa0>
 800e65a:	bf00      	nop
 800e65c:	200063e4 	.word	0x200063e4

0800e660 <__cvt>:
 800e660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e664:	ec55 4b10 	vmov	r4, r5, d0
 800e668:	2d00      	cmp	r5, #0
 800e66a:	460e      	mov	r6, r1
 800e66c:	4619      	mov	r1, r3
 800e66e:	462b      	mov	r3, r5
 800e670:	bfbb      	ittet	lt
 800e672:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e676:	461d      	movlt	r5, r3
 800e678:	2300      	movge	r3, #0
 800e67a:	232d      	movlt	r3, #45	; 0x2d
 800e67c:	700b      	strb	r3, [r1, #0]
 800e67e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e680:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e684:	4691      	mov	r9, r2
 800e686:	f023 0820 	bic.w	r8, r3, #32
 800e68a:	bfbc      	itt	lt
 800e68c:	4622      	movlt	r2, r4
 800e68e:	4614      	movlt	r4, r2
 800e690:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e694:	d005      	beq.n	800e6a2 <__cvt+0x42>
 800e696:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e69a:	d100      	bne.n	800e69e <__cvt+0x3e>
 800e69c:	3601      	adds	r6, #1
 800e69e:	2102      	movs	r1, #2
 800e6a0:	e000      	b.n	800e6a4 <__cvt+0x44>
 800e6a2:	2103      	movs	r1, #3
 800e6a4:	ab03      	add	r3, sp, #12
 800e6a6:	9301      	str	r3, [sp, #4]
 800e6a8:	ab02      	add	r3, sp, #8
 800e6aa:	9300      	str	r3, [sp, #0]
 800e6ac:	ec45 4b10 	vmov	d0, r4, r5
 800e6b0:	4653      	mov	r3, sl
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	f001 fe90 	bl	80103d8 <_dtoa_r>
 800e6b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e6bc:	4607      	mov	r7, r0
 800e6be:	d102      	bne.n	800e6c6 <__cvt+0x66>
 800e6c0:	f019 0f01 	tst.w	r9, #1
 800e6c4:	d022      	beq.n	800e70c <__cvt+0xac>
 800e6c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e6ca:	eb07 0906 	add.w	r9, r7, r6
 800e6ce:	d110      	bne.n	800e6f2 <__cvt+0x92>
 800e6d0:	783b      	ldrb	r3, [r7, #0]
 800e6d2:	2b30      	cmp	r3, #48	; 0x30
 800e6d4:	d10a      	bne.n	800e6ec <__cvt+0x8c>
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4620      	mov	r0, r4
 800e6dc:	4629      	mov	r1, r5
 800e6de:	f7f2 fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6e2:	b918      	cbnz	r0, 800e6ec <__cvt+0x8c>
 800e6e4:	f1c6 0601 	rsb	r6, r6, #1
 800e6e8:	f8ca 6000 	str.w	r6, [sl]
 800e6ec:	f8da 3000 	ldr.w	r3, [sl]
 800e6f0:	4499      	add	r9, r3
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	f7f2 f9f5 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6fe:	b108      	cbz	r0, 800e704 <__cvt+0xa4>
 800e700:	f8cd 900c 	str.w	r9, [sp, #12]
 800e704:	2230      	movs	r2, #48	; 0x30
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	454b      	cmp	r3, r9
 800e70a:	d307      	bcc.n	800e71c <__cvt+0xbc>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e710:	1bdb      	subs	r3, r3, r7
 800e712:	4638      	mov	r0, r7
 800e714:	6013      	str	r3, [r2, #0]
 800e716:	b004      	add	sp, #16
 800e718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e71c:	1c59      	adds	r1, r3, #1
 800e71e:	9103      	str	r1, [sp, #12]
 800e720:	701a      	strb	r2, [r3, #0]
 800e722:	e7f0      	b.n	800e706 <__cvt+0xa6>

0800e724 <__exponent>:
 800e724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e726:	4603      	mov	r3, r0
 800e728:	2900      	cmp	r1, #0
 800e72a:	bfb8      	it	lt
 800e72c:	4249      	neglt	r1, r1
 800e72e:	f803 2b02 	strb.w	r2, [r3], #2
 800e732:	bfb4      	ite	lt
 800e734:	222d      	movlt	r2, #45	; 0x2d
 800e736:	222b      	movge	r2, #43	; 0x2b
 800e738:	2909      	cmp	r1, #9
 800e73a:	7042      	strb	r2, [r0, #1]
 800e73c:	dd2a      	ble.n	800e794 <__exponent+0x70>
 800e73e:	f10d 0407 	add.w	r4, sp, #7
 800e742:	46a4      	mov	ip, r4
 800e744:	270a      	movs	r7, #10
 800e746:	46a6      	mov	lr, r4
 800e748:	460a      	mov	r2, r1
 800e74a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e74e:	fb07 1516 	mls	r5, r7, r6, r1
 800e752:	3530      	adds	r5, #48	; 0x30
 800e754:	2a63      	cmp	r2, #99	; 0x63
 800e756:	f104 34ff 	add.w	r4, r4, #4294967295
 800e75a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e75e:	4631      	mov	r1, r6
 800e760:	dcf1      	bgt.n	800e746 <__exponent+0x22>
 800e762:	3130      	adds	r1, #48	; 0x30
 800e764:	f1ae 0502 	sub.w	r5, lr, #2
 800e768:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e76c:	1c44      	adds	r4, r0, #1
 800e76e:	4629      	mov	r1, r5
 800e770:	4561      	cmp	r1, ip
 800e772:	d30a      	bcc.n	800e78a <__exponent+0x66>
 800e774:	f10d 0209 	add.w	r2, sp, #9
 800e778:	eba2 020e 	sub.w	r2, r2, lr
 800e77c:	4565      	cmp	r5, ip
 800e77e:	bf88      	it	hi
 800e780:	2200      	movhi	r2, #0
 800e782:	4413      	add	r3, r2
 800e784:	1a18      	subs	r0, r3, r0
 800e786:	b003      	add	sp, #12
 800e788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e78e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e792:	e7ed      	b.n	800e770 <__exponent+0x4c>
 800e794:	2330      	movs	r3, #48	; 0x30
 800e796:	3130      	adds	r1, #48	; 0x30
 800e798:	7083      	strb	r3, [r0, #2]
 800e79a:	70c1      	strb	r1, [r0, #3]
 800e79c:	1d03      	adds	r3, r0, #4
 800e79e:	e7f1      	b.n	800e784 <__exponent+0x60>

0800e7a0 <_printf_float>:
 800e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a4:	ed2d 8b02 	vpush	{d8}
 800e7a8:	b08d      	sub	sp, #52	; 0x34
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e7b0:	4616      	mov	r6, r2
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	f003 f82f 	bl	8011818 <_localeconv_r>
 800e7ba:	f8d0 a000 	ldr.w	sl, [r0]
 800e7be:	4650      	mov	r0, sl
 800e7c0:	f7f1 fd16 	bl	80001f0 <strlen>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	9305      	str	r3, [sp, #20]
 800e7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800e7d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e7d4:	3307      	adds	r3, #7
 800e7d6:	f023 0307 	bic.w	r3, r3, #7
 800e7da:	f103 0208 	add.w	r2, r3, #8
 800e7de:	f8c8 2000 	str.w	r2, [r8]
 800e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e7ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e7ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7f2:	9307      	str	r3, [sp, #28]
 800e7f4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7f8:	ee08 0a10 	vmov	s16, r0
 800e7fc:	4b9f      	ldr	r3, [pc, #636]	; (800ea7c <_printf_float+0x2dc>)
 800e7fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e802:	f04f 32ff 	mov.w	r2, #4294967295
 800e806:	f7f2 f9a1 	bl	8000b4c <__aeabi_dcmpun>
 800e80a:	bb88      	cbnz	r0, 800e870 <_printf_float+0xd0>
 800e80c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e810:	4b9a      	ldr	r3, [pc, #616]	; (800ea7c <_printf_float+0x2dc>)
 800e812:	f04f 32ff 	mov.w	r2, #4294967295
 800e816:	f7f2 f97b 	bl	8000b10 <__aeabi_dcmple>
 800e81a:	bb48      	cbnz	r0, 800e870 <_printf_float+0xd0>
 800e81c:	2200      	movs	r2, #0
 800e81e:	2300      	movs	r3, #0
 800e820:	4640      	mov	r0, r8
 800e822:	4649      	mov	r1, r9
 800e824:	f7f2 f96a 	bl	8000afc <__aeabi_dcmplt>
 800e828:	b110      	cbz	r0, 800e830 <_printf_float+0x90>
 800e82a:	232d      	movs	r3, #45	; 0x2d
 800e82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e830:	4b93      	ldr	r3, [pc, #588]	; (800ea80 <_printf_float+0x2e0>)
 800e832:	4894      	ldr	r0, [pc, #592]	; (800ea84 <_printf_float+0x2e4>)
 800e834:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e838:	bf94      	ite	ls
 800e83a:	4698      	movls	r8, r3
 800e83c:	4680      	movhi	r8, r0
 800e83e:	2303      	movs	r3, #3
 800e840:	6123      	str	r3, [r4, #16]
 800e842:	9b05      	ldr	r3, [sp, #20]
 800e844:	f023 0204 	bic.w	r2, r3, #4
 800e848:	6022      	str	r2, [r4, #0]
 800e84a:	f04f 0900 	mov.w	r9, #0
 800e84e:	9700      	str	r7, [sp, #0]
 800e850:	4633      	mov	r3, r6
 800e852:	aa0b      	add	r2, sp, #44	; 0x2c
 800e854:	4621      	mov	r1, r4
 800e856:	4628      	mov	r0, r5
 800e858:	f000 f9d8 	bl	800ec0c <_printf_common>
 800e85c:	3001      	adds	r0, #1
 800e85e:	f040 8090 	bne.w	800e982 <_printf_float+0x1e2>
 800e862:	f04f 30ff 	mov.w	r0, #4294967295
 800e866:	b00d      	add	sp, #52	; 0x34
 800e868:	ecbd 8b02 	vpop	{d8}
 800e86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e870:	4642      	mov	r2, r8
 800e872:	464b      	mov	r3, r9
 800e874:	4640      	mov	r0, r8
 800e876:	4649      	mov	r1, r9
 800e878:	f7f2 f968 	bl	8000b4c <__aeabi_dcmpun>
 800e87c:	b140      	cbz	r0, 800e890 <_printf_float+0xf0>
 800e87e:	464b      	mov	r3, r9
 800e880:	2b00      	cmp	r3, #0
 800e882:	bfbc      	itt	lt
 800e884:	232d      	movlt	r3, #45	; 0x2d
 800e886:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e88a:	487f      	ldr	r0, [pc, #508]	; (800ea88 <_printf_float+0x2e8>)
 800e88c:	4b7f      	ldr	r3, [pc, #508]	; (800ea8c <_printf_float+0x2ec>)
 800e88e:	e7d1      	b.n	800e834 <_printf_float+0x94>
 800e890:	6863      	ldr	r3, [r4, #4]
 800e892:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e896:	9206      	str	r2, [sp, #24]
 800e898:	1c5a      	adds	r2, r3, #1
 800e89a:	d13f      	bne.n	800e91c <_printf_float+0x17c>
 800e89c:	2306      	movs	r3, #6
 800e89e:	6063      	str	r3, [r4, #4]
 800e8a0:	9b05      	ldr	r3, [sp, #20]
 800e8a2:	6861      	ldr	r1, [r4, #4]
 800e8a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	9303      	str	r3, [sp, #12]
 800e8ac:	ab0a      	add	r3, sp, #40	; 0x28
 800e8ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e8b2:	ab09      	add	r3, sp, #36	; 0x24
 800e8b4:	ec49 8b10 	vmov	d0, r8, r9
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	6022      	str	r2, [r4, #0]
 800e8bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f7ff fecd 	bl	800e660 <__cvt>
 800e8c6:	9b06      	ldr	r3, [sp, #24]
 800e8c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8ca:	2b47      	cmp	r3, #71	; 0x47
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	d108      	bne.n	800e8e2 <_printf_float+0x142>
 800e8d0:	1cc8      	adds	r0, r1, #3
 800e8d2:	db02      	blt.n	800e8da <_printf_float+0x13a>
 800e8d4:	6863      	ldr	r3, [r4, #4]
 800e8d6:	4299      	cmp	r1, r3
 800e8d8:	dd41      	ble.n	800e95e <_printf_float+0x1be>
 800e8da:	f1ab 0b02 	sub.w	fp, fp, #2
 800e8de:	fa5f fb8b 	uxtb.w	fp, fp
 800e8e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8e6:	d820      	bhi.n	800e92a <_printf_float+0x18a>
 800e8e8:	3901      	subs	r1, #1
 800e8ea:	465a      	mov	r2, fp
 800e8ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8f0:	9109      	str	r1, [sp, #36]	; 0x24
 800e8f2:	f7ff ff17 	bl	800e724 <__exponent>
 800e8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8f8:	1813      	adds	r3, r2, r0
 800e8fa:	2a01      	cmp	r2, #1
 800e8fc:	4681      	mov	r9, r0
 800e8fe:	6123      	str	r3, [r4, #16]
 800e900:	dc02      	bgt.n	800e908 <_printf_float+0x168>
 800e902:	6822      	ldr	r2, [r4, #0]
 800e904:	07d2      	lsls	r2, r2, #31
 800e906:	d501      	bpl.n	800e90c <_printf_float+0x16c>
 800e908:	3301      	adds	r3, #1
 800e90a:	6123      	str	r3, [r4, #16]
 800e90c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e910:	2b00      	cmp	r3, #0
 800e912:	d09c      	beq.n	800e84e <_printf_float+0xae>
 800e914:	232d      	movs	r3, #45	; 0x2d
 800e916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e91a:	e798      	b.n	800e84e <_printf_float+0xae>
 800e91c:	9a06      	ldr	r2, [sp, #24]
 800e91e:	2a47      	cmp	r2, #71	; 0x47
 800e920:	d1be      	bne.n	800e8a0 <_printf_float+0x100>
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1bc      	bne.n	800e8a0 <_printf_float+0x100>
 800e926:	2301      	movs	r3, #1
 800e928:	e7b9      	b.n	800e89e <_printf_float+0xfe>
 800e92a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e92e:	d118      	bne.n	800e962 <_printf_float+0x1c2>
 800e930:	2900      	cmp	r1, #0
 800e932:	6863      	ldr	r3, [r4, #4]
 800e934:	dd0b      	ble.n	800e94e <_printf_float+0x1ae>
 800e936:	6121      	str	r1, [r4, #16]
 800e938:	b913      	cbnz	r3, 800e940 <_printf_float+0x1a0>
 800e93a:	6822      	ldr	r2, [r4, #0]
 800e93c:	07d0      	lsls	r0, r2, #31
 800e93e:	d502      	bpl.n	800e946 <_printf_float+0x1a6>
 800e940:	3301      	adds	r3, #1
 800e942:	440b      	add	r3, r1
 800e944:	6123      	str	r3, [r4, #16]
 800e946:	65a1      	str	r1, [r4, #88]	; 0x58
 800e948:	f04f 0900 	mov.w	r9, #0
 800e94c:	e7de      	b.n	800e90c <_printf_float+0x16c>
 800e94e:	b913      	cbnz	r3, 800e956 <_printf_float+0x1b6>
 800e950:	6822      	ldr	r2, [r4, #0]
 800e952:	07d2      	lsls	r2, r2, #31
 800e954:	d501      	bpl.n	800e95a <_printf_float+0x1ba>
 800e956:	3302      	adds	r3, #2
 800e958:	e7f4      	b.n	800e944 <_printf_float+0x1a4>
 800e95a:	2301      	movs	r3, #1
 800e95c:	e7f2      	b.n	800e944 <_printf_float+0x1a4>
 800e95e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e964:	4299      	cmp	r1, r3
 800e966:	db05      	blt.n	800e974 <_printf_float+0x1d4>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	6121      	str	r1, [r4, #16]
 800e96c:	07d8      	lsls	r0, r3, #31
 800e96e:	d5ea      	bpl.n	800e946 <_printf_float+0x1a6>
 800e970:	1c4b      	adds	r3, r1, #1
 800e972:	e7e7      	b.n	800e944 <_printf_float+0x1a4>
 800e974:	2900      	cmp	r1, #0
 800e976:	bfd4      	ite	le
 800e978:	f1c1 0202 	rsble	r2, r1, #2
 800e97c:	2201      	movgt	r2, #1
 800e97e:	4413      	add	r3, r2
 800e980:	e7e0      	b.n	800e944 <_printf_float+0x1a4>
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	055a      	lsls	r2, r3, #21
 800e986:	d407      	bmi.n	800e998 <_printf_float+0x1f8>
 800e988:	6923      	ldr	r3, [r4, #16]
 800e98a:	4642      	mov	r2, r8
 800e98c:	4631      	mov	r1, r6
 800e98e:	4628      	mov	r0, r5
 800e990:	47b8      	blx	r7
 800e992:	3001      	adds	r0, #1
 800e994:	d12c      	bne.n	800e9f0 <_printf_float+0x250>
 800e996:	e764      	b.n	800e862 <_printf_float+0xc2>
 800e998:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e99c:	f240 80e0 	bls.w	800eb60 <_printf_float+0x3c0>
 800e9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f7f2 f89e 	bl	8000ae8 <__aeabi_dcmpeq>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	d034      	beq.n	800ea1a <_printf_float+0x27a>
 800e9b0:	4a37      	ldr	r2, [pc, #220]	; (800ea90 <_printf_float+0x2f0>)
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	47b8      	blx	r7
 800e9ba:	3001      	adds	r0, #1
 800e9bc:	f43f af51 	beq.w	800e862 <_printf_float+0xc2>
 800e9c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	db02      	blt.n	800e9ce <_printf_float+0x22e>
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	07d8      	lsls	r0, r3, #31
 800e9cc:	d510      	bpl.n	800e9f0 <_printf_float+0x250>
 800e9ce:	ee18 3a10 	vmov	r3, s16
 800e9d2:	4652      	mov	r2, sl
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	47b8      	blx	r7
 800e9da:	3001      	adds	r0, #1
 800e9dc:	f43f af41 	beq.w	800e862 <_printf_float+0xc2>
 800e9e0:	f04f 0800 	mov.w	r8, #0
 800e9e4:	f104 091a 	add.w	r9, r4, #26
 800e9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	4543      	cmp	r3, r8
 800e9ee:	dc09      	bgt.n	800ea04 <_printf_float+0x264>
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	079b      	lsls	r3, r3, #30
 800e9f4:	f100 8105 	bmi.w	800ec02 <_printf_float+0x462>
 800e9f8:	68e0      	ldr	r0, [r4, #12]
 800e9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9fc:	4298      	cmp	r0, r3
 800e9fe:	bfb8      	it	lt
 800ea00:	4618      	movlt	r0, r3
 800ea02:	e730      	b.n	800e866 <_printf_float+0xc6>
 800ea04:	2301      	movs	r3, #1
 800ea06:	464a      	mov	r2, r9
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f af27 	beq.w	800e862 <_printf_float+0xc2>
 800ea14:	f108 0801 	add.w	r8, r8, #1
 800ea18:	e7e6      	b.n	800e9e8 <_printf_float+0x248>
 800ea1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	dc39      	bgt.n	800ea94 <_printf_float+0x2f4>
 800ea20:	4a1b      	ldr	r2, [pc, #108]	; (800ea90 <_printf_float+0x2f0>)
 800ea22:	2301      	movs	r3, #1
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	f43f af19 	beq.w	800e862 <_printf_float+0xc2>
 800ea30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea34:	4313      	orrs	r3, r2
 800ea36:	d102      	bne.n	800ea3e <_printf_float+0x29e>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	07d9      	lsls	r1, r3, #31
 800ea3c:	d5d8      	bpl.n	800e9f0 <_printf_float+0x250>
 800ea3e:	ee18 3a10 	vmov	r3, s16
 800ea42:	4652      	mov	r2, sl
 800ea44:	4631      	mov	r1, r6
 800ea46:	4628      	mov	r0, r5
 800ea48:	47b8      	blx	r7
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	f43f af09 	beq.w	800e862 <_printf_float+0xc2>
 800ea50:	f04f 0900 	mov.w	r9, #0
 800ea54:	f104 0a1a 	add.w	sl, r4, #26
 800ea58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5a:	425b      	negs	r3, r3
 800ea5c:	454b      	cmp	r3, r9
 800ea5e:	dc01      	bgt.n	800ea64 <_printf_float+0x2c4>
 800ea60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea62:	e792      	b.n	800e98a <_printf_float+0x1ea>
 800ea64:	2301      	movs	r3, #1
 800ea66:	4652      	mov	r2, sl
 800ea68:	4631      	mov	r1, r6
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	47b8      	blx	r7
 800ea6e:	3001      	adds	r0, #1
 800ea70:	f43f aef7 	beq.w	800e862 <_printf_float+0xc2>
 800ea74:	f109 0901 	add.w	r9, r9, #1
 800ea78:	e7ee      	b.n	800ea58 <_printf_float+0x2b8>
 800ea7a:	bf00      	nop
 800ea7c:	7fefffff 	.word	0x7fefffff
 800ea80:	08015838 	.word	0x08015838
 800ea84:	0801583c 	.word	0x0801583c
 800ea88:	08015844 	.word	0x08015844
 800ea8c:	08015840 	.word	0x08015840
 800ea90:	08015848 	.word	0x08015848
 800ea94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	bfa8      	it	ge
 800ea9c:	461a      	movge	r2, r3
 800ea9e:	2a00      	cmp	r2, #0
 800eaa0:	4691      	mov	r9, r2
 800eaa2:	dc37      	bgt.n	800eb14 <_printf_float+0x374>
 800eaa4:	f04f 0b00 	mov.w	fp, #0
 800eaa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaac:	f104 021a 	add.w	r2, r4, #26
 800eab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eab2:	9305      	str	r3, [sp, #20]
 800eab4:	eba3 0309 	sub.w	r3, r3, r9
 800eab8:	455b      	cmp	r3, fp
 800eaba:	dc33      	bgt.n	800eb24 <_printf_float+0x384>
 800eabc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eac0:	429a      	cmp	r2, r3
 800eac2:	db3b      	blt.n	800eb3c <_printf_float+0x39c>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	07da      	lsls	r2, r3, #31
 800eac8:	d438      	bmi.n	800eb3c <_printf_float+0x39c>
 800eaca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eacc:	9a05      	ldr	r2, [sp, #20]
 800eace:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ead0:	1a9a      	subs	r2, r3, r2
 800ead2:	eba3 0901 	sub.w	r9, r3, r1
 800ead6:	4591      	cmp	r9, r2
 800ead8:	bfa8      	it	ge
 800eada:	4691      	movge	r9, r2
 800eadc:	f1b9 0f00 	cmp.w	r9, #0
 800eae0:	dc35      	bgt.n	800eb4e <_printf_float+0x3ae>
 800eae2:	f04f 0800 	mov.w	r8, #0
 800eae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaea:	f104 0a1a 	add.w	sl, r4, #26
 800eaee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaf2:	1a9b      	subs	r3, r3, r2
 800eaf4:	eba3 0309 	sub.w	r3, r3, r9
 800eaf8:	4543      	cmp	r3, r8
 800eafa:	f77f af79 	ble.w	800e9f0 <_printf_float+0x250>
 800eafe:	2301      	movs	r3, #1
 800eb00:	4652      	mov	r2, sl
 800eb02:	4631      	mov	r1, r6
 800eb04:	4628      	mov	r0, r5
 800eb06:	47b8      	blx	r7
 800eb08:	3001      	adds	r0, #1
 800eb0a:	f43f aeaa 	beq.w	800e862 <_printf_float+0xc2>
 800eb0e:	f108 0801 	add.w	r8, r8, #1
 800eb12:	e7ec      	b.n	800eaee <_printf_float+0x34e>
 800eb14:	4613      	mov	r3, r2
 800eb16:	4631      	mov	r1, r6
 800eb18:	4642      	mov	r2, r8
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	d1c0      	bne.n	800eaa4 <_printf_float+0x304>
 800eb22:	e69e      	b.n	800e862 <_printf_float+0xc2>
 800eb24:	2301      	movs	r3, #1
 800eb26:	4631      	mov	r1, r6
 800eb28:	4628      	mov	r0, r5
 800eb2a:	9205      	str	r2, [sp, #20]
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f ae97 	beq.w	800e862 <_printf_float+0xc2>
 800eb34:	9a05      	ldr	r2, [sp, #20]
 800eb36:	f10b 0b01 	add.w	fp, fp, #1
 800eb3a:	e7b9      	b.n	800eab0 <_printf_float+0x310>
 800eb3c:	ee18 3a10 	vmov	r3, s16
 800eb40:	4652      	mov	r2, sl
 800eb42:	4631      	mov	r1, r6
 800eb44:	4628      	mov	r0, r5
 800eb46:	47b8      	blx	r7
 800eb48:	3001      	adds	r0, #1
 800eb4a:	d1be      	bne.n	800eaca <_printf_float+0x32a>
 800eb4c:	e689      	b.n	800e862 <_printf_float+0xc2>
 800eb4e:	9a05      	ldr	r2, [sp, #20]
 800eb50:	464b      	mov	r3, r9
 800eb52:	4442      	add	r2, r8
 800eb54:	4631      	mov	r1, r6
 800eb56:	4628      	mov	r0, r5
 800eb58:	47b8      	blx	r7
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d1c1      	bne.n	800eae2 <_printf_float+0x342>
 800eb5e:	e680      	b.n	800e862 <_printf_float+0xc2>
 800eb60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb62:	2a01      	cmp	r2, #1
 800eb64:	dc01      	bgt.n	800eb6a <_printf_float+0x3ca>
 800eb66:	07db      	lsls	r3, r3, #31
 800eb68:	d538      	bpl.n	800ebdc <_printf_float+0x43c>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4642      	mov	r2, r8
 800eb6e:	4631      	mov	r1, r6
 800eb70:	4628      	mov	r0, r5
 800eb72:	47b8      	blx	r7
 800eb74:	3001      	adds	r0, #1
 800eb76:	f43f ae74 	beq.w	800e862 <_printf_float+0xc2>
 800eb7a:	ee18 3a10 	vmov	r3, s16
 800eb7e:	4652      	mov	r2, sl
 800eb80:	4631      	mov	r1, r6
 800eb82:	4628      	mov	r0, r5
 800eb84:	47b8      	blx	r7
 800eb86:	3001      	adds	r0, #1
 800eb88:	f43f ae6b 	beq.w	800e862 <_printf_float+0xc2>
 800eb8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb90:	2200      	movs	r2, #0
 800eb92:	2300      	movs	r3, #0
 800eb94:	f7f1 ffa8 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb98:	b9d8      	cbnz	r0, 800ebd2 <_printf_float+0x432>
 800eb9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb9c:	f108 0201 	add.w	r2, r8, #1
 800eba0:	3b01      	subs	r3, #1
 800eba2:	4631      	mov	r1, r6
 800eba4:	4628      	mov	r0, r5
 800eba6:	47b8      	blx	r7
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d10e      	bne.n	800ebca <_printf_float+0x42a>
 800ebac:	e659      	b.n	800e862 <_printf_float+0xc2>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	47b8      	blx	r7
 800ebb8:	3001      	adds	r0, #1
 800ebba:	f43f ae52 	beq.w	800e862 <_printf_float+0xc2>
 800ebbe:	f108 0801 	add.w	r8, r8, #1
 800ebc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	4543      	cmp	r3, r8
 800ebc8:	dcf1      	bgt.n	800ebae <_printf_float+0x40e>
 800ebca:	464b      	mov	r3, r9
 800ebcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ebd0:	e6dc      	b.n	800e98c <_printf_float+0x1ec>
 800ebd2:	f04f 0800 	mov.w	r8, #0
 800ebd6:	f104 0a1a 	add.w	sl, r4, #26
 800ebda:	e7f2      	b.n	800ebc2 <_printf_float+0x422>
 800ebdc:	2301      	movs	r3, #1
 800ebde:	4642      	mov	r2, r8
 800ebe0:	e7df      	b.n	800eba2 <_printf_float+0x402>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	464a      	mov	r2, r9
 800ebe6:	4631      	mov	r1, r6
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b8      	blx	r7
 800ebec:	3001      	adds	r0, #1
 800ebee:	f43f ae38 	beq.w	800e862 <_printf_float+0xc2>
 800ebf2:	f108 0801 	add.w	r8, r8, #1
 800ebf6:	68e3      	ldr	r3, [r4, #12]
 800ebf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebfa:	1a5b      	subs	r3, r3, r1
 800ebfc:	4543      	cmp	r3, r8
 800ebfe:	dcf0      	bgt.n	800ebe2 <_printf_float+0x442>
 800ec00:	e6fa      	b.n	800e9f8 <_printf_float+0x258>
 800ec02:	f04f 0800 	mov.w	r8, #0
 800ec06:	f104 0919 	add.w	r9, r4, #25
 800ec0a:	e7f4      	b.n	800ebf6 <_printf_float+0x456>

0800ec0c <_printf_common>:
 800ec0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec10:	4616      	mov	r6, r2
 800ec12:	4699      	mov	r9, r3
 800ec14:	688a      	ldr	r2, [r1, #8]
 800ec16:	690b      	ldr	r3, [r1, #16]
 800ec18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	bfb8      	it	lt
 800ec20:	4613      	movlt	r3, r2
 800ec22:	6033      	str	r3, [r6, #0]
 800ec24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec28:	4607      	mov	r7, r0
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	b10a      	cbz	r2, 800ec32 <_printf_common+0x26>
 800ec2e:	3301      	adds	r3, #1
 800ec30:	6033      	str	r3, [r6, #0]
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	0699      	lsls	r1, r3, #26
 800ec36:	bf42      	ittt	mi
 800ec38:	6833      	ldrmi	r3, [r6, #0]
 800ec3a:	3302      	addmi	r3, #2
 800ec3c:	6033      	strmi	r3, [r6, #0]
 800ec3e:	6825      	ldr	r5, [r4, #0]
 800ec40:	f015 0506 	ands.w	r5, r5, #6
 800ec44:	d106      	bne.n	800ec54 <_printf_common+0x48>
 800ec46:	f104 0a19 	add.w	sl, r4, #25
 800ec4a:	68e3      	ldr	r3, [r4, #12]
 800ec4c:	6832      	ldr	r2, [r6, #0]
 800ec4e:	1a9b      	subs	r3, r3, r2
 800ec50:	42ab      	cmp	r3, r5
 800ec52:	dc26      	bgt.n	800eca2 <_printf_common+0x96>
 800ec54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec58:	1e13      	subs	r3, r2, #0
 800ec5a:	6822      	ldr	r2, [r4, #0]
 800ec5c:	bf18      	it	ne
 800ec5e:	2301      	movne	r3, #1
 800ec60:	0692      	lsls	r2, r2, #26
 800ec62:	d42b      	bmi.n	800ecbc <_printf_common+0xb0>
 800ec64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec68:	4649      	mov	r1, r9
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	47c0      	blx	r8
 800ec6e:	3001      	adds	r0, #1
 800ec70:	d01e      	beq.n	800ecb0 <_printf_common+0xa4>
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	68e5      	ldr	r5, [r4, #12]
 800ec76:	6832      	ldr	r2, [r6, #0]
 800ec78:	f003 0306 	and.w	r3, r3, #6
 800ec7c:	2b04      	cmp	r3, #4
 800ec7e:	bf08      	it	eq
 800ec80:	1aad      	subeq	r5, r5, r2
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	6922      	ldr	r2, [r4, #16]
 800ec86:	bf0c      	ite	eq
 800ec88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec8c:	2500      	movne	r5, #0
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	bfc4      	itt	gt
 800ec92:	1a9b      	subgt	r3, r3, r2
 800ec94:	18ed      	addgt	r5, r5, r3
 800ec96:	2600      	movs	r6, #0
 800ec98:	341a      	adds	r4, #26
 800ec9a:	42b5      	cmp	r5, r6
 800ec9c:	d11a      	bne.n	800ecd4 <_printf_common+0xc8>
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e008      	b.n	800ecb4 <_printf_common+0xa8>
 800eca2:	2301      	movs	r3, #1
 800eca4:	4652      	mov	r2, sl
 800eca6:	4649      	mov	r1, r9
 800eca8:	4638      	mov	r0, r7
 800ecaa:	47c0      	blx	r8
 800ecac:	3001      	adds	r0, #1
 800ecae:	d103      	bne.n	800ecb8 <_printf_common+0xac>
 800ecb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb8:	3501      	adds	r5, #1
 800ecba:	e7c6      	b.n	800ec4a <_printf_common+0x3e>
 800ecbc:	18e1      	adds	r1, r4, r3
 800ecbe:	1c5a      	adds	r2, r3, #1
 800ecc0:	2030      	movs	r0, #48	; 0x30
 800ecc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecc6:	4422      	add	r2, r4
 800ecc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecd0:	3302      	adds	r3, #2
 800ecd2:	e7c7      	b.n	800ec64 <_printf_common+0x58>
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	4649      	mov	r1, r9
 800ecda:	4638      	mov	r0, r7
 800ecdc:	47c0      	blx	r8
 800ecde:	3001      	adds	r0, #1
 800ece0:	d0e6      	beq.n	800ecb0 <_printf_common+0xa4>
 800ece2:	3601      	adds	r6, #1
 800ece4:	e7d9      	b.n	800ec9a <_printf_common+0x8e>
	...

0800ece8 <_printf_i>:
 800ece8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecec:	7e0f      	ldrb	r7, [r1, #24]
 800ecee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecf0:	2f78      	cmp	r7, #120	; 0x78
 800ecf2:	4691      	mov	r9, r2
 800ecf4:	4680      	mov	r8, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	469a      	mov	sl, r3
 800ecfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecfe:	d807      	bhi.n	800ed10 <_printf_i+0x28>
 800ed00:	2f62      	cmp	r7, #98	; 0x62
 800ed02:	d80a      	bhi.n	800ed1a <_printf_i+0x32>
 800ed04:	2f00      	cmp	r7, #0
 800ed06:	f000 80d8 	beq.w	800eeba <_printf_i+0x1d2>
 800ed0a:	2f58      	cmp	r7, #88	; 0x58
 800ed0c:	f000 80a3 	beq.w	800ee56 <_printf_i+0x16e>
 800ed10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed18:	e03a      	b.n	800ed90 <_printf_i+0xa8>
 800ed1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed1e:	2b15      	cmp	r3, #21
 800ed20:	d8f6      	bhi.n	800ed10 <_printf_i+0x28>
 800ed22:	a101      	add	r1, pc, #4	; (adr r1, 800ed28 <_printf_i+0x40>)
 800ed24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed28:	0800ed81 	.word	0x0800ed81
 800ed2c:	0800ed95 	.word	0x0800ed95
 800ed30:	0800ed11 	.word	0x0800ed11
 800ed34:	0800ed11 	.word	0x0800ed11
 800ed38:	0800ed11 	.word	0x0800ed11
 800ed3c:	0800ed11 	.word	0x0800ed11
 800ed40:	0800ed95 	.word	0x0800ed95
 800ed44:	0800ed11 	.word	0x0800ed11
 800ed48:	0800ed11 	.word	0x0800ed11
 800ed4c:	0800ed11 	.word	0x0800ed11
 800ed50:	0800ed11 	.word	0x0800ed11
 800ed54:	0800eea1 	.word	0x0800eea1
 800ed58:	0800edc5 	.word	0x0800edc5
 800ed5c:	0800ee83 	.word	0x0800ee83
 800ed60:	0800ed11 	.word	0x0800ed11
 800ed64:	0800ed11 	.word	0x0800ed11
 800ed68:	0800eec3 	.word	0x0800eec3
 800ed6c:	0800ed11 	.word	0x0800ed11
 800ed70:	0800edc5 	.word	0x0800edc5
 800ed74:	0800ed11 	.word	0x0800ed11
 800ed78:	0800ed11 	.word	0x0800ed11
 800ed7c:	0800ee8b 	.word	0x0800ee8b
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	1d1a      	adds	r2, r3, #4
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	602a      	str	r2, [r5, #0]
 800ed88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed90:	2301      	movs	r3, #1
 800ed92:	e0a3      	b.n	800eedc <_printf_i+0x1f4>
 800ed94:	6820      	ldr	r0, [r4, #0]
 800ed96:	6829      	ldr	r1, [r5, #0]
 800ed98:	0606      	lsls	r6, r0, #24
 800ed9a:	f101 0304 	add.w	r3, r1, #4
 800ed9e:	d50a      	bpl.n	800edb6 <_printf_i+0xce>
 800eda0:	680e      	ldr	r6, [r1, #0]
 800eda2:	602b      	str	r3, [r5, #0]
 800eda4:	2e00      	cmp	r6, #0
 800eda6:	da03      	bge.n	800edb0 <_printf_i+0xc8>
 800eda8:	232d      	movs	r3, #45	; 0x2d
 800edaa:	4276      	negs	r6, r6
 800edac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edb0:	485e      	ldr	r0, [pc, #376]	; (800ef2c <_printf_i+0x244>)
 800edb2:	230a      	movs	r3, #10
 800edb4:	e019      	b.n	800edea <_printf_i+0x102>
 800edb6:	680e      	ldr	r6, [r1, #0]
 800edb8:	602b      	str	r3, [r5, #0]
 800edba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800edbe:	bf18      	it	ne
 800edc0:	b236      	sxthne	r6, r6
 800edc2:	e7ef      	b.n	800eda4 <_printf_i+0xbc>
 800edc4:	682b      	ldr	r3, [r5, #0]
 800edc6:	6820      	ldr	r0, [r4, #0]
 800edc8:	1d19      	adds	r1, r3, #4
 800edca:	6029      	str	r1, [r5, #0]
 800edcc:	0601      	lsls	r1, r0, #24
 800edce:	d501      	bpl.n	800edd4 <_printf_i+0xec>
 800edd0:	681e      	ldr	r6, [r3, #0]
 800edd2:	e002      	b.n	800edda <_printf_i+0xf2>
 800edd4:	0646      	lsls	r6, r0, #25
 800edd6:	d5fb      	bpl.n	800edd0 <_printf_i+0xe8>
 800edd8:	881e      	ldrh	r6, [r3, #0]
 800edda:	4854      	ldr	r0, [pc, #336]	; (800ef2c <_printf_i+0x244>)
 800eddc:	2f6f      	cmp	r7, #111	; 0x6f
 800edde:	bf0c      	ite	eq
 800ede0:	2308      	moveq	r3, #8
 800ede2:	230a      	movne	r3, #10
 800ede4:	2100      	movs	r1, #0
 800ede6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edea:	6865      	ldr	r5, [r4, #4]
 800edec:	60a5      	str	r5, [r4, #8]
 800edee:	2d00      	cmp	r5, #0
 800edf0:	bfa2      	ittt	ge
 800edf2:	6821      	ldrge	r1, [r4, #0]
 800edf4:	f021 0104 	bicge.w	r1, r1, #4
 800edf8:	6021      	strge	r1, [r4, #0]
 800edfa:	b90e      	cbnz	r6, 800ee00 <_printf_i+0x118>
 800edfc:	2d00      	cmp	r5, #0
 800edfe:	d04d      	beq.n	800ee9c <_printf_i+0x1b4>
 800ee00:	4615      	mov	r5, r2
 800ee02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee06:	fb03 6711 	mls	r7, r3, r1, r6
 800ee0a:	5dc7      	ldrb	r7, [r0, r7]
 800ee0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee10:	4637      	mov	r7, r6
 800ee12:	42bb      	cmp	r3, r7
 800ee14:	460e      	mov	r6, r1
 800ee16:	d9f4      	bls.n	800ee02 <_printf_i+0x11a>
 800ee18:	2b08      	cmp	r3, #8
 800ee1a:	d10b      	bne.n	800ee34 <_printf_i+0x14c>
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	07de      	lsls	r6, r3, #31
 800ee20:	d508      	bpl.n	800ee34 <_printf_i+0x14c>
 800ee22:	6923      	ldr	r3, [r4, #16]
 800ee24:	6861      	ldr	r1, [r4, #4]
 800ee26:	4299      	cmp	r1, r3
 800ee28:	bfde      	ittt	le
 800ee2a:	2330      	movle	r3, #48	; 0x30
 800ee2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee34:	1b52      	subs	r2, r2, r5
 800ee36:	6122      	str	r2, [r4, #16]
 800ee38:	f8cd a000 	str.w	sl, [sp]
 800ee3c:	464b      	mov	r3, r9
 800ee3e:	aa03      	add	r2, sp, #12
 800ee40:	4621      	mov	r1, r4
 800ee42:	4640      	mov	r0, r8
 800ee44:	f7ff fee2 	bl	800ec0c <_printf_common>
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d14c      	bne.n	800eee6 <_printf_i+0x1fe>
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee50:	b004      	add	sp, #16
 800ee52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee56:	4835      	ldr	r0, [pc, #212]	; (800ef2c <_printf_i+0x244>)
 800ee58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ee5c:	6829      	ldr	r1, [r5, #0]
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee64:	6029      	str	r1, [r5, #0]
 800ee66:	061d      	lsls	r5, r3, #24
 800ee68:	d514      	bpl.n	800ee94 <_printf_i+0x1ac>
 800ee6a:	07df      	lsls	r7, r3, #31
 800ee6c:	bf44      	itt	mi
 800ee6e:	f043 0320 	orrmi.w	r3, r3, #32
 800ee72:	6023      	strmi	r3, [r4, #0]
 800ee74:	b91e      	cbnz	r6, 800ee7e <_printf_i+0x196>
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	f023 0320 	bic.w	r3, r3, #32
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	2310      	movs	r3, #16
 800ee80:	e7b0      	b.n	800ede4 <_printf_i+0xfc>
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	f043 0320 	orr.w	r3, r3, #32
 800ee88:	6023      	str	r3, [r4, #0]
 800ee8a:	2378      	movs	r3, #120	; 0x78
 800ee8c:	4828      	ldr	r0, [pc, #160]	; (800ef30 <_printf_i+0x248>)
 800ee8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee92:	e7e3      	b.n	800ee5c <_printf_i+0x174>
 800ee94:	0659      	lsls	r1, r3, #25
 800ee96:	bf48      	it	mi
 800ee98:	b2b6      	uxthmi	r6, r6
 800ee9a:	e7e6      	b.n	800ee6a <_printf_i+0x182>
 800ee9c:	4615      	mov	r5, r2
 800ee9e:	e7bb      	b.n	800ee18 <_printf_i+0x130>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	6826      	ldr	r6, [r4, #0]
 800eea4:	6961      	ldr	r1, [r4, #20]
 800eea6:	1d18      	adds	r0, r3, #4
 800eea8:	6028      	str	r0, [r5, #0]
 800eeaa:	0635      	lsls	r5, r6, #24
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	d501      	bpl.n	800eeb4 <_printf_i+0x1cc>
 800eeb0:	6019      	str	r1, [r3, #0]
 800eeb2:	e002      	b.n	800eeba <_printf_i+0x1d2>
 800eeb4:	0670      	lsls	r0, r6, #25
 800eeb6:	d5fb      	bpl.n	800eeb0 <_printf_i+0x1c8>
 800eeb8:	8019      	strh	r1, [r3, #0]
 800eeba:	2300      	movs	r3, #0
 800eebc:	6123      	str	r3, [r4, #16]
 800eebe:	4615      	mov	r5, r2
 800eec0:	e7ba      	b.n	800ee38 <_printf_i+0x150>
 800eec2:	682b      	ldr	r3, [r5, #0]
 800eec4:	1d1a      	adds	r2, r3, #4
 800eec6:	602a      	str	r2, [r5, #0]
 800eec8:	681d      	ldr	r5, [r3, #0]
 800eeca:	6862      	ldr	r2, [r4, #4]
 800eecc:	2100      	movs	r1, #0
 800eece:	4628      	mov	r0, r5
 800eed0:	f7f1 f996 	bl	8000200 <memchr>
 800eed4:	b108      	cbz	r0, 800eeda <_printf_i+0x1f2>
 800eed6:	1b40      	subs	r0, r0, r5
 800eed8:	6060      	str	r0, [r4, #4]
 800eeda:	6863      	ldr	r3, [r4, #4]
 800eedc:	6123      	str	r3, [r4, #16]
 800eede:	2300      	movs	r3, #0
 800eee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eee4:	e7a8      	b.n	800ee38 <_printf_i+0x150>
 800eee6:	6923      	ldr	r3, [r4, #16]
 800eee8:	462a      	mov	r2, r5
 800eeea:	4649      	mov	r1, r9
 800eeec:	4640      	mov	r0, r8
 800eeee:	47d0      	blx	sl
 800eef0:	3001      	adds	r0, #1
 800eef2:	d0ab      	beq.n	800ee4c <_printf_i+0x164>
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	079b      	lsls	r3, r3, #30
 800eef8:	d413      	bmi.n	800ef22 <_printf_i+0x23a>
 800eefa:	68e0      	ldr	r0, [r4, #12]
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	4298      	cmp	r0, r3
 800ef00:	bfb8      	it	lt
 800ef02:	4618      	movlt	r0, r3
 800ef04:	e7a4      	b.n	800ee50 <_printf_i+0x168>
 800ef06:	2301      	movs	r3, #1
 800ef08:	4632      	mov	r2, r6
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	4640      	mov	r0, r8
 800ef0e:	47d0      	blx	sl
 800ef10:	3001      	adds	r0, #1
 800ef12:	d09b      	beq.n	800ee4c <_printf_i+0x164>
 800ef14:	3501      	adds	r5, #1
 800ef16:	68e3      	ldr	r3, [r4, #12]
 800ef18:	9903      	ldr	r1, [sp, #12]
 800ef1a:	1a5b      	subs	r3, r3, r1
 800ef1c:	42ab      	cmp	r3, r5
 800ef1e:	dcf2      	bgt.n	800ef06 <_printf_i+0x21e>
 800ef20:	e7eb      	b.n	800eefa <_printf_i+0x212>
 800ef22:	2500      	movs	r5, #0
 800ef24:	f104 0619 	add.w	r6, r4, #25
 800ef28:	e7f5      	b.n	800ef16 <_printf_i+0x22e>
 800ef2a:	bf00      	nop
 800ef2c:	0801584a 	.word	0x0801584a
 800ef30:	0801585b 	.word	0x0801585b

0800ef34 <_scanf_float>:
 800ef34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef38:	b087      	sub	sp, #28
 800ef3a:	4617      	mov	r7, r2
 800ef3c:	9303      	str	r3, [sp, #12]
 800ef3e:	688b      	ldr	r3, [r1, #8]
 800ef40:	1e5a      	subs	r2, r3, #1
 800ef42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ef46:	bf83      	ittte	hi
 800ef48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ef4c:	195b      	addhi	r3, r3, r5
 800ef4e:	9302      	strhi	r3, [sp, #8]
 800ef50:	2300      	movls	r3, #0
 800ef52:	bf86      	itte	hi
 800ef54:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ef58:	608b      	strhi	r3, [r1, #8]
 800ef5a:	9302      	strls	r3, [sp, #8]
 800ef5c:	680b      	ldr	r3, [r1, #0]
 800ef5e:	468b      	mov	fp, r1
 800ef60:	2500      	movs	r5, #0
 800ef62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ef66:	f84b 3b1c 	str.w	r3, [fp], #28
 800ef6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef6e:	4680      	mov	r8, r0
 800ef70:	460c      	mov	r4, r1
 800ef72:	465e      	mov	r6, fp
 800ef74:	46aa      	mov	sl, r5
 800ef76:	46a9      	mov	r9, r5
 800ef78:	9501      	str	r5, [sp, #4]
 800ef7a:	68a2      	ldr	r2, [r4, #8]
 800ef7c:	b152      	cbz	r2, 800ef94 <_scanf_float+0x60>
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	2b4e      	cmp	r3, #78	; 0x4e
 800ef84:	d864      	bhi.n	800f050 <_scanf_float+0x11c>
 800ef86:	2b40      	cmp	r3, #64	; 0x40
 800ef88:	d83c      	bhi.n	800f004 <_scanf_float+0xd0>
 800ef8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ef8e:	b2c8      	uxtb	r0, r1
 800ef90:	280e      	cmp	r0, #14
 800ef92:	d93a      	bls.n	800f00a <_scanf_float+0xd6>
 800ef94:	f1b9 0f00 	cmp.w	r9, #0
 800ef98:	d003      	beq.n	800efa2 <_scanf_float+0x6e>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efa6:	f1ba 0f01 	cmp.w	sl, #1
 800efaa:	f200 8113 	bhi.w	800f1d4 <_scanf_float+0x2a0>
 800efae:	455e      	cmp	r6, fp
 800efb0:	f200 8105 	bhi.w	800f1be <_scanf_float+0x28a>
 800efb4:	2501      	movs	r5, #1
 800efb6:	4628      	mov	r0, r5
 800efb8:	b007      	add	sp, #28
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800efc2:	2a0d      	cmp	r2, #13
 800efc4:	d8e6      	bhi.n	800ef94 <_scanf_float+0x60>
 800efc6:	a101      	add	r1, pc, #4	; (adr r1, 800efcc <_scanf_float+0x98>)
 800efc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800efcc:	0800f10b 	.word	0x0800f10b
 800efd0:	0800ef95 	.word	0x0800ef95
 800efd4:	0800ef95 	.word	0x0800ef95
 800efd8:	0800ef95 	.word	0x0800ef95
 800efdc:	0800f16b 	.word	0x0800f16b
 800efe0:	0800f143 	.word	0x0800f143
 800efe4:	0800ef95 	.word	0x0800ef95
 800efe8:	0800ef95 	.word	0x0800ef95
 800efec:	0800f119 	.word	0x0800f119
 800eff0:	0800ef95 	.word	0x0800ef95
 800eff4:	0800ef95 	.word	0x0800ef95
 800eff8:	0800ef95 	.word	0x0800ef95
 800effc:	0800ef95 	.word	0x0800ef95
 800f000:	0800f0d1 	.word	0x0800f0d1
 800f004:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f008:	e7db      	b.n	800efc2 <_scanf_float+0x8e>
 800f00a:	290e      	cmp	r1, #14
 800f00c:	d8c2      	bhi.n	800ef94 <_scanf_float+0x60>
 800f00e:	a001      	add	r0, pc, #4	; (adr r0, 800f014 <_scanf_float+0xe0>)
 800f010:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f014:	0800f0c3 	.word	0x0800f0c3
 800f018:	0800ef95 	.word	0x0800ef95
 800f01c:	0800f0c3 	.word	0x0800f0c3
 800f020:	0800f157 	.word	0x0800f157
 800f024:	0800ef95 	.word	0x0800ef95
 800f028:	0800f071 	.word	0x0800f071
 800f02c:	0800f0ad 	.word	0x0800f0ad
 800f030:	0800f0ad 	.word	0x0800f0ad
 800f034:	0800f0ad 	.word	0x0800f0ad
 800f038:	0800f0ad 	.word	0x0800f0ad
 800f03c:	0800f0ad 	.word	0x0800f0ad
 800f040:	0800f0ad 	.word	0x0800f0ad
 800f044:	0800f0ad 	.word	0x0800f0ad
 800f048:	0800f0ad 	.word	0x0800f0ad
 800f04c:	0800f0ad 	.word	0x0800f0ad
 800f050:	2b6e      	cmp	r3, #110	; 0x6e
 800f052:	d809      	bhi.n	800f068 <_scanf_float+0x134>
 800f054:	2b60      	cmp	r3, #96	; 0x60
 800f056:	d8b2      	bhi.n	800efbe <_scanf_float+0x8a>
 800f058:	2b54      	cmp	r3, #84	; 0x54
 800f05a:	d077      	beq.n	800f14c <_scanf_float+0x218>
 800f05c:	2b59      	cmp	r3, #89	; 0x59
 800f05e:	d199      	bne.n	800ef94 <_scanf_float+0x60>
 800f060:	2d07      	cmp	r5, #7
 800f062:	d197      	bne.n	800ef94 <_scanf_float+0x60>
 800f064:	2508      	movs	r5, #8
 800f066:	e029      	b.n	800f0bc <_scanf_float+0x188>
 800f068:	2b74      	cmp	r3, #116	; 0x74
 800f06a:	d06f      	beq.n	800f14c <_scanf_float+0x218>
 800f06c:	2b79      	cmp	r3, #121	; 0x79
 800f06e:	e7f6      	b.n	800f05e <_scanf_float+0x12a>
 800f070:	6821      	ldr	r1, [r4, #0]
 800f072:	05c8      	lsls	r0, r1, #23
 800f074:	d51a      	bpl.n	800f0ac <_scanf_float+0x178>
 800f076:	9b02      	ldr	r3, [sp, #8]
 800f078:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f07c:	6021      	str	r1, [r4, #0]
 800f07e:	f109 0901 	add.w	r9, r9, #1
 800f082:	b11b      	cbz	r3, 800f08c <_scanf_float+0x158>
 800f084:	3b01      	subs	r3, #1
 800f086:	3201      	adds	r2, #1
 800f088:	9302      	str	r3, [sp, #8]
 800f08a:	60a2      	str	r2, [r4, #8]
 800f08c:	68a3      	ldr	r3, [r4, #8]
 800f08e:	3b01      	subs	r3, #1
 800f090:	60a3      	str	r3, [r4, #8]
 800f092:	6923      	ldr	r3, [r4, #16]
 800f094:	3301      	adds	r3, #1
 800f096:	6123      	str	r3, [r4, #16]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	3b01      	subs	r3, #1
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	607b      	str	r3, [r7, #4]
 800f0a0:	f340 8084 	ble.w	800f1ac <_scanf_float+0x278>
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	603b      	str	r3, [r7, #0]
 800f0aa:	e766      	b.n	800ef7a <_scanf_float+0x46>
 800f0ac:	eb1a 0f05 	cmn.w	sl, r5
 800f0b0:	f47f af70 	bne.w	800ef94 <_scanf_float+0x60>
 800f0b4:	6822      	ldr	r2, [r4, #0]
 800f0b6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f0ba:	6022      	str	r2, [r4, #0]
 800f0bc:	f806 3b01 	strb.w	r3, [r6], #1
 800f0c0:	e7e4      	b.n	800f08c <_scanf_float+0x158>
 800f0c2:	6822      	ldr	r2, [r4, #0]
 800f0c4:	0610      	lsls	r0, r2, #24
 800f0c6:	f57f af65 	bpl.w	800ef94 <_scanf_float+0x60>
 800f0ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f0ce:	e7f4      	b.n	800f0ba <_scanf_float+0x186>
 800f0d0:	f1ba 0f00 	cmp.w	sl, #0
 800f0d4:	d10e      	bne.n	800f0f4 <_scanf_float+0x1c0>
 800f0d6:	f1b9 0f00 	cmp.w	r9, #0
 800f0da:	d10e      	bne.n	800f0fa <_scanf_float+0x1c6>
 800f0dc:	6822      	ldr	r2, [r4, #0]
 800f0de:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f0e2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f0e6:	d108      	bne.n	800f0fa <_scanf_float+0x1c6>
 800f0e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f0ec:	6022      	str	r2, [r4, #0]
 800f0ee:	f04f 0a01 	mov.w	sl, #1
 800f0f2:	e7e3      	b.n	800f0bc <_scanf_float+0x188>
 800f0f4:	f1ba 0f02 	cmp.w	sl, #2
 800f0f8:	d055      	beq.n	800f1a6 <_scanf_float+0x272>
 800f0fa:	2d01      	cmp	r5, #1
 800f0fc:	d002      	beq.n	800f104 <_scanf_float+0x1d0>
 800f0fe:	2d04      	cmp	r5, #4
 800f100:	f47f af48 	bne.w	800ef94 <_scanf_float+0x60>
 800f104:	3501      	adds	r5, #1
 800f106:	b2ed      	uxtb	r5, r5
 800f108:	e7d8      	b.n	800f0bc <_scanf_float+0x188>
 800f10a:	f1ba 0f01 	cmp.w	sl, #1
 800f10e:	f47f af41 	bne.w	800ef94 <_scanf_float+0x60>
 800f112:	f04f 0a02 	mov.w	sl, #2
 800f116:	e7d1      	b.n	800f0bc <_scanf_float+0x188>
 800f118:	b97d      	cbnz	r5, 800f13a <_scanf_float+0x206>
 800f11a:	f1b9 0f00 	cmp.w	r9, #0
 800f11e:	f47f af3c 	bne.w	800ef9a <_scanf_float+0x66>
 800f122:	6822      	ldr	r2, [r4, #0]
 800f124:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f128:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f12c:	f47f af39 	bne.w	800efa2 <_scanf_float+0x6e>
 800f130:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f134:	6022      	str	r2, [r4, #0]
 800f136:	2501      	movs	r5, #1
 800f138:	e7c0      	b.n	800f0bc <_scanf_float+0x188>
 800f13a:	2d03      	cmp	r5, #3
 800f13c:	d0e2      	beq.n	800f104 <_scanf_float+0x1d0>
 800f13e:	2d05      	cmp	r5, #5
 800f140:	e7de      	b.n	800f100 <_scanf_float+0x1cc>
 800f142:	2d02      	cmp	r5, #2
 800f144:	f47f af26 	bne.w	800ef94 <_scanf_float+0x60>
 800f148:	2503      	movs	r5, #3
 800f14a:	e7b7      	b.n	800f0bc <_scanf_float+0x188>
 800f14c:	2d06      	cmp	r5, #6
 800f14e:	f47f af21 	bne.w	800ef94 <_scanf_float+0x60>
 800f152:	2507      	movs	r5, #7
 800f154:	e7b2      	b.n	800f0bc <_scanf_float+0x188>
 800f156:	6822      	ldr	r2, [r4, #0]
 800f158:	0591      	lsls	r1, r2, #22
 800f15a:	f57f af1b 	bpl.w	800ef94 <_scanf_float+0x60>
 800f15e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f162:	6022      	str	r2, [r4, #0]
 800f164:	f8cd 9004 	str.w	r9, [sp, #4]
 800f168:	e7a8      	b.n	800f0bc <_scanf_float+0x188>
 800f16a:	6822      	ldr	r2, [r4, #0]
 800f16c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f170:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f174:	d006      	beq.n	800f184 <_scanf_float+0x250>
 800f176:	0550      	lsls	r0, r2, #21
 800f178:	f57f af0c 	bpl.w	800ef94 <_scanf_float+0x60>
 800f17c:	f1b9 0f00 	cmp.w	r9, #0
 800f180:	f43f af0f 	beq.w	800efa2 <_scanf_float+0x6e>
 800f184:	0591      	lsls	r1, r2, #22
 800f186:	bf58      	it	pl
 800f188:	9901      	ldrpl	r1, [sp, #4]
 800f18a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f18e:	bf58      	it	pl
 800f190:	eba9 0101 	subpl.w	r1, r9, r1
 800f194:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f198:	bf58      	it	pl
 800f19a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f19e:	6022      	str	r2, [r4, #0]
 800f1a0:	f04f 0900 	mov.w	r9, #0
 800f1a4:	e78a      	b.n	800f0bc <_scanf_float+0x188>
 800f1a6:	f04f 0a03 	mov.w	sl, #3
 800f1aa:	e787      	b.n	800f0bc <_scanf_float+0x188>
 800f1ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	4640      	mov	r0, r8
 800f1b4:	4798      	blx	r3
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	f43f aedf 	beq.w	800ef7a <_scanf_float+0x46>
 800f1bc:	e6ea      	b.n	800ef94 <_scanf_float+0x60>
 800f1be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1c6:	463a      	mov	r2, r7
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	4798      	blx	r3
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	e6ec      	b.n	800efae <_scanf_float+0x7a>
 800f1d4:	1e6b      	subs	r3, r5, #1
 800f1d6:	2b06      	cmp	r3, #6
 800f1d8:	d825      	bhi.n	800f226 <_scanf_float+0x2f2>
 800f1da:	2d02      	cmp	r5, #2
 800f1dc:	d836      	bhi.n	800f24c <_scanf_float+0x318>
 800f1de:	455e      	cmp	r6, fp
 800f1e0:	f67f aee8 	bls.w	800efb4 <_scanf_float+0x80>
 800f1e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1e8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1ec:	463a      	mov	r2, r7
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4798      	blx	r3
 800f1f2:	6923      	ldr	r3, [r4, #16]
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	6123      	str	r3, [r4, #16]
 800f1f8:	e7f1      	b.n	800f1de <_scanf_float+0x2aa>
 800f1fa:	9802      	ldr	r0, [sp, #8]
 800f1fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f200:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f204:	9002      	str	r0, [sp, #8]
 800f206:	463a      	mov	r2, r7
 800f208:	4640      	mov	r0, r8
 800f20a:	4798      	blx	r3
 800f20c:	6923      	ldr	r3, [r4, #16]
 800f20e:	3b01      	subs	r3, #1
 800f210:	6123      	str	r3, [r4, #16]
 800f212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f216:	fa5f fa8a 	uxtb.w	sl, sl
 800f21a:	f1ba 0f02 	cmp.w	sl, #2
 800f21e:	d1ec      	bne.n	800f1fa <_scanf_float+0x2c6>
 800f220:	3d03      	subs	r5, #3
 800f222:	b2ed      	uxtb	r5, r5
 800f224:	1b76      	subs	r6, r6, r5
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	05da      	lsls	r2, r3, #23
 800f22a:	d52f      	bpl.n	800f28c <_scanf_float+0x358>
 800f22c:	055b      	lsls	r3, r3, #21
 800f22e:	d510      	bpl.n	800f252 <_scanf_float+0x31e>
 800f230:	455e      	cmp	r6, fp
 800f232:	f67f aebf 	bls.w	800efb4 <_scanf_float+0x80>
 800f236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f23a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f23e:	463a      	mov	r2, r7
 800f240:	4640      	mov	r0, r8
 800f242:	4798      	blx	r3
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	3b01      	subs	r3, #1
 800f248:	6123      	str	r3, [r4, #16]
 800f24a:	e7f1      	b.n	800f230 <_scanf_float+0x2fc>
 800f24c:	46aa      	mov	sl, r5
 800f24e:	9602      	str	r6, [sp, #8]
 800f250:	e7df      	b.n	800f212 <_scanf_float+0x2de>
 800f252:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f256:	6923      	ldr	r3, [r4, #16]
 800f258:	2965      	cmp	r1, #101	; 0x65
 800f25a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f25e:	f106 35ff 	add.w	r5, r6, #4294967295
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	d00c      	beq.n	800f280 <_scanf_float+0x34c>
 800f266:	2945      	cmp	r1, #69	; 0x45
 800f268:	d00a      	beq.n	800f280 <_scanf_float+0x34c>
 800f26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f26e:	463a      	mov	r2, r7
 800f270:	4640      	mov	r0, r8
 800f272:	4798      	blx	r3
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	1eb5      	subs	r5, r6, #2
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f284:	463a      	mov	r2, r7
 800f286:	4640      	mov	r0, r8
 800f288:	4798      	blx	r3
 800f28a:	462e      	mov	r6, r5
 800f28c:	6825      	ldr	r5, [r4, #0]
 800f28e:	f015 0510 	ands.w	r5, r5, #16
 800f292:	d159      	bne.n	800f348 <_scanf_float+0x414>
 800f294:	7035      	strb	r5, [r6, #0]
 800f296:	6823      	ldr	r3, [r4, #0]
 800f298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2a0:	d11b      	bne.n	800f2da <_scanf_float+0x3a6>
 800f2a2:	9b01      	ldr	r3, [sp, #4]
 800f2a4:	454b      	cmp	r3, r9
 800f2a6:	eba3 0209 	sub.w	r2, r3, r9
 800f2aa:	d123      	bne.n	800f2f4 <_scanf_float+0x3c0>
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	4659      	mov	r1, fp
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	f000 ff57 	bl	8010164 <_strtod_r>
 800f2b6:	6822      	ldr	r2, [r4, #0]
 800f2b8:	9b03      	ldr	r3, [sp, #12]
 800f2ba:	f012 0f02 	tst.w	r2, #2
 800f2be:	ec57 6b10 	vmov	r6, r7, d0
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	d021      	beq.n	800f30a <_scanf_float+0x3d6>
 800f2c6:	9903      	ldr	r1, [sp, #12]
 800f2c8:	1d1a      	adds	r2, r3, #4
 800f2ca:	600a      	str	r2, [r1, #0]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	e9c3 6700 	strd	r6, r7, [r3]
 800f2d2:	68e3      	ldr	r3, [r4, #12]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	60e3      	str	r3, [r4, #12]
 800f2d8:	e66d      	b.n	800efb6 <_scanf_float+0x82>
 800f2da:	9b04      	ldr	r3, [sp, #16]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d0e5      	beq.n	800f2ac <_scanf_float+0x378>
 800f2e0:	9905      	ldr	r1, [sp, #20]
 800f2e2:	230a      	movs	r3, #10
 800f2e4:	462a      	mov	r2, r5
 800f2e6:	3101      	adds	r1, #1
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	f000 ffc3 	bl	8010274 <_strtol_r>
 800f2ee:	9b04      	ldr	r3, [sp, #16]
 800f2f0:	9e05      	ldr	r6, [sp, #20]
 800f2f2:	1ac2      	subs	r2, r0, r3
 800f2f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f2f8:	429e      	cmp	r6, r3
 800f2fa:	bf28      	it	cs
 800f2fc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f300:	4912      	ldr	r1, [pc, #72]	; (800f34c <_scanf_float+0x418>)
 800f302:	4630      	mov	r0, r6
 800f304:	f000 f8a6 	bl	800f454 <siprintf>
 800f308:	e7d0      	b.n	800f2ac <_scanf_float+0x378>
 800f30a:	9903      	ldr	r1, [sp, #12]
 800f30c:	f012 0f04 	tst.w	r2, #4
 800f310:	f103 0204 	add.w	r2, r3, #4
 800f314:	600a      	str	r2, [r1, #0]
 800f316:	d1d9      	bne.n	800f2cc <_scanf_float+0x398>
 800f318:	f8d3 8000 	ldr.w	r8, [r3]
 800f31c:	ee10 2a10 	vmov	r2, s0
 800f320:	ee10 0a10 	vmov	r0, s0
 800f324:	463b      	mov	r3, r7
 800f326:	4639      	mov	r1, r7
 800f328:	f7f1 fc10 	bl	8000b4c <__aeabi_dcmpun>
 800f32c:	b128      	cbz	r0, 800f33a <_scanf_float+0x406>
 800f32e:	4808      	ldr	r0, [pc, #32]	; (800f350 <_scanf_float+0x41c>)
 800f330:	f000 f88a 	bl	800f448 <nanf>
 800f334:	ed88 0a00 	vstr	s0, [r8]
 800f338:	e7cb      	b.n	800f2d2 <_scanf_float+0x39e>
 800f33a:	4630      	mov	r0, r6
 800f33c:	4639      	mov	r1, r7
 800f33e:	f7f1 fc63 	bl	8000c08 <__aeabi_d2f>
 800f342:	f8c8 0000 	str.w	r0, [r8]
 800f346:	e7c4      	b.n	800f2d2 <_scanf_float+0x39e>
 800f348:	2500      	movs	r5, #0
 800f34a:	e634      	b.n	800efb6 <_scanf_float+0x82>
 800f34c:	0801586c 	.word	0x0801586c
 800f350:	08015c78 	.word	0x08015c78

0800f354 <cleanup_glue>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	460c      	mov	r4, r1
 800f358:	6809      	ldr	r1, [r1, #0]
 800f35a:	4605      	mov	r5, r0
 800f35c:	b109      	cbz	r1, 800f362 <cleanup_glue+0xe>
 800f35e:	f7ff fff9 	bl	800f354 <cleanup_glue>
 800f362:	4621      	mov	r1, r4
 800f364:	4628      	mov	r0, r5
 800f366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f36a:	f002 bf69 	b.w	8012240 <_free_r>
	...

0800f370 <_reclaim_reent>:
 800f370:	4b2c      	ldr	r3, [pc, #176]	; (800f424 <_reclaim_reent+0xb4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4283      	cmp	r3, r0
 800f376:	b570      	push	{r4, r5, r6, lr}
 800f378:	4604      	mov	r4, r0
 800f37a:	d051      	beq.n	800f420 <_reclaim_reent+0xb0>
 800f37c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f37e:	b143      	cbz	r3, 800f392 <_reclaim_reent+0x22>
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d14a      	bne.n	800f41c <_reclaim_reent+0xac>
 800f386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	b111      	cbz	r1, 800f392 <_reclaim_reent+0x22>
 800f38c:	4620      	mov	r0, r4
 800f38e:	f002 ff57 	bl	8012240 <_free_r>
 800f392:	6961      	ldr	r1, [r4, #20]
 800f394:	b111      	cbz	r1, 800f39c <_reclaim_reent+0x2c>
 800f396:	4620      	mov	r0, r4
 800f398:	f002 ff52 	bl	8012240 <_free_r>
 800f39c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f39e:	b111      	cbz	r1, 800f3a6 <_reclaim_reent+0x36>
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f002 ff4d 	bl	8012240 <_free_r>
 800f3a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f3a8:	b111      	cbz	r1, 800f3b0 <_reclaim_reent+0x40>
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f002 ff48 	bl	8012240 <_free_r>
 800f3b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f3b2:	b111      	cbz	r1, 800f3ba <_reclaim_reent+0x4a>
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f002 ff43 	bl	8012240 <_free_r>
 800f3ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f3bc:	b111      	cbz	r1, 800f3c4 <_reclaim_reent+0x54>
 800f3be:	4620      	mov	r0, r4
 800f3c0:	f002 ff3e 	bl	8012240 <_free_r>
 800f3c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f3c6:	b111      	cbz	r1, 800f3ce <_reclaim_reent+0x5e>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f002 ff39 	bl	8012240 <_free_r>
 800f3ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f3d0:	b111      	cbz	r1, 800f3d8 <_reclaim_reent+0x68>
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f002 ff34 	bl	8012240 <_free_r>
 800f3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3da:	b111      	cbz	r1, 800f3e2 <_reclaim_reent+0x72>
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f002 ff2f 	bl	8012240 <_free_r>
 800f3e2:	69a3      	ldr	r3, [r4, #24]
 800f3e4:	b1e3      	cbz	r3, 800f420 <_reclaim_reent+0xb0>
 800f3e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	4798      	blx	r3
 800f3ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f3ee:	b1b9      	cbz	r1, 800f420 <_reclaim_reent+0xb0>
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f6:	f7ff bfad 	b.w	800f354 <cleanup_glue>
 800f3fa:	5949      	ldr	r1, [r1, r5]
 800f3fc:	b941      	cbnz	r1, 800f410 <_reclaim_reent+0xa0>
 800f3fe:	3504      	adds	r5, #4
 800f400:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f402:	2d80      	cmp	r5, #128	; 0x80
 800f404:	68d9      	ldr	r1, [r3, #12]
 800f406:	d1f8      	bne.n	800f3fa <_reclaim_reent+0x8a>
 800f408:	4620      	mov	r0, r4
 800f40a:	f002 ff19 	bl	8012240 <_free_r>
 800f40e:	e7ba      	b.n	800f386 <_reclaim_reent+0x16>
 800f410:	680e      	ldr	r6, [r1, #0]
 800f412:	4620      	mov	r0, r4
 800f414:	f002 ff14 	bl	8012240 <_free_r>
 800f418:	4631      	mov	r1, r6
 800f41a:	e7ef      	b.n	800f3fc <_reclaim_reent+0x8c>
 800f41c:	2500      	movs	r5, #0
 800f41e:	e7ef      	b.n	800f400 <_reclaim_reent+0x90>
 800f420:	bd70      	pop	{r4, r5, r6, pc}
 800f422:	bf00      	nop
 800f424:	20000214 	.word	0x20000214

0800f428 <_sbrk_r>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d06      	ldr	r5, [pc, #24]	; (800f444 <_sbrk_r+0x1c>)
 800f42c:	2300      	movs	r3, #0
 800f42e:	4604      	mov	r4, r0
 800f430:	4608      	mov	r0, r1
 800f432:	602b      	str	r3, [r5, #0]
 800f434:	f7f2 fbe6 	bl	8001c04 <_sbrk>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_sbrk_r+0x1a>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_sbrk_r+0x1a>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	200063ec 	.word	0x200063ec

0800f448 <nanf>:
 800f448:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f450 <nanf+0x8>
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	7fc00000 	.word	0x7fc00000

0800f454 <siprintf>:
 800f454:	b40e      	push	{r1, r2, r3}
 800f456:	b500      	push	{lr}
 800f458:	b09c      	sub	sp, #112	; 0x70
 800f45a:	ab1d      	add	r3, sp, #116	; 0x74
 800f45c:	9002      	str	r0, [sp, #8]
 800f45e:	9006      	str	r0, [sp, #24]
 800f460:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f464:	4809      	ldr	r0, [pc, #36]	; (800f48c <siprintf+0x38>)
 800f466:	9107      	str	r1, [sp, #28]
 800f468:	9104      	str	r1, [sp, #16]
 800f46a:	4909      	ldr	r1, [pc, #36]	; (800f490 <siprintf+0x3c>)
 800f46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f470:	9105      	str	r1, [sp, #20]
 800f472:	6800      	ldr	r0, [r0, #0]
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	a902      	add	r1, sp, #8
 800f478:	f002 ff8a 	bl	8012390 <_svfiprintf_r>
 800f47c:	9b02      	ldr	r3, [sp, #8]
 800f47e:	2200      	movs	r2, #0
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	b01c      	add	sp, #112	; 0x70
 800f484:	f85d eb04 	ldr.w	lr, [sp], #4
 800f488:	b003      	add	sp, #12
 800f48a:	4770      	bx	lr
 800f48c:	20000214 	.word	0x20000214
 800f490:	ffff0208 	.word	0xffff0208

0800f494 <__sread>:
 800f494:	b510      	push	{r4, lr}
 800f496:	460c      	mov	r4, r1
 800f498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49c:	f003 f878 	bl	8012590 <_read_r>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	bfab      	itete	ge
 800f4a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f4a8:	181b      	addge	r3, r3, r0
 800f4aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4ae:	bfac      	ite	ge
 800f4b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4b2:	81a3      	strhlt	r3, [r4, #12]
 800f4b4:	bd10      	pop	{r4, pc}

0800f4b6 <__swrite>:
 800f4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ba:	461f      	mov	r7, r3
 800f4bc:	898b      	ldrh	r3, [r1, #12]
 800f4be:	05db      	lsls	r3, r3, #23
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	460c      	mov	r4, r1
 800f4c4:	4616      	mov	r6, r2
 800f4c6:	d505      	bpl.n	800f4d4 <__swrite+0x1e>
 800f4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f002 f9a6 	bl	8011820 <_lseek_r>
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4de:	81a3      	strh	r3, [r4, #12]
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	463b      	mov	r3, r7
 800f4e4:	4628      	mov	r0, r5
 800f4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ea:	f000 bec5 	b.w	8010278 <_write_r>

0800f4ee <__sseek>:
 800f4ee:	b510      	push	{r4, lr}
 800f4f0:	460c      	mov	r4, r1
 800f4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f6:	f002 f993 	bl	8011820 <_lseek_r>
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	89a3      	ldrh	r3, [r4, #12]
 800f4fe:	bf15      	itete	ne
 800f500:	6560      	strne	r0, [r4, #84]	; 0x54
 800f502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f50a:	81a3      	strheq	r3, [r4, #12]
 800f50c:	bf18      	it	ne
 800f50e:	81a3      	strhne	r3, [r4, #12]
 800f510:	bd10      	pop	{r4, pc}

0800f512 <__sclose>:
 800f512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f516:	f000 bec1 	b.w	801029c <_close_r>

0800f51a <sulp>:
 800f51a:	b570      	push	{r4, r5, r6, lr}
 800f51c:	4604      	mov	r4, r0
 800f51e:	460d      	mov	r5, r1
 800f520:	ec45 4b10 	vmov	d0, r4, r5
 800f524:	4616      	mov	r6, r2
 800f526:	f002 fd25 	bl	8011f74 <__ulp>
 800f52a:	ec51 0b10 	vmov	r0, r1, d0
 800f52e:	b17e      	cbz	r6, 800f550 <sulp+0x36>
 800f530:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f534:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f538:	2b00      	cmp	r3, #0
 800f53a:	dd09      	ble.n	800f550 <sulp+0x36>
 800f53c:	051b      	lsls	r3, r3, #20
 800f53e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f542:	2400      	movs	r4, #0
 800f544:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f548:	4622      	mov	r2, r4
 800f54a:	462b      	mov	r3, r5
 800f54c:	f7f1 f864 	bl	8000618 <__aeabi_dmul>
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	0000      	movs	r0, r0
 800f554:	0000      	movs	r0, r0
	...

0800f558 <_strtod_l>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	ed2d 8b02 	vpush	{d8}
 800f560:	b09d      	sub	sp, #116	; 0x74
 800f562:	461f      	mov	r7, r3
 800f564:	2300      	movs	r3, #0
 800f566:	9318      	str	r3, [sp, #96]	; 0x60
 800f568:	4ba2      	ldr	r3, [pc, #648]	; (800f7f4 <_strtod_l+0x29c>)
 800f56a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	9305      	str	r3, [sp, #20]
 800f570:	4604      	mov	r4, r0
 800f572:	4618      	mov	r0, r3
 800f574:	4688      	mov	r8, r1
 800f576:	f7f0 fe3b 	bl	80001f0 <strlen>
 800f57a:	f04f 0a00 	mov.w	sl, #0
 800f57e:	4605      	mov	r5, r0
 800f580:	f04f 0b00 	mov.w	fp, #0
 800f584:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f58a:	781a      	ldrb	r2, [r3, #0]
 800f58c:	2a2b      	cmp	r2, #43	; 0x2b
 800f58e:	d04e      	beq.n	800f62e <_strtod_l+0xd6>
 800f590:	d83b      	bhi.n	800f60a <_strtod_l+0xb2>
 800f592:	2a0d      	cmp	r2, #13
 800f594:	d834      	bhi.n	800f600 <_strtod_l+0xa8>
 800f596:	2a08      	cmp	r2, #8
 800f598:	d834      	bhi.n	800f604 <_strtod_l+0xac>
 800f59a:	2a00      	cmp	r2, #0
 800f59c:	d03e      	beq.n	800f61c <_strtod_l+0xc4>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	930a      	str	r3, [sp, #40]	; 0x28
 800f5a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f5a4:	7833      	ldrb	r3, [r6, #0]
 800f5a6:	2b30      	cmp	r3, #48	; 0x30
 800f5a8:	f040 80b0 	bne.w	800f70c <_strtod_l+0x1b4>
 800f5ac:	7873      	ldrb	r3, [r6, #1]
 800f5ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f5b2:	2b58      	cmp	r3, #88	; 0x58
 800f5b4:	d168      	bne.n	800f688 <_strtod_l+0x130>
 800f5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	ab18      	add	r3, sp, #96	; 0x60
 800f5bc:	9702      	str	r7, [sp, #8]
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	4a8d      	ldr	r2, [pc, #564]	; (800f7f8 <_strtod_l+0x2a0>)
 800f5c2:	ab19      	add	r3, sp, #100	; 0x64
 800f5c4:	a917      	add	r1, sp, #92	; 0x5c
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f001 fe1e 	bl	8011208 <__gethex>
 800f5cc:	f010 0707 	ands.w	r7, r0, #7
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	d005      	beq.n	800f5e0 <_strtod_l+0x88>
 800f5d4:	2f06      	cmp	r7, #6
 800f5d6:	d12c      	bne.n	800f632 <_strtod_l+0xda>
 800f5d8:	3601      	adds	r6, #1
 800f5da:	2300      	movs	r3, #0
 800f5dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f5de:	930a      	str	r3, [sp, #40]	; 0x28
 800f5e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f040 8590 	bne.w	8010108 <_strtod_l+0xbb0>
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ea:	b1eb      	cbz	r3, 800f628 <_strtod_l+0xd0>
 800f5ec:	4652      	mov	r2, sl
 800f5ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f5f2:	ec43 2b10 	vmov	d0, r2, r3
 800f5f6:	b01d      	add	sp, #116	; 0x74
 800f5f8:	ecbd 8b02 	vpop	{d8}
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	2a20      	cmp	r2, #32
 800f602:	d1cc      	bne.n	800f59e <_strtod_l+0x46>
 800f604:	3301      	adds	r3, #1
 800f606:	9317      	str	r3, [sp, #92]	; 0x5c
 800f608:	e7be      	b.n	800f588 <_strtod_l+0x30>
 800f60a:	2a2d      	cmp	r2, #45	; 0x2d
 800f60c:	d1c7      	bne.n	800f59e <_strtod_l+0x46>
 800f60e:	2201      	movs	r2, #1
 800f610:	920a      	str	r2, [sp, #40]	; 0x28
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	9217      	str	r2, [sp, #92]	; 0x5c
 800f616:	785b      	ldrb	r3, [r3, #1]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1c2      	bne.n	800f5a2 <_strtod_l+0x4a>
 800f61c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f61e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f622:	2b00      	cmp	r3, #0
 800f624:	f040 856e 	bne.w	8010104 <_strtod_l+0xbac>
 800f628:	4652      	mov	r2, sl
 800f62a:	465b      	mov	r3, fp
 800f62c:	e7e1      	b.n	800f5f2 <_strtod_l+0x9a>
 800f62e:	2200      	movs	r2, #0
 800f630:	e7ee      	b.n	800f610 <_strtod_l+0xb8>
 800f632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f634:	b13a      	cbz	r2, 800f646 <_strtod_l+0xee>
 800f636:	2135      	movs	r1, #53	; 0x35
 800f638:	a81a      	add	r0, sp, #104	; 0x68
 800f63a:	f002 fda6 	bl	801218a <__copybits>
 800f63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f640:	4620      	mov	r0, r4
 800f642:	f002 f965 	bl	8011910 <_Bfree>
 800f646:	3f01      	subs	r7, #1
 800f648:	2f04      	cmp	r7, #4
 800f64a:	d806      	bhi.n	800f65a <_strtod_l+0x102>
 800f64c:	e8df f007 	tbb	[pc, r7]
 800f650:	1714030a 	.word	0x1714030a
 800f654:	0a          	.byte	0x0a
 800f655:	00          	.byte	0x00
 800f656:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f65a:	0728      	lsls	r0, r5, #28
 800f65c:	d5c0      	bpl.n	800f5e0 <_strtod_l+0x88>
 800f65e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f662:	e7bd      	b.n	800f5e0 <_strtod_l+0x88>
 800f664:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f668:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f66a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f66e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f672:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f676:	e7f0      	b.n	800f65a <_strtod_l+0x102>
 800f678:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f7fc <_strtod_l+0x2a4>
 800f67c:	e7ed      	b.n	800f65a <_strtod_l+0x102>
 800f67e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f682:	f04f 3aff 	mov.w	sl, #4294967295
 800f686:	e7e8      	b.n	800f65a <_strtod_l+0x102>
 800f688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f68e:	785b      	ldrb	r3, [r3, #1]
 800f690:	2b30      	cmp	r3, #48	; 0x30
 800f692:	d0f9      	beq.n	800f688 <_strtod_l+0x130>
 800f694:	2b00      	cmp	r3, #0
 800f696:	d0a3      	beq.n	800f5e0 <_strtod_l+0x88>
 800f698:	2301      	movs	r3, #1
 800f69a:	f04f 0900 	mov.w	r9, #0
 800f69e:	9304      	str	r3, [sp, #16]
 800f6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f6a2:	9308      	str	r3, [sp, #32]
 800f6a4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f6a8:	464f      	mov	r7, r9
 800f6aa:	220a      	movs	r2, #10
 800f6ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f6ae:	7806      	ldrb	r6, [r0, #0]
 800f6b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f6b4:	b2d9      	uxtb	r1, r3
 800f6b6:	2909      	cmp	r1, #9
 800f6b8:	d92a      	bls.n	800f710 <_strtod_l+0x1b8>
 800f6ba:	9905      	ldr	r1, [sp, #20]
 800f6bc:	462a      	mov	r2, r5
 800f6be:	f002 ff83 	bl	80125c8 <strncmp>
 800f6c2:	b398      	cbz	r0, 800f72c <_strtod_l+0x1d4>
 800f6c4:	2000      	movs	r0, #0
 800f6c6:	4632      	mov	r2, r6
 800f6c8:	463d      	mov	r5, r7
 800f6ca:	9005      	str	r0, [sp, #20]
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2a65      	cmp	r2, #101	; 0x65
 800f6d0:	d001      	beq.n	800f6d6 <_strtod_l+0x17e>
 800f6d2:	2a45      	cmp	r2, #69	; 0x45
 800f6d4:	d118      	bne.n	800f708 <_strtod_l+0x1b0>
 800f6d6:	b91d      	cbnz	r5, 800f6e0 <_strtod_l+0x188>
 800f6d8:	9a04      	ldr	r2, [sp, #16]
 800f6da:	4302      	orrs	r2, r0
 800f6dc:	d09e      	beq.n	800f61c <_strtod_l+0xc4>
 800f6de:	2500      	movs	r5, #0
 800f6e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f6e4:	f108 0201 	add.w	r2, r8, #1
 800f6e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800f6ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f6ee:	2a2b      	cmp	r2, #43	; 0x2b
 800f6f0:	d075      	beq.n	800f7de <_strtod_l+0x286>
 800f6f2:	2a2d      	cmp	r2, #45	; 0x2d
 800f6f4:	d07b      	beq.n	800f7ee <_strtod_l+0x296>
 800f6f6:	f04f 0c00 	mov.w	ip, #0
 800f6fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f6fe:	2909      	cmp	r1, #9
 800f700:	f240 8082 	bls.w	800f808 <_strtod_l+0x2b0>
 800f704:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f708:	2600      	movs	r6, #0
 800f70a:	e09d      	b.n	800f848 <_strtod_l+0x2f0>
 800f70c:	2300      	movs	r3, #0
 800f70e:	e7c4      	b.n	800f69a <_strtod_l+0x142>
 800f710:	2f08      	cmp	r7, #8
 800f712:	bfd8      	it	le
 800f714:	9907      	ldrle	r1, [sp, #28]
 800f716:	f100 0001 	add.w	r0, r0, #1
 800f71a:	bfda      	itte	le
 800f71c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f720:	9307      	strle	r3, [sp, #28]
 800f722:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f726:	3701      	adds	r7, #1
 800f728:	9017      	str	r0, [sp, #92]	; 0x5c
 800f72a:	e7bf      	b.n	800f6ac <_strtod_l+0x154>
 800f72c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f72e:	195a      	adds	r2, r3, r5
 800f730:	9217      	str	r2, [sp, #92]	; 0x5c
 800f732:	5d5a      	ldrb	r2, [r3, r5]
 800f734:	2f00      	cmp	r7, #0
 800f736:	d037      	beq.n	800f7a8 <_strtod_l+0x250>
 800f738:	9005      	str	r0, [sp, #20]
 800f73a:	463d      	mov	r5, r7
 800f73c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f740:	2b09      	cmp	r3, #9
 800f742:	d912      	bls.n	800f76a <_strtod_l+0x212>
 800f744:	2301      	movs	r3, #1
 800f746:	e7c2      	b.n	800f6ce <_strtod_l+0x176>
 800f748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f74e:	785a      	ldrb	r2, [r3, #1]
 800f750:	3001      	adds	r0, #1
 800f752:	2a30      	cmp	r2, #48	; 0x30
 800f754:	d0f8      	beq.n	800f748 <_strtod_l+0x1f0>
 800f756:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f75a:	2b08      	cmp	r3, #8
 800f75c:	f200 84d9 	bhi.w	8010112 <_strtod_l+0xbba>
 800f760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f762:	9005      	str	r0, [sp, #20]
 800f764:	2000      	movs	r0, #0
 800f766:	9308      	str	r3, [sp, #32]
 800f768:	4605      	mov	r5, r0
 800f76a:	3a30      	subs	r2, #48	; 0x30
 800f76c:	f100 0301 	add.w	r3, r0, #1
 800f770:	d014      	beq.n	800f79c <_strtod_l+0x244>
 800f772:	9905      	ldr	r1, [sp, #20]
 800f774:	4419      	add	r1, r3
 800f776:	9105      	str	r1, [sp, #20]
 800f778:	462b      	mov	r3, r5
 800f77a:	eb00 0e05 	add.w	lr, r0, r5
 800f77e:	210a      	movs	r1, #10
 800f780:	4573      	cmp	r3, lr
 800f782:	d113      	bne.n	800f7ac <_strtod_l+0x254>
 800f784:	182b      	adds	r3, r5, r0
 800f786:	2b08      	cmp	r3, #8
 800f788:	f105 0501 	add.w	r5, r5, #1
 800f78c:	4405      	add	r5, r0
 800f78e:	dc1c      	bgt.n	800f7ca <_strtod_l+0x272>
 800f790:	9907      	ldr	r1, [sp, #28]
 800f792:	230a      	movs	r3, #10
 800f794:	fb03 2301 	mla	r3, r3, r1, r2
 800f798:	9307      	str	r3, [sp, #28]
 800f79a:	2300      	movs	r3, #0
 800f79c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f79e:	1c51      	adds	r1, r2, #1
 800f7a0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f7a2:	7852      	ldrb	r2, [r2, #1]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	e7c9      	b.n	800f73c <_strtod_l+0x1e4>
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	e7d2      	b.n	800f752 <_strtod_l+0x1fa>
 800f7ac:	2b08      	cmp	r3, #8
 800f7ae:	dc04      	bgt.n	800f7ba <_strtod_l+0x262>
 800f7b0:	9e07      	ldr	r6, [sp, #28]
 800f7b2:	434e      	muls	r6, r1
 800f7b4:	9607      	str	r6, [sp, #28]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	e7e2      	b.n	800f780 <_strtod_l+0x228>
 800f7ba:	f103 0c01 	add.w	ip, r3, #1
 800f7be:	f1bc 0f10 	cmp.w	ip, #16
 800f7c2:	bfd8      	it	le
 800f7c4:	fb01 f909 	mulle.w	r9, r1, r9
 800f7c8:	e7f5      	b.n	800f7b6 <_strtod_l+0x25e>
 800f7ca:	2d10      	cmp	r5, #16
 800f7cc:	bfdc      	itt	le
 800f7ce:	230a      	movle	r3, #10
 800f7d0:	fb03 2909 	mlale	r9, r3, r9, r2
 800f7d4:	e7e1      	b.n	800f79a <_strtod_l+0x242>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9305      	str	r3, [sp, #20]
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e77c      	b.n	800f6d8 <_strtod_l+0x180>
 800f7de:	f04f 0c00 	mov.w	ip, #0
 800f7e2:	f108 0202 	add.w	r2, r8, #2
 800f7e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f7e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f7ec:	e785      	b.n	800f6fa <_strtod_l+0x1a2>
 800f7ee:	f04f 0c01 	mov.w	ip, #1
 800f7f2:	e7f6      	b.n	800f7e2 <_strtod_l+0x28a>
 800f7f4:	08015ac0 	.word	0x08015ac0
 800f7f8:	08015874 	.word	0x08015874
 800f7fc:	7ff00000 	.word	0x7ff00000
 800f800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f802:	1c51      	adds	r1, r2, #1
 800f804:	9117      	str	r1, [sp, #92]	; 0x5c
 800f806:	7852      	ldrb	r2, [r2, #1]
 800f808:	2a30      	cmp	r2, #48	; 0x30
 800f80a:	d0f9      	beq.n	800f800 <_strtod_l+0x2a8>
 800f80c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f810:	2908      	cmp	r1, #8
 800f812:	f63f af79 	bhi.w	800f708 <_strtod_l+0x1b0>
 800f816:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f81a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f81c:	9206      	str	r2, [sp, #24]
 800f81e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f820:	1c51      	adds	r1, r2, #1
 800f822:	9117      	str	r1, [sp, #92]	; 0x5c
 800f824:	7852      	ldrb	r2, [r2, #1]
 800f826:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f82a:	2e09      	cmp	r6, #9
 800f82c:	d937      	bls.n	800f89e <_strtod_l+0x346>
 800f82e:	9e06      	ldr	r6, [sp, #24]
 800f830:	1b89      	subs	r1, r1, r6
 800f832:	2908      	cmp	r1, #8
 800f834:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f838:	dc02      	bgt.n	800f840 <_strtod_l+0x2e8>
 800f83a:	4576      	cmp	r6, lr
 800f83c:	bfa8      	it	ge
 800f83e:	4676      	movge	r6, lr
 800f840:	f1bc 0f00 	cmp.w	ip, #0
 800f844:	d000      	beq.n	800f848 <_strtod_l+0x2f0>
 800f846:	4276      	negs	r6, r6
 800f848:	2d00      	cmp	r5, #0
 800f84a:	d14d      	bne.n	800f8e8 <_strtod_l+0x390>
 800f84c:	9904      	ldr	r1, [sp, #16]
 800f84e:	4301      	orrs	r1, r0
 800f850:	f47f aec6 	bne.w	800f5e0 <_strtod_l+0x88>
 800f854:	2b00      	cmp	r3, #0
 800f856:	f47f aee1 	bne.w	800f61c <_strtod_l+0xc4>
 800f85a:	2a69      	cmp	r2, #105	; 0x69
 800f85c:	d027      	beq.n	800f8ae <_strtod_l+0x356>
 800f85e:	dc24      	bgt.n	800f8aa <_strtod_l+0x352>
 800f860:	2a49      	cmp	r2, #73	; 0x49
 800f862:	d024      	beq.n	800f8ae <_strtod_l+0x356>
 800f864:	2a4e      	cmp	r2, #78	; 0x4e
 800f866:	f47f aed9 	bne.w	800f61c <_strtod_l+0xc4>
 800f86a:	499f      	ldr	r1, [pc, #636]	; (800fae8 <_strtod_l+0x590>)
 800f86c:	a817      	add	r0, sp, #92	; 0x5c
 800f86e:	f001 ff23 	bl	80116b8 <__match>
 800f872:	2800      	cmp	r0, #0
 800f874:	f43f aed2 	beq.w	800f61c <_strtod_l+0xc4>
 800f878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2b28      	cmp	r3, #40	; 0x28
 800f87e:	d12d      	bne.n	800f8dc <_strtod_l+0x384>
 800f880:	499a      	ldr	r1, [pc, #616]	; (800faec <_strtod_l+0x594>)
 800f882:	aa1a      	add	r2, sp, #104	; 0x68
 800f884:	a817      	add	r0, sp, #92	; 0x5c
 800f886:	f001 ff2b 	bl	80116e0 <__hexnan>
 800f88a:	2805      	cmp	r0, #5
 800f88c:	d126      	bne.n	800f8dc <_strtod_l+0x384>
 800f88e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f890:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f894:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f898:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f89c:	e6a0      	b.n	800f5e0 <_strtod_l+0x88>
 800f89e:	210a      	movs	r1, #10
 800f8a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f8a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f8a8:	e7b9      	b.n	800f81e <_strtod_l+0x2c6>
 800f8aa:	2a6e      	cmp	r2, #110	; 0x6e
 800f8ac:	e7db      	b.n	800f866 <_strtod_l+0x30e>
 800f8ae:	4990      	ldr	r1, [pc, #576]	; (800faf0 <_strtod_l+0x598>)
 800f8b0:	a817      	add	r0, sp, #92	; 0x5c
 800f8b2:	f001 ff01 	bl	80116b8 <__match>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	f43f aeb0 	beq.w	800f61c <_strtod_l+0xc4>
 800f8bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8be:	498d      	ldr	r1, [pc, #564]	; (800faf4 <_strtod_l+0x59c>)
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	a817      	add	r0, sp, #92	; 0x5c
 800f8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8c6:	f001 fef7 	bl	80116b8 <__match>
 800f8ca:	b910      	cbnz	r0, 800f8d2 <_strtod_l+0x37a>
 800f8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800fb04 <_strtod_l+0x5ac>
 800f8d6:	f04f 0a00 	mov.w	sl, #0
 800f8da:	e681      	b.n	800f5e0 <_strtod_l+0x88>
 800f8dc:	4886      	ldr	r0, [pc, #536]	; (800faf8 <_strtod_l+0x5a0>)
 800f8de:	f002 fe6b 	bl	80125b8 <nan>
 800f8e2:	ec5b ab10 	vmov	sl, fp, d0
 800f8e6:	e67b      	b.n	800f5e0 <_strtod_l+0x88>
 800f8e8:	9b05      	ldr	r3, [sp, #20]
 800f8ea:	9807      	ldr	r0, [sp, #28]
 800f8ec:	1af3      	subs	r3, r6, r3
 800f8ee:	2f00      	cmp	r7, #0
 800f8f0:	bf08      	it	eq
 800f8f2:	462f      	moveq	r7, r5
 800f8f4:	2d10      	cmp	r5, #16
 800f8f6:	9306      	str	r3, [sp, #24]
 800f8f8:	46a8      	mov	r8, r5
 800f8fa:	bfa8      	it	ge
 800f8fc:	f04f 0810 	movge.w	r8, #16
 800f900:	f7f0 fe10 	bl	8000524 <__aeabi_ui2d>
 800f904:	2d09      	cmp	r5, #9
 800f906:	4682      	mov	sl, r0
 800f908:	468b      	mov	fp, r1
 800f90a:	dd13      	ble.n	800f934 <_strtod_l+0x3dc>
 800f90c:	4b7b      	ldr	r3, [pc, #492]	; (800fafc <_strtod_l+0x5a4>)
 800f90e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f912:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f916:	f7f0 fe7f 	bl	8000618 <__aeabi_dmul>
 800f91a:	4682      	mov	sl, r0
 800f91c:	4648      	mov	r0, r9
 800f91e:	468b      	mov	fp, r1
 800f920:	f7f0 fe00 	bl	8000524 <__aeabi_ui2d>
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	4650      	mov	r0, sl
 800f92a:	4659      	mov	r1, fp
 800f92c:	f7f0 fcbe 	bl	80002ac <__adddf3>
 800f930:	4682      	mov	sl, r0
 800f932:	468b      	mov	fp, r1
 800f934:	2d0f      	cmp	r5, #15
 800f936:	dc38      	bgt.n	800f9aa <_strtod_l+0x452>
 800f938:	9b06      	ldr	r3, [sp, #24]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f43f ae50 	beq.w	800f5e0 <_strtod_l+0x88>
 800f940:	dd24      	ble.n	800f98c <_strtod_l+0x434>
 800f942:	2b16      	cmp	r3, #22
 800f944:	dc0b      	bgt.n	800f95e <_strtod_l+0x406>
 800f946:	496d      	ldr	r1, [pc, #436]	; (800fafc <_strtod_l+0x5a4>)
 800f948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f950:	4652      	mov	r2, sl
 800f952:	465b      	mov	r3, fp
 800f954:	f7f0 fe60 	bl	8000618 <__aeabi_dmul>
 800f958:	4682      	mov	sl, r0
 800f95a:	468b      	mov	fp, r1
 800f95c:	e640      	b.n	800f5e0 <_strtod_l+0x88>
 800f95e:	9a06      	ldr	r2, [sp, #24]
 800f960:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f964:	4293      	cmp	r3, r2
 800f966:	db20      	blt.n	800f9aa <_strtod_l+0x452>
 800f968:	4c64      	ldr	r4, [pc, #400]	; (800fafc <_strtod_l+0x5a4>)
 800f96a:	f1c5 050f 	rsb	r5, r5, #15
 800f96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f972:	4652      	mov	r2, sl
 800f974:	465b      	mov	r3, fp
 800f976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f97a:	f7f0 fe4d 	bl	8000618 <__aeabi_dmul>
 800f97e:	9b06      	ldr	r3, [sp, #24]
 800f980:	1b5d      	subs	r5, r3, r5
 800f982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f98a:	e7e3      	b.n	800f954 <_strtod_l+0x3fc>
 800f98c:	9b06      	ldr	r3, [sp, #24]
 800f98e:	3316      	adds	r3, #22
 800f990:	db0b      	blt.n	800f9aa <_strtod_l+0x452>
 800f992:	9b05      	ldr	r3, [sp, #20]
 800f994:	1b9e      	subs	r6, r3, r6
 800f996:	4b59      	ldr	r3, [pc, #356]	; (800fafc <_strtod_l+0x5a4>)
 800f998:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f99c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f9a0:	4650      	mov	r0, sl
 800f9a2:	4659      	mov	r1, fp
 800f9a4:	f7f0 ff62 	bl	800086c <__aeabi_ddiv>
 800f9a8:	e7d6      	b.n	800f958 <_strtod_l+0x400>
 800f9aa:	9b06      	ldr	r3, [sp, #24]
 800f9ac:	eba5 0808 	sub.w	r8, r5, r8
 800f9b0:	4498      	add	r8, r3
 800f9b2:	f1b8 0f00 	cmp.w	r8, #0
 800f9b6:	dd74      	ble.n	800faa2 <_strtod_l+0x54a>
 800f9b8:	f018 030f 	ands.w	r3, r8, #15
 800f9bc:	d00a      	beq.n	800f9d4 <_strtod_l+0x47c>
 800f9be:	494f      	ldr	r1, [pc, #316]	; (800fafc <_strtod_l+0x5a4>)
 800f9c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9c4:	4652      	mov	r2, sl
 800f9c6:	465b      	mov	r3, fp
 800f9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9cc:	f7f0 fe24 	bl	8000618 <__aeabi_dmul>
 800f9d0:	4682      	mov	sl, r0
 800f9d2:	468b      	mov	fp, r1
 800f9d4:	f038 080f 	bics.w	r8, r8, #15
 800f9d8:	d04f      	beq.n	800fa7a <_strtod_l+0x522>
 800f9da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f9de:	dd22      	ble.n	800fa26 <_strtod_l+0x4ce>
 800f9e0:	2500      	movs	r5, #0
 800f9e2:	462e      	mov	r6, r5
 800f9e4:	9507      	str	r5, [sp, #28]
 800f9e6:	9505      	str	r5, [sp, #20]
 800f9e8:	2322      	movs	r3, #34	; 0x22
 800f9ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800fb04 <_strtod_l+0x5ac>
 800f9ee:	6023      	str	r3, [r4, #0]
 800f9f0:	f04f 0a00 	mov.w	sl, #0
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f43f adf2 	beq.w	800f5e0 <_strtod_l+0x88>
 800f9fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f001 ff86 	bl	8011910 <_Bfree>
 800fa04:	9905      	ldr	r1, [sp, #20]
 800fa06:	4620      	mov	r0, r4
 800fa08:	f001 ff82 	bl	8011910 <_Bfree>
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f001 ff7e 	bl	8011910 <_Bfree>
 800fa14:	9907      	ldr	r1, [sp, #28]
 800fa16:	4620      	mov	r0, r4
 800fa18:	f001 ff7a 	bl	8011910 <_Bfree>
 800fa1c:	4629      	mov	r1, r5
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f001 ff76 	bl	8011910 <_Bfree>
 800fa24:	e5dc      	b.n	800f5e0 <_strtod_l+0x88>
 800fa26:	4b36      	ldr	r3, [pc, #216]	; (800fb00 <_strtod_l+0x5a8>)
 800fa28:	9304      	str	r3, [sp, #16]
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fa30:	4650      	mov	r0, sl
 800fa32:	4659      	mov	r1, fp
 800fa34:	4699      	mov	r9, r3
 800fa36:	f1b8 0f01 	cmp.w	r8, #1
 800fa3a:	dc21      	bgt.n	800fa80 <_strtod_l+0x528>
 800fa3c:	b10b      	cbz	r3, 800fa42 <_strtod_l+0x4ea>
 800fa3e:	4682      	mov	sl, r0
 800fa40:	468b      	mov	fp, r1
 800fa42:	4b2f      	ldr	r3, [pc, #188]	; (800fb00 <_strtod_l+0x5a8>)
 800fa44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fa48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fa4c:	4652      	mov	r2, sl
 800fa4e:	465b      	mov	r3, fp
 800fa50:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fa54:	f7f0 fde0 	bl	8000618 <__aeabi_dmul>
 800fa58:	4b2a      	ldr	r3, [pc, #168]	; (800fb04 <_strtod_l+0x5ac>)
 800fa5a:	460a      	mov	r2, r1
 800fa5c:	400b      	ands	r3, r1
 800fa5e:	492a      	ldr	r1, [pc, #168]	; (800fb08 <_strtod_l+0x5b0>)
 800fa60:	428b      	cmp	r3, r1
 800fa62:	4682      	mov	sl, r0
 800fa64:	d8bc      	bhi.n	800f9e0 <_strtod_l+0x488>
 800fa66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fa6a:	428b      	cmp	r3, r1
 800fa6c:	bf86      	itte	hi
 800fa6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800fb0c <_strtod_l+0x5b4>
 800fa72:	f04f 3aff 	movhi.w	sl, #4294967295
 800fa76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	9304      	str	r3, [sp, #16]
 800fa7e:	e084      	b.n	800fb8a <_strtod_l+0x632>
 800fa80:	f018 0f01 	tst.w	r8, #1
 800fa84:	d005      	beq.n	800fa92 <_strtod_l+0x53a>
 800fa86:	9b04      	ldr	r3, [sp, #16]
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	f7f0 fdc4 	bl	8000618 <__aeabi_dmul>
 800fa90:	2301      	movs	r3, #1
 800fa92:	9a04      	ldr	r2, [sp, #16]
 800fa94:	3208      	adds	r2, #8
 800fa96:	f109 0901 	add.w	r9, r9, #1
 800fa9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fa9e:	9204      	str	r2, [sp, #16]
 800faa0:	e7c9      	b.n	800fa36 <_strtod_l+0x4de>
 800faa2:	d0ea      	beq.n	800fa7a <_strtod_l+0x522>
 800faa4:	f1c8 0800 	rsb	r8, r8, #0
 800faa8:	f018 020f 	ands.w	r2, r8, #15
 800faac:	d00a      	beq.n	800fac4 <_strtod_l+0x56c>
 800faae:	4b13      	ldr	r3, [pc, #76]	; (800fafc <_strtod_l+0x5a4>)
 800fab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fab4:	4650      	mov	r0, sl
 800fab6:	4659      	mov	r1, fp
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	f7f0 fed6 	bl	800086c <__aeabi_ddiv>
 800fac0:	4682      	mov	sl, r0
 800fac2:	468b      	mov	fp, r1
 800fac4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fac8:	d0d7      	beq.n	800fa7a <_strtod_l+0x522>
 800faca:	f1b8 0f1f 	cmp.w	r8, #31
 800face:	dd1f      	ble.n	800fb10 <_strtod_l+0x5b8>
 800fad0:	2500      	movs	r5, #0
 800fad2:	462e      	mov	r6, r5
 800fad4:	9507      	str	r5, [sp, #28]
 800fad6:	9505      	str	r5, [sp, #20]
 800fad8:	2322      	movs	r3, #34	; 0x22
 800fada:	f04f 0a00 	mov.w	sl, #0
 800fade:	f04f 0b00 	mov.w	fp, #0
 800fae2:	6023      	str	r3, [r4, #0]
 800fae4:	e786      	b.n	800f9f4 <_strtod_l+0x49c>
 800fae6:	bf00      	nop
 800fae8:	08015845 	.word	0x08015845
 800faec:	08015888 	.word	0x08015888
 800faf0:	0801583d 	.word	0x0801583d
 800faf4:	080159cc 	.word	0x080159cc
 800faf8:	08015c78 	.word	0x08015c78
 800fafc:	08015b58 	.word	0x08015b58
 800fb00:	08015b30 	.word	0x08015b30
 800fb04:	7ff00000 	.word	0x7ff00000
 800fb08:	7ca00000 	.word	0x7ca00000
 800fb0c:	7fefffff 	.word	0x7fefffff
 800fb10:	f018 0310 	ands.w	r3, r8, #16
 800fb14:	bf18      	it	ne
 800fb16:	236a      	movne	r3, #106	; 0x6a
 800fb18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800fec8 <_strtod_l+0x970>
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	4650      	mov	r0, sl
 800fb20:	4659      	mov	r1, fp
 800fb22:	2300      	movs	r3, #0
 800fb24:	f018 0f01 	tst.w	r8, #1
 800fb28:	d004      	beq.n	800fb34 <_strtod_l+0x5dc>
 800fb2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fb2e:	f7f0 fd73 	bl	8000618 <__aeabi_dmul>
 800fb32:	2301      	movs	r3, #1
 800fb34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fb38:	f109 0908 	add.w	r9, r9, #8
 800fb3c:	d1f2      	bne.n	800fb24 <_strtod_l+0x5cc>
 800fb3e:	b10b      	cbz	r3, 800fb44 <_strtod_l+0x5ec>
 800fb40:	4682      	mov	sl, r0
 800fb42:	468b      	mov	fp, r1
 800fb44:	9b04      	ldr	r3, [sp, #16]
 800fb46:	b1c3      	cbz	r3, 800fb7a <_strtod_l+0x622>
 800fb48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fb4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	4659      	mov	r1, fp
 800fb54:	dd11      	ble.n	800fb7a <_strtod_l+0x622>
 800fb56:	2b1f      	cmp	r3, #31
 800fb58:	f340 8124 	ble.w	800fda4 <_strtod_l+0x84c>
 800fb5c:	2b34      	cmp	r3, #52	; 0x34
 800fb5e:	bfde      	ittt	le
 800fb60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fb64:	f04f 33ff 	movle.w	r3, #4294967295
 800fb68:	fa03 f202 	lslle.w	r2, r3, r2
 800fb6c:	f04f 0a00 	mov.w	sl, #0
 800fb70:	bfcc      	ite	gt
 800fb72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fb76:	ea02 0b01 	andle.w	fp, r2, r1
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4650      	mov	r0, sl
 800fb80:	4659      	mov	r1, fp
 800fb82:	f7f0 ffb1 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	d1a2      	bne.n	800fad0 <_strtod_l+0x578>
 800fb8a:	9b07      	ldr	r3, [sp, #28]
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	9908      	ldr	r1, [sp, #32]
 800fb90:	462b      	mov	r3, r5
 800fb92:	463a      	mov	r2, r7
 800fb94:	4620      	mov	r0, r4
 800fb96:	f001 ff23 	bl	80119e0 <__s2b>
 800fb9a:	9007      	str	r0, [sp, #28]
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	f43f af1f 	beq.w	800f9e0 <_strtod_l+0x488>
 800fba2:	9b05      	ldr	r3, [sp, #20]
 800fba4:	1b9e      	subs	r6, r3, r6
 800fba6:	9b06      	ldr	r3, [sp, #24]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	bfb4      	ite	lt
 800fbac:	4633      	movlt	r3, r6
 800fbae:	2300      	movge	r3, #0
 800fbb0:	930c      	str	r3, [sp, #48]	; 0x30
 800fbb2:	9b06      	ldr	r3, [sp, #24]
 800fbb4:	2500      	movs	r5, #0
 800fbb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fbba:	9312      	str	r3, [sp, #72]	; 0x48
 800fbbc:	462e      	mov	r6, r5
 800fbbe:	9b07      	ldr	r3, [sp, #28]
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	6859      	ldr	r1, [r3, #4]
 800fbc4:	f001 fe64 	bl	8011890 <_Balloc>
 800fbc8:	9005      	str	r0, [sp, #20]
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	f43f af0c 	beq.w	800f9e8 <_strtod_l+0x490>
 800fbd0:	9b07      	ldr	r3, [sp, #28]
 800fbd2:	691a      	ldr	r2, [r3, #16]
 800fbd4:	3202      	adds	r2, #2
 800fbd6:	f103 010c 	add.w	r1, r3, #12
 800fbda:	0092      	lsls	r2, r2, #2
 800fbdc:	300c      	adds	r0, #12
 800fbde:	f7fe fc94 	bl	800e50a <memcpy>
 800fbe2:	ec4b ab10 	vmov	d0, sl, fp
 800fbe6:	aa1a      	add	r2, sp, #104	; 0x68
 800fbe8:	a919      	add	r1, sp, #100	; 0x64
 800fbea:	4620      	mov	r0, r4
 800fbec:	f002 fa3e 	bl	801206c <__d2b>
 800fbf0:	ec4b ab18 	vmov	d8, sl, fp
 800fbf4:	9018      	str	r0, [sp, #96]	; 0x60
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	f43f aef6 	beq.w	800f9e8 <_strtod_l+0x490>
 800fbfc:	2101      	movs	r1, #1
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f001 ff88 	bl	8011b14 <__i2b>
 800fc04:	4606      	mov	r6, r0
 800fc06:	2800      	cmp	r0, #0
 800fc08:	f43f aeee 	beq.w	800f9e8 <_strtod_l+0x490>
 800fc0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fc0e:	9904      	ldr	r1, [sp, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	bfab      	itete	ge
 800fc14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800fc16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800fc18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fc1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800fc1e:	bfac      	ite	ge
 800fc20:	eb03 0902 	addge.w	r9, r3, r2
 800fc24:	1ad7      	sublt	r7, r2, r3
 800fc26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fc28:	eba3 0801 	sub.w	r8, r3, r1
 800fc2c:	4490      	add	r8, r2
 800fc2e:	4ba1      	ldr	r3, [pc, #644]	; (800feb4 <_strtod_l+0x95c>)
 800fc30:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc34:	4598      	cmp	r8, r3
 800fc36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc3a:	f280 80c7 	bge.w	800fdcc <_strtod_l+0x874>
 800fc3e:	eba3 0308 	sub.w	r3, r3, r8
 800fc42:	2b1f      	cmp	r3, #31
 800fc44:	eba2 0203 	sub.w	r2, r2, r3
 800fc48:	f04f 0101 	mov.w	r1, #1
 800fc4c:	f300 80b1 	bgt.w	800fdb2 <_strtod_l+0x85a>
 800fc50:	fa01 f303 	lsl.w	r3, r1, r3
 800fc54:	930d      	str	r3, [sp, #52]	; 0x34
 800fc56:	2300      	movs	r3, #0
 800fc58:	9308      	str	r3, [sp, #32]
 800fc5a:	eb09 0802 	add.w	r8, r9, r2
 800fc5e:	9b04      	ldr	r3, [sp, #16]
 800fc60:	45c1      	cmp	r9, r8
 800fc62:	4417      	add	r7, r2
 800fc64:	441f      	add	r7, r3
 800fc66:	464b      	mov	r3, r9
 800fc68:	bfa8      	it	ge
 800fc6a:	4643      	movge	r3, r8
 800fc6c:	42bb      	cmp	r3, r7
 800fc6e:	bfa8      	it	ge
 800fc70:	463b      	movge	r3, r7
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	bfc2      	ittt	gt
 800fc76:	eba8 0803 	subgt.w	r8, r8, r3
 800fc7a:	1aff      	subgt	r7, r7, r3
 800fc7c:	eba9 0903 	subgt.w	r9, r9, r3
 800fc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	dd17      	ble.n	800fcb6 <_strtod_l+0x75e>
 800fc86:	4631      	mov	r1, r6
 800fc88:	461a      	mov	r2, r3
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f002 f802 	bl	8011c94 <__pow5mult>
 800fc90:	4606      	mov	r6, r0
 800fc92:	2800      	cmp	r0, #0
 800fc94:	f43f aea8 	beq.w	800f9e8 <_strtod_l+0x490>
 800fc98:	4601      	mov	r1, r0
 800fc9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f001 ff4f 	bl	8011b40 <__multiply>
 800fca2:	900b      	str	r0, [sp, #44]	; 0x2c
 800fca4:	2800      	cmp	r0, #0
 800fca6:	f43f ae9f 	beq.w	800f9e8 <_strtod_l+0x490>
 800fcaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fcac:	4620      	mov	r0, r4
 800fcae:	f001 fe2f 	bl	8011910 <_Bfree>
 800fcb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcb4:	9318      	str	r3, [sp, #96]	; 0x60
 800fcb6:	f1b8 0f00 	cmp.w	r8, #0
 800fcba:	f300 808c 	bgt.w	800fdd6 <_strtod_l+0x87e>
 800fcbe:	9b06      	ldr	r3, [sp, #24]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	dd08      	ble.n	800fcd6 <_strtod_l+0x77e>
 800fcc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fcc6:	9905      	ldr	r1, [sp, #20]
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f001 ffe3 	bl	8011c94 <__pow5mult>
 800fcce:	9005      	str	r0, [sp, #20]
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	f43f ae89 	beq.w	800f9e8 <_strtod_l+0x490>
 800fcd6:	2f00      	cmp	r7, #0
 800fcd8:	dd08      	ble.n	800fcec <_strtod_l+0x794>
 800fcda:	9905      	ldr	r1, [sp, #20]
 800fcdc:	463a      	mov	r2, r7
 800fcde:	4620      	mov	r0, r4
 800fce0:	f002 f832 	bl	8011d48 <__lshift>
 800fce4:	9005      	str	r0, [sp, #20]
 800fce6:	2800      	cmp	r0, #0
 800fce8:	f43f ae7e 	beq.w	800f9e8 <_strtod_l+0x490>
 800fcec:	f1b9 0f00 	cmp.w	r9, #0
 800fcf0:	dd08      	ble.n	800fd04 <_strtod_l+0x7ac>
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	464a      	mov	r2, r9
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f002 f826 	bl	8011d48 <__lshift>
 800fcfc:	4606      	mov	r6, r0
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	f43f ae72 	beq.w	800f9e8 <_strtod_l+0x490>
 800fd04:	9a05      	ldr	r2, [sp, #20]
 800fd06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f002 f8a9 	bl	8011e60 <__mdiff>
 800fd0e:	4605      	mov	r5, r0
 800fd10:	2800      	cmp	r0, #0
 800fd12:	f43f ae69 	beq.w	800f9e8 <_strtod_l+0x490>
 800fd16:	68c3      	ldr	r3, [r0, #12]
 800fd18:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60c3      	str	r3, [r0, #12]
 800fd1e:	4631      	mov	r1, r6
 800fd20:	f002 f882 	bl	8011e28 <__mcmp>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	da60      	bge.n	800fdea <_strtod_l+0x892>
 800fd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd2a:	ea53 030a 	orrs.w	r3, r3, sl
 800fd2e:	f040 8082 	bne.w	800fe36 <_strtod_l+0x8de>
 800fd32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d17d      	bne.n	800fe36 <_strtod_l+0x8de>
 800fd3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd3e:	0d1b      	lsrs	r3, r3, #20
 800fd40:	051b      	lsls	r3, r3, #20
 800fd42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd46:	d976      	bls.n	800fe36 <_strtod_l+0x8de>
 800fd48:	696b      	ldr	r3, [r5, #20]
 800fd4a:	b913      	cbnz	r3, 800fd52 <_strtod_l+0x7fa>
 800fd4c:	692b      	ldr	r3, [r5, #16]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	dd71      	ble.n	800fe36 <_strtod_l+0x8de>
 800fd52:	4629      	mov	r1, r5
 800fd54:	2201      	movs	r2, #1
 800fd56:	4620      	mov	r0, r4
 800fd58:	f001 fff6 	bl	8011d48 <__lshift>
 800fd5c:	4631      	mov	r1, r6
 800fd5e:	4605      	mov	r5, r0
 800fd60:	f002 f862 	bl	8011e28 <__mcmp>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	dd66      	ble.n	800fe36 <_strtod_l+0x8de>
 800fd68:	9904      	ldr	r1, [sp, #16]
 800fd6a:	4a53      	ldr	r2, [pc, #332]	; (800feb8 <_strtod_l+0x960>)
 800fd6c:	465b      	mov	r3, fp
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	f000 8081 	beq.w	800fe76 <_strtod_l+0x91e>
 800fd74:	ea02 010b 	and.w	r1, r2, fp
 800fd78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fd7c:	dc7b      	bgt.n	800fe76 <_strtod_l+0x91e>
 800fd7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fd82:	f77f aea9 	ble.w	800fad8 <_strtod_l+0x580>
 800fd86:	4b4d      	ldr	r3, [pc, #308]	; (800febc <_strtod_l+0x964>)
 800fd88:	4650      	mov	r0, sl
 800fd8a:	4659      	mov	r1, fp
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f7f0 fc43 	bl	8000618 <__aeabi_dmul>
 800fd92:	460b      	mov	r3, r1
 800fd94:	4303      	orrs	r3, r0
 800fd96:	bf08      	it	eq
 800fd98:	2322      	moveq	r3, #34	; 0x22
 800fd9a:	4682      	mov	sl, r0
 800fd9c:	468b      	mov	fp, r1
 800fd9e:	bf08      	it	eq
 800fda0:	6023      	streq	r3, [r4, #0]
 800fda2:	e62b      	b.n	800f9fc <_strtod_l+0x4a4>
 800fda4:	f04f 32ff 	mov.w	r2, #4294967295
 800fda8:	fa02 f303 	lsl.w	r3, r2, r3
 800fdac:	ea03 0a0a 	and.w	sl, r3, sl
 800fdb0:	e6e3      	b.n	800fb7a <_strtod_l+0x622>
 800fdb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fdb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800fdba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800fdbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800fdc2:	fa01 f308 	lsl.w	r3, r1, r8
 800fdc6:	9308      	str	r3, [sp, #32]
 800fdc8:	910d      	str	r1, [sp, #52]	; 0x34
 800fdca:	e746      	b.n	800fc5a <_strtod_l+0x702>
 800fdcc:	2300      	movs	r3, #0
 800fdce:	9308      	str	r3, [sp, #32]
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	930d      	str	r3, [sp, #52]	; 0x34
 800fdd4:	e741      	b.n	800fc5a <_strtod_l+0x702>
 800fdd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdd8:	4642      	mov	r2, r8
 800fdda:	4620      	mov	r0, r4
 800fddc:	f001 ffb4 	bl	8011d48 <__lshift>
 800fde0:	9018      	str	r0, [sp, #96]	; 0x60
 800fde2:	2800      	cmp	r0, #0
 800fde4:	f47f af6b 	bne.w	800fcbe <_strtod_l+0x766>
 800fde8:	e5fe      	b.n	800f9e8 <_strtod_l+0x490>
 800fdea:	465f      	mov	r7, fp
 800fdec:	d16e      	bne.n	800fecc <_strtod_l+0x974>
 800fdee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fdf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdf4:	b342      	cbz	r2, 800fe48 <_strtod_l+0x8f0>
 800fdf6:	4a32      	ldr	r2, [pc, #200]	; (800fec0 <_strtod_l+0x968>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d128      	bne.n	800fe4e <_strtod_l+0x8f6>
 800fdfc:	9b04      	ldr	r3, [sp, #16]
 800fdfe:	4651      	mov	r1, sl
 800fe00:	b1eb      	cbz	r3, 800fe3e <_strtod_l+0x8e6>
 800fe02:	4b2d      	ldr	r3, [pc, #180]	; (800feb8 <_strtod_l+0x960>)
 800fe04:	403b      	ands	r3, r7
 800fe06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe0e:	d819      	bhi.n	800fe44 <_strtod_l+0x8ec>
 800fe10:	0d1b      	lsrs	r3, r3, #20
 800fe12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fe16:	fa02 f303 	lsl.w	r3, r2, r3
 800fe1a:	4299      	cmp	r1, r3
 800fe1c:	d117      	bne.n	800fe4e <_strtod_l+0x8f6>
 800fe1e:	4b29      	ldr	r3, [pc, #164]	; (800fec4 <_strtod_l+0x96c>)
 800fe20:	429f      	cmp	r7, r3
 800fe22:	d102      	bne.n	800fe2a <_strtod_l+0x8d2>
 800fe24:	3101      	adds	r1, #1
 800fe26:	f43f addf 	beq.w	800f9e8 <_strtod_l+0x490>
 800fe2a:	4b23      	ldr	r3, [pc, #140]	; (800feb8 <_strtod_l+0x960>)
 800fe2c:	403b      	ands	r3, r7
 800fe2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fe32:	f04f 0a00 	mov.w	sl, #0
 800fe36:	9b04      	ldr	r3, [sp, #16]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1a4      	bne.n	800fd86 <_strtod_l+0x82e>
 800fe3c:	e5de      	b.n	800f9fc <_strtod_l+0x4a4>
 800fe3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe42:	e7ea      	b.n	800fe1a <_strtod_l+0x8c2>
 800fe44:	4613      	mov	r3, r2
 800fe46:	e7e8      	b.n	800fe1a <_strtod_l+0x8c2>
 800fe48:	ea53 030a 	orrs.w	r3, r3, sl
 800fe4c:	d08c      	beq.n	800fd68 <_strtod_l+0x810>
 800fe4e:	9b08      	ldr	r3, [sp, #32]
 800fe50:	b1db      	cbz	r3, 800fe8a <_strtod_l+0x932>
 800fe52:	423b      	tst	r3, r7
 800fe54:	d0ef      	beq.n	800fe36 <_strtod_l+0x8de>
 800fe56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe58:	9a04      	ldr	r2, [sp, #16]
 800fe5a:	4650      	mov	r0, sl
 800fe5c:	4659      	mov	r1, fp
 800fe5e:	b1c3      	cbz	r3, 800fe92 <_strtod_l+0x93a>
 800fe60:	f7ff fb5b 	bl	800f51a <sulp>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	ec51 0b18 	vmov	r0, r1, d8
 800fe6c:	f7f0 fa1e 	bl	80002ac <__adddf3>
 800fe70:	4682      	mov	sl, r0
 800fe72:	468b      	mov	fp, r1
 800fe74:	e7df      	b.n	800fe36 <_strtod_l+0x8de>
 800fe76:	4013      	ands	r3, r2
 800fe78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fe80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fe84:	f04f 3aff 	mov.w	sl, #4294967295
 800fe88:	e7d5      	b.n	800fe36 <_strtod_l+0x8de>
 800fe8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe8c:	ea13 0f0a 	tst.w	r3, sl
 800fe90:	e7e0      	b.n	800fe54 <_strtod_l+0x8fc>
 800fe92:	f7ff fb42 	bl	800f51a <sulp>
 800fe96:	4602      	mov	r2, r0
 800fe98:	460b      	mov	r3, r1
 800fe9a:	ec51 0b18 	vmov	r0, r1, d8
 800fe9e:	f7f0 fa03 	bl	80002a8 <__aeabi_dsub>
 800fea2:	2200      	movs	r2, #0
 800fea4:	2300      	movs	r3, #0
 800fea6:	4682      	mov	sl, r0
 800fea8:	468b      	mov	fp, r1
 800feaa:	f7f0 fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800feae:	2800      	cmp	r0, #0
 800feb0:	d0c1      	beq.n	800fe36 <_strtod_l+0x8de>
 800feb2:	e611      	b.n	800fad8 <_strtod_l+0x580>
 800feb4:	fffffc02 	.word	0xfffffc02
 800feb8:	7ff00000 	.word	0x7ff00000
 800febc:	39500000 	.word	0x39500000
 800fec0:	000fffff 	.word	0x000fffff
 800fec4:	7fefffff 	.word	0x7fefffff
 800fec8:	080158a0 	.word	0x080158a0
 800fecc:	4631      	mov	r1, r6
 800fece:	4628      	mov	r0, r5
 800fed0:	f002 f928 	bl	8012124 <__ratio>
 800fed4:	ec59 8b10 	vmov	r8, r9, d0
 800fed8:	ee10 0a10 	vmov	r0, s0
 800fedc:	2200      	movs	r2, #0
 800fede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fee2:	4649      	mov	r1, r9
 800fee4:	f7f0 fe14 	bl	8000b10 <__aeabi_dcmple>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d07a      	beq.n	800ffe2 <_strtod_l+0xa8a>
 800feec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d04a      	beq.n	800ff88 <_strtod_l+0xa30>
 800fef2:	4b95      	ldr	r3, [pc, #596]	; (8010148 <_strtod_l+0xbf0>)
 800fef4:	2200      	movs	r2, #0
 800fef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fefa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010148 <_strtod_l+0xbf0>
 800fefe:	f04f 0800 	mov.w	r8, #0
 800ff02:	4b92      	ldr	r3, [pc, #584]	; (801014c <_strtod_l+0xbf4>)
 800ff04:	403b      	ands	r3, r7
 800ff06:	930d      	str	r3, [sp, #52]	; 0x34
 800ff08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff0a:	4b91      	ldr	r3, [pc, #580]	; (8010150 <_strtod_l+0xbf8>)
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	f040 80b0 	bne.w	8010072 <_strtod_l+0xb1a>
 800ff12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ff1a:	ec4b ab10 	vmov	d0, sl, fp
 800ff1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff22:	f002 f827 	bl	8011f74 <__ulp>
 800ff26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ff2a:	ec53 2b10 	vmov	r2, r3, d0
 800ff2e:	f7f0 fb73 	bl	8000618 <__aeabi_dmul>
 800ff32:	4652      	mov	r2, sl
 800ff34:	465b      	mov	r3, fp
 800ff36:	f7f0 f9b9 	bl	80002ac <__adddf3>
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	4983      	ldr	r1, [pc, #524]	; (801014c <_strtod_l+0xbf4>)
 800ff3e:	4a85      	ldr	r2, [pc, #532]	; (8010154 <_strtod_l+0xbfc>)
 800ff40:	4019      	ands	r1, r3
 800ff42:	4291      	cmp	r1, r2
 800ff44:	4682      	mov	sl, r0
 800ff46:	d960      	bls.n	801000a <_strtod_l+0xab2>
 800ff48:	ee18 3a90 	vmov	r3, s17
 800ff4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ff50:	4293      	cmp	r3, r2
 800ff52:	d104      	bne.n	800ff5e <_strtod_l+0xa06>
 800ff54:	ee18 3a10 	vmov	r3, s16
 800ff58:	3301      	adds	r3, #1
 800ff5a:	f43f ad45 	beq.w	800f9e8 <_strtod_l+0x490>
 800ff5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010160 <_strtod_l+0xc08>
 800ff62:	f04f 3aff 	mov.w	sl, #4294967295
 800ff66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f001 fcd1 	bl	8011910 <_Bfree>
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	4620      	mov	r0, r4
 800ff72:	f001 fccd 	bl	8011910 <_Bfree>
 800ff76:	4631      	mov	r1, r6
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f001 fcc9 	bl	8011910 <_Bfree>
 800ff7e:	4629      	mov	r1, r5
 800ff80:	4620      	mov	r0, r4
 800ff82:	f001 fcc5 	bl	8011910 <_Bfree>
 800ff86:	e61a      	b.n	800fbbe <_strtod_l+0x666>
 800ff88:	f1ba 0f00 	cmp.w	sl, #0
 800ff8c:	d11b      	bne.n	800ffc6 <_strtod_l+0xa6e>
 800ff8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff92:	b9f3      	cbnz	r3, 800ffd2 <_strtod_l+0xa7a>
 800ff94:	4b6c      	ldr	r3, [pc, #432]	; (8010148 <_strtod_l+0xbf0>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	4640      	mov	r0, r8
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	f7f0 fdae 	bl	8000afc <__aeabi_dcmplt>
 800ffa0:	b9d0      	cbnz	r0, 800ffd8 <_strtod_l+0xa80>
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	4649      	mov	r1, r9
 800ffa6:	4b6c      	ldr	r3, [pc, #432]	; (8010158 <_strtod_l+0xc00>)
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f7f0 fb35 	bl	8000618 <__aeabi_dmul>
 800ffae:	4680      	mov	r8, r0
 800ffb0:	4689      	mov	r9, r1
 800ffb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ffb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ffba:	9315      	str	r3, [sp, #84]	; 0x54
 800ffbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ffc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ffc4:	e79d      	b.n	800ff02 <_strtod_l+0x9aa>
 800ffc6:	f1ba 0f01 	cmp.w	sl, #1
 800ffca:	d102      	bne.n	800ffd2 <_strtod_l+0xa7a>
 800ffcc:	2f00      	cmp	r7, #0
 800ffce:	f43f ad83 	beq.w	800fad8 <_strtod_l+0x580>
 800ffd2:	4b62      	ldr	r3, [pc, #392]	; (801015c <_strtod_l+0xc04>)
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	e78e      	b.n	800fef6 <_strtod_l+0x99e>
 800ffd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010158 <_strtod_l+0xc00>
 800ffdc:	f04f 0800 	mov.w	r8, #0
 800ffe0:	e7e7      	b.n	800ffb2 <_strtod_l+0xa5a>
 800ffe2:	4b5d      	ldr	r3, [pc, #372]	; (8010158 <_strtod_l+0xc00>)
 800ffe4:	4640      	mov	r0, r8
 800ffe6:	4649      	mov	r1, r9
 800ffe8:	2200      	movs	r2, #0
 800ffea:	f7f0 fb15 	bl	8000618 <__aeabi_dmul>
 800ffee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fff0:	4680      	mov	r8, r0
 800fff2:	4689      	mov	r9, r1
 800fff4:	b933      	cbnz	r3, 8010004 <_strtod_l+0xaac>
 800fff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fffa:	900e      	str	r0, [sp, #56]	; 0x38
 800fffc:	930f      	str	r3, [sp, #60]	; 0x3c
 800fffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010002:	e7dd      	b.n	800ffc0 <_strtod_l+0xa68>
 8010004:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010008:	e7f9      	b.n	800fffe <_strtod_l+0xaa6>
 801000a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801000e:	9b04      	ldr	r3, [sp, #16]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1a8      	bne.n	800ff66 <_strtod_l+0xa0e>
 8010014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801001a:	0d1b      	lsrs	r3, r3, #20
 801001c:	051b      	lsls	r3, r3, #20
 801001e:	429a      	cmp	r2, r3
 8010020:	d1a1      	bne.n	800ff66 <_strtod_l+0xa0e>
 8010022:	4640      	mov	r0, r8
 8010024:	4649      	mov	r1, r9
 8010026:	f7f0 fe57 	bl	8000cd8 <__aeabi_d2lz>
 801002a:	f7f0 fac7 	bl	80005bc <__aeabi_l2d>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	4640      	mov	r0, r8
 8010034:	4649      	mov	r1, r9
 8010036:	f7f0 f937 	bl	80002a8 <__aeabi_dsub>
 801003a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801003c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010040:	ea43 030a 	orr.w	r3, r3, sl
 8010044:	4313      	orrs	r3, r2
 8010046:	4680      	mov	r8, r0
 8010048:	4689      	mov	r9, r1
 801004a:	d055      	beq.n	80100f8 <_strtod_l+0xba0>
 801004c:	a336      	add	r3, pc, #216	; (adr r3, 8010128 <_strtod_l+0xbd0>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 fd53 	bl	8000afc <__aeabi_dcmplt>
 8010056:	2800      	cmp	r0, #0
 8010058:	f47f acd0 	bne.w	800f9fc <_strtod_l+0x4a4>
 801005c:	a334      	add	r3, pc, #208	; (adr r3, 8010130 <_strtod_l+0xbd8>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	4640      	mov	r0, r8
 8010064:	4649      	mov	r1, r9
 8010066:	f7f0 fd67 	bl	8000b38 <__aeabi_dcmpgt>
 801006a:	2800      	cmp	r0, #0
 801006c:	f43f af7b 	beq.w	800ff66 <_strtod_l+0xa0e>
 8010070:	e4c4      	b.n	800f9fc <_strtod_l+0x4a4>
 8010072:	9b04      	ldr	r3, [sp, #16]
 8010074:	b333      	cbz	r3, 80100c4 <_strtod_l+0xb6c>
 8010076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010078:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801007c:	d822      	bhi.n	80100c4 <_strtod_l+0xb6c>
 801007e:	a32e      	add	r3, pc, #184	; (adr r3, 8010138 <_strtod_l+0xbe0>)
 8010080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010084:	4640      	mov	r0, r8
 8010086:	4649      	mov	r1, r9
 8010088:	f7f0 fd42 	bl	8000b10 <__aeabi_dcmple>
 801008c:	b1a0      	cbz	r0, 80100b8 <_strtod_l+0xb60>
 801008e:	4649      	mov	r1, r9
 8010090:	4640      	mov	r0, r8
 8010092:	f7f0 fd99 	bl	8000bc8 <__aeabi_d2uiz>
 8010096:	2801      	cmp	r0, #1
 8010098:	bf38      	it	cc
 801009a:	2001      	movcc	r0, #1
 801009c:	f7f0 fa42 	bl	8000524 <__aeabi_ui2d>
 80100a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100a2:	4680      	mov	r8, r0
 80100a4:	4689      	mov	r9, r1
 80100a6:	bb23      	cbnz	r3, 80100f2 <_strtod_l+0xb9a>
 80100a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100ac:	9010      	str	r0, [sp, #64]	; 0x40
 80100ae:	9311      	str	r3, [sp, #68]	; 0x44
 80100b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80100b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80100b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80100bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80100c0:	1a9b      	subs	r3, r3, r2
 80100c2:	9309      	str	r3, [sp, #36]	; 0x24
 80100c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100c8:	eeb0 0a48 	vmov.f32	s0, s16
 80100cc:	eef0 0a68 	vmov.f32	s1, s17
 80100d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80100d4:	f001 ff4e 	bl	8011f74 <__ulp>
 80100d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100dc:	ec53 2b10 	vmov	r2, r3, d0
 80100e0:	f7f0 fa9a 	bl	8000618 <__aeabi_dmul>
 80100e4:	ec53 2b18 	vmov	r2, r3, d8
 80100e8:	f7f0 f8e0 	bl	80002ac <__adddf3>
 80100ec:	4682      	mov	sl, r0
 80100ee:	468b      	mov	fp, r1
 80100f0:	e78d      	b.n	801000e <_strtod_l+0xab6>
 80100f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80100f6:	e7db      	b.n	80100b0 <_strtod_l+0xb58>
 80100f8:	a311      	add	r3, pc, #68	; (adr r3, 8010140 <_strtod_l+0xbe8>)
 80100fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fe:	f7f0 fcfd 	bl	8000afc <__aeabi_dcmplt>
 8010102:	e7b2      	b.n	801006a <_strtod_l+0xb12>
 8010104:	2300      	movs	r3, #0
 8010106:	930a      	str	r3, [sp, #40]	; 0x28
 8010108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801010a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	f7ff ba6b 	b.w	800f5e8 <_strtod_l+0x90>
 8010112:	2a65      	cmp	r2, #101	; 0x65
 8010114:	f43f ab5f 	beq.w	800f7d6 <_strtod_l+0x27e>
 8010118:	2a45      	cmp	r2, #69	; 0x45
 801011a:	f43f ab5c 	beq.w	800f7d6 <_strtod_l+0x27e>
 801011e:	2301      	movs	r3, #1
 8010120:	f7ff bb94 	b.w	800f84c <_strtod_l+0x2f4>
 8010124:	f3af 8000 	nop.w
 8010128:	94a03595 	.word	0x94a03595
 801012c:	3fdfffff 	.word	0x3fdfffff
 8010130:	35afe535 	.word	0x35afe535
 8010134:	3fe00000 	.word	0x3fe00000
 8010138:	ffc00000 	.word	0xffc00000
 801013c:	41dfffff 	.word	0x41dfffff
 8010140:	94a03595 	.word	0x94a03595
 8010144:	3fcfffff 	.word	0x3fcfffff
 8010148:	3ff00000 	.word	0x3ff00000
 801014c:	7ff00000 	.word	0x7ff00000
 8010150:	7fe00000 	.word	0x7fe00000
 8010154:	7c9fffff 	.word	0x7c9fffff
 8010158:	3fe00000 	.word	0x3fe00000
 801015c:	bff00000 	.word	0xbff00000
 8010160:	7fefffff 	.word	0x7fefffff

08010164 <_strtod_r>:
 8010164:	4b01      	ldr	r3, [pc, #4]	; (801016c <_strtod_r+0x8>)
 8010166:	f7ff b9f7 	b.w	800f558 <_strtod_l>
 801016a:	bf00      	nop
 801016c:	2000027c 	.word	0x2000027c

08010170 <_strtol_l.constprop.0>:
 8010170:	2b01      	cmp	r3, #1
 8010172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010176:	d001      	beq.n	801017c <_strtol_l.constprop.0+0xc>
 8010178:	2b24      	cmp	r3, #36	; 0x24
 801017a:	d906      	bls.n	801018a <_strtol_l.constprop.0+0x1a>
 801017c:	f7fe f8a2 	bl	800e2c4 <__errno>
 8010180:	2316      	movs	r3, #22
 8010182:	6003      	str	r3, [r0, #0]
 8010184:	2000      	movs	r0, #0
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010270 <_strtol_l.constprop.0+0x100>
 801018e:	460d      	mov	r5, r1
 8010190:	462e      	mov	r6, r5
 8010192:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010196:	f814 700c 	ldrb.w	r7, [r4, ip]
 801019a:	f017 0708 	ands.w	r7, r7, #8
 801019e:	d1f7      	bne.n	8010190 <_strtol_l.constprop.0+0x20>
 80101a0:	2c2d      	cmp	r4, #45	; 0x2d
 80101a2:	d132      	bne.n	801020a <_strtol_l.constprop.0+0x9a>
 80101a4:	782c      	ldrb	r4, [r5, #0]
 80101a6:	2701      	movs	r7, #1
 80101a8:	1cb5      	adds	r5, r6, #2
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d05b      	beq.n	8010266 <_strtol_l.constprop.0+0xf6>
 80101ae:	2b10      	cmp	r3, #16
 80101b0:	d109      	bne.n	80101c6 <_strtol_l.constprop.0+0x56>
 80101b2:	2c30      	cmp	r4, #48	; 0x30
 80101b4:	d107      	bne.n	80101c6 <_strtol_l.constprop.0+0x56>
 80101b6:	782c      	ldrb	r4, [r5, #0]
 80101b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80101bc:	2c58      	cmp	r4, #88	; 0x58
 80101be:	d14d      	bne.n	801025c <_strtol_l.constprop.0+0xec>
 80101c0:	786c      	ldrb	r4, [r5, #1]
 80101c2:	2310      	movs	r3, #16
 80101c4:	3502      	adds	r5, #2
 80101c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80101ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80101ce:	f04f 0c00 	mov.w	ip, #0
 80101d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80101d6:	4666      	mov	r6, ip
 80101d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80101dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80101e0:	f1be 0f09 	cmp.w	lr, #9
 80101e4:	d816      	bhi.n	8010214 <_strtol_l.constprop.0+0xa4>
 80101e6:	4674      	mov	r4, lr
 80101e8:	42a3      	cmp	r3, r4
 80101ea:	dd24      	ble.n	8010236 <_strtol_l.constprop.0+0xc6>
 80101ec:	f1bc 0f00 	cmp.w	ip, #0
 80101f0:	db1e      	blt.n	8010230 <_strtol_l.constprop.0+0xc0>
 80101f2:	45b1      	cmp	r9, r6
 80101f4:	d31c      	bcc.n	8010230 <_strtol_l.constprop.0+0xc0>
 80101f6:	d101      	bne.n	80101fc <_strtol_l.constprop.0+0x8c>
 80101f8:	45a2      	cmp	sl, r4
 80101fa:	db19      	blt.n	8010230 <_strtol_l.constprop.0+0xc0>
 80101fc:	fb06 4603 	mla	r6, r6, r3, r4
 8010200:	f04f 0c01 	mov.w	ip, #1
 8010204:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010208:	e7e8      	b.n	80101dc <_strtol_l.constprop.0+0x6c>
 801020a:	2c2b      	cmp	r4, #43	; 0x2b
 801020c:	bf04      	itt	eq
 801020e:	782c      	ldrbeq	r4, [r5, #0]
 8010210:	1cb5      	addeq	r5, r6, #2
 8010212:	e7ca      	b.n	80101aa <_strtol_l.constprop.0+0x3a>
 8010214:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010218:	f1be 0f19 	cmp.w	lr, #25
 801021c:	d801      	bhi.n	8010222 <_strtol_l.constprop.0+0xb2>
 801021e:	3c37      	subs	r4, #55	; 0x37
 8010220:	e7e2      	b.n	80101e8 <_strtol_l.constprop.0+0x78>
 8010222:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010226:	f1be 0f19 	cmp.w	lr, #25
 801022a:	d804      	bhi.n	8010236 <_strtol_l.constprop.0+0xc6>
 801022c:	3c57      	subs	r4, #87	; 0x57
 801022e:	e7db      	b.n	80101e8 <_strtol_l.constprop.0+0x78>
 8010230:	f04f 3cff 	mov.w	ip, #4294967295
 8010234:	e7e6      	b.n	8010204 <_strtol_l.constprop.0+0x94>
 8010236:	f1bc 0f00 	cmp.w	ip, #0
 801023a:	da05      	bge.n	8010248 <_strtol_l.constprop.0+0xd8>
 801023c:	2322      	movs	r3, #34	; 0x22
 801023e:	6003      	str	r3, [r0, #0]
 8010240:	4646      	mov	r6, r8
 8010242:	b942      	cbnz	r2, 8010256 <_strtol_l.constprop.0+0xe6>
 8010244:	4630      	mov	r0, r6
 8010246:	e79e      	b.n	8010186 <_strtol_l.constprop.0+0x16>
 8010248:	b107      	cbz	r7, 801024c <_strtol_l.constprop.0+0xdc>
 801024a:	4276      	negs	r6, r6
 801024c:	2a00      	cmp	r2, #0
 801024e:	d0f9      	beq.n	8010244 <_strtol_l.constprop.0+0xd4>
 8010250:	f1bc 0f00 	cmp.w	ip, #0
 8010254:	d000      	beq.n	8010258 <_strtol_l.constprop.0+0xe8>
 8010256:	1e69      	subs	r1, r5, #1
 8010258:	6011      	str	r1, [r2, #0]
 801025a:	e7f3      	b.n	8010244 <_strtol_l.constprop.0+0xd4>
 801025c:	2430      	movs	r4, #48	; 0x30
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1b1      	bne.n	80101c6 <_strtol_l.constprop.0+0x56>
 8010262:	2308      	movs	r3, #8
 8010264:	e7af      	b.n	80101c6 <_strtol_l.constprop.0+0x56>
 8010266:	2c30      	cmp	r4, #48	; 0x30
 8010268:	d0a5      	beq.n	80101b6 <_strtol_l.constprop.0+0x46>
 801026a:	230a      	movs	r3, #10
 801026c:	e7ab      	b.n	80101c6 <_strtol_l.constprop.0+0x56>
 801026e:	bf00      	nop
 8010270:	080158c9 	.word	0x080158c9

08010274 <_strtol_r>:
 8010274:	f7ff bf7c 	b.w	8010170 <_strtol_l.constprop.0>

08010278 <_write_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	4d07      	ldr	r5, [pc, #28]	; (8010298 <_write_r+0x20>)
 801027c:	4604      	mov	r4, r0
 801027e:	4608      	mov	r0, r1
 8010280:	4611      	mov	r1, r2
 8010282:	2200      	movs	r2, #0
 8010284:	602a      	str	r2, [r5, #0]
 8010286:	461a      	mov	r2, r3
 8010288:	f7f1 fc6b 	bl	8001b62 <_write>
 801028c:	1c43      	adds	r3, r0, #1
 801028e:	d102      	bne.n	8010296 <_write_r+0x1e>
 8010290:	682b      	ldr	r3, [r5, #0]
 8010292:	b103      	cbz	r3, 8010296 <_write_r+0x1e>
 8010294:	6023      	str	r3, [r4, #0]
 8010296:	bd38      	pop	{r3, r4, r5, pc}
 8010298:	200063ec 	.word	0x200063ec

0801029c <_close_r>:
 801029c:	b538      	push	{r3, r4, r5, lr}
 801029e:	4d06      	ldr	r5, [pc, #24]	; (80102b8 <_close_r+0x1c>)
 80102a0:	2300      	movs	r3, #0
 80102a2:	4604      	mov	r4, r0
 80102a4:	4608      	mov	r0, r1
 80102a6:	602b      	str	r3, [r5, #0]
 80102a8:	f7f1 fc77 	bl	8001b9a <_close>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	d102      	bne.n	80102b6 <_close_r+0x1a>
 80102b0:	682b      	ldr	r3, [r5, #0]
 80102b2:	b103      	cbz	r3, 80102b6 <_close_r+0x1a>
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	bd38      	pop	{r3, r4, r5, pc}
 80102b8:	200063ec 	.word	0x200063ec

080102bc <quorem>:
 80102bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c0:	6903      	ldr	r3, [r0, #16]
 80102c2:	690c      	ldr	r4, [r1, #16]
 80102c4:	42a3      	cmp	r3, r4
 80102c6:	4607      	mov	r7, r0
 80102c8:	f2c0 8081 	blt.w	80103ce <quorem+0x112>
 80102cc:	3c01      	subs	r4, #1
 80102ce:	f101 0814 	add.w	r8, r1, #20
 80102d2:	f100 0514 	add.w	r5, r0, #20
 80102d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80102e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80102e4:	3301      	adds	r3, #1
 80102e6:	429a      	cmp	r2, r3
 80102e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80102ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80102f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80102f4:	d331      	bcc.n	801035a <quorem+0x9e>
 80102f6:	f04f 0e00 	mov.w	lr, #0
 80102fa:	4640      	mov	r0, r8
 80102fc:	46ac      	mov	ip, r5
 80102fe:	46f2      	mov	sl, lr
 8010300:	f850 2b04 	ldr.w	r2, [r0], #4
 8010304:	b293      	uxth	r3, r2
 8010306:	fb06 e303 	mla	r3, r6, r3, lr
 801030a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801030e:	b29b      	uxth	r3, r3
 8010310:	ebaa 0303 	sub.w	r3, sl, r3
 8010314:	f8dc a000 	ldr.w	sl, [ip]
 8010318:	0c12      	lsrs	r2, r2, #16
 801031a:	fa13 f38a 	uxtah	r3, r3, sl
 801031e:	fb06 e202 	mla	r2, r6, r2, lr
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	9b00      	ldr	r3, [sp, #0]
 8010326:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801032a:	b292      	uxth	r2, r2
 801032c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010334:	f8bd 3000 	ldrh.w	r3, [sp]
 8010338:	4581      	cmp	r9, r0
 801033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801033e:	f84c 3b04 	str.w	r3, [ip], #4
 8010342:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010346:	d2db      	bcs.n	8010300 <quorem+0x44>
 8010348:	f855 300b 	ldr.w	r3, [r5, fp]
 801034c:	b92b      	cbnz	r3, 801035a <quorem+0x9e>
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	3b04      	subs	r3, #4
 8010352:	429d      	cmp	r5, r3
 8010354:	461a      	mov	r2, r3
 8010356:	d32e      	bcc.n	80103b6 <quorem+0xfa>
 8010358:	613c      	str	r4, [r7, #16]
 801035a:	4638      	mov	r0, r7
 801035c:	f001 fd64 	bl	8011e28 <__mcmp>
 8010360:	2800      	cmp	r0, #0
 8010362:	db24      	blt.n	80103ae <quorem+0xf2>
 8010364:	3601      	adds	r6, #1
 8010366:	4628      	mov	r0, r5
 8010368:	f04f 0c00 	mov.w	ip, #0
 801036c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010370:	f8d0 e000 	ldr.w	lr, [r0]
 8010374:	b293      	uxth	r3, r2
 8010376:	ebac 0303 	sub.w	r3, ip, r3
 801037a:	0c12      	lsrs	r2, r2, #16
 801037c:	fa13 f38e 	uxtah	r3, r3, lr
 8010380:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010388:	b29b      	uxth	r3, r3
 801038a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801038e:	45c1      	cmp	r9, r8
 8010390:	f840 3b04 	str.w	r3, [r0], #4
 8010394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010398:	d2e8      	bcs.n	801036c <quorem+0xb0>
 801039a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801039e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103a2:	b922      	cbnz	r2, 80103ae <quorem+0xf2>
 80103a4:	3b04      	subs	r3, #4
 80103a6:	429d      	cmp	r5, r3
 80103a8:	461a      	mov	r2, r3
 80103aa:	d30a      	bcc.n	80103c2 <quorem+0x106>
 80103ac:	613c      	str	r4, [r7, #16]
 80103ae:	4630      	mov	r0, r6
 80103b0:	b003      	add	sp, #12
 80103b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b6:	6812      	ldr	r2, [r2, #0]
 80103b8:	3b04      	subs	r3, #4
 80103ba:	2a00      	cmp	r2, #0
 80103bc:	d1cc      	bne.n	8010358 <quorem+0x9c>
 80103be:	3c01      	subs	r4, #1
 80103c0:	e7c7      	b.n	8010352 <quorem+0x96>
 80103c2:	6812      	ldr	r2, [r2, #0]
 80103c4:	3b04      	subs	r3, #4
 80103c6:	2a00      	cmp	r2, #0
 80103c8:	d1f0      	bne.n	80103ac <quorem+0xf0>
 80103ca:	3c01      	subs	r4, #1
 80103cc:	e7eb      	b.n	80103a6 <quorem+0xea>
 80103ce:	2000      	movs	r0, #0
 80103d0:	e7ee      	b.n	80103b0 <quorem+0xf4>
 80103d2:	0000      	movs	r0, r0
 80103d4:	0000      	movs	r0, r0
	...

080103d8 <_dtoa_r>:
 80103d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103dc:	ed2d 8b04 	vpush	{d8-d9}
 80103e0:	ec57 6b10 	vmov	r6, r7, d0
 80103e4:	b093      	sub	sp, #76	; 0x4c
 80103e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80103e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80103ec:	9106      	str	r1, [sp, #24]
 80103ee:	ee10 aa10 	vmov	sl, s0
 80103f2:	4604      	mov	r4, r0
 80103f4:	9209      	str	r2, [sp, #36]	; 0x24
 80103f6:	930c      	str	r3, [sp, #48]	; 0x30
 80103f8:	46bb      	mov	fp, r7
 80103fa:	b975      	cbnz	r5, 801041a <_dtoa_r+0x42>
 80103fc:	2010      	movs	r0, #16
 80103fe:	f001 fa21 	bl	8011844 <malloc>
 8010402:	4602      	mov	r2, r0
 8010404:	6260      	str	r0, [r4, #36]	; 0x24
 8010406:	b920      	cbnz	r0, 8010412 <_dtoa_r+0x3a>
 8010408:	4ba7      	ldr	r3, [pc, #668]	; (80106a8 <_dtoa_r+0x2d0>)
 801040a:	21ea      	movs	r1, #234	; 0xea
 801040c:	48a7      	ldr	r0, [pc, #668]	; (80106ac <_dtoa_r+0x2d4>)
 801040e:	f002 f8fd 	bl	801260c <__assert_func>
 8010412:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010416:	6005      	str	r5, [r0, #0]
 8010418:	60c5      	str	r5, [r0, #12]
 801041a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801041c:	6819      	ldr	r1, [r3, #0]
 801041e:	b151      	cbz	r1, 8010436 <_dtoa_r+0x5e>
 8010420:	685a      	ldr	r2, [r3, #4]
 8010422:	604a      	str	r2, [r1, #4]
 8010424:	2301      	movs	r3, #1
 8010426:	4093      	lsls	r3, r2
 8010428:	608b      	str	r3, [r1, #8]
 801042a:	4620      	mov	r0, r4
 801042c:	f001 fa70 	bl	8011910 <_Bfree>
 8010430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010432:	2200      	movs	r2, #0
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	1e3b      	subs	r3, r7, #0
 8010438:	bfaa      	itet	ge
 801043a:	2300      	movge	r3, #0
 801043c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010440:	f8c8 3000 	strge.w	r3, [r8]
 8010444:	4b9a      	ldr	r3, [pc, #616]	; (80106b0 <_dtoa_r+0x2d8>)
 8010446:	bfbc      	itt	lt
 8010448:	2201      	movlt	r2, #1
 801044a:	f8c8 2000 	strlt.w	r2, [r8]
 801044e:	ea33 030b 	bics.w	r3, r3, fp
 8010452:	d11b      	bne.n	801048c <_dtoa_r+0xb4>
 8010454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010456:	f242 730f 	movw	r3, #9999	; 0x270f
 801045a:	6013      	str	r3, [r2, #0]
 801045c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010460:	4333      	orrs	r3, r6
 8010462:	f000 8592 	beq.w	8010f8a <_dtoa_r+0xbb2>
 8010466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010468:	b963      	cbnz	r3, 8010484 <_dtoa_r+0xac>
 801046a:	4b92      	ldr	r3, [pc, #584]	; (80106b4 <_dtoa_r+0x2dc>)
 801046c:	e022      	b.n	80104b4 <_dtoa_r+0xdc>
 801046e:	4b92      	ldr	r3, [pc, #584]	; (80106b8 <_dtoa_r+0x2e0>)
 8010470:	9301      	str	r3, [sp, #4]
 8010472:	3308      	adds	r3, #8
 8010474:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010476:	6013      	str	r3, [r2, #0]
 8010478:	9801      	ldr	r0, [sp, #4]
 801047a:	b013      	add	sp, #76	; 0x4c
 801047c:	ecbd 8b04 	vpop	{d8-d9}
 8010480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010484:	4b8b      	ldr	r3, [pc, #556]	; (80106b4 <_dtoa_r+0x2dc>)
 8010486:	9301      	str	r3, [sp, #4]
 8010488:	3303      	adds	r3, #3
 801048a:	e7f3      	b.n	8010474 <_dtoa_r+0x9c>
 801048c:	2200      	movs	r2, #0
 801048e:	2300      	movs	r3, #0
 8010490:	4650      	mov	r0, sl
 8010492:	4659      	mov	r1, fp
 8010494:	f7f0 fb28 	bl	8000ae8 <__aeabi_dcmpeq>
 8010498:	ec4b ab19 	vmov	d9, sl, fp
 801049c:	4680      	mov	r8, r0
 801049e:	b158      	cbz	r0, 80104b8 <_dtoa_r+0xe0>
 80104a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104a2:	2301      	movs	r3, #1
 80104a4:	6013      	str	r3, [r2, #0]
 80104a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f000 856b 	beq.w	8010f84 <_dtoa_r+0xbac>
 80104ae:	4883      	ldr	r0, [pc, #524]	; (80106bc <_dtoa_r+0x2e4>)
 80104b0:	6018      	str	r0, [r3, #0]
 80104b2:	1e43      	subs	r3, r0, #1
 80104b4:	9301      	str	r3, [sp, #4]
 80104b6:	e7df      	b.n	8010478 <_dtoa_r+0xa0>
 80104b8:	ec4b ab10 	vmov	d0, sl, fp
 80104bc:	aa10      	add	r2, sp, #64	; 0x40
 80104be:	a911      	add	r1, sp, #68	; 0x44
 80104c0:	4620      	mov	r0, r4
 80104c2:	f001 fdd3 	bl	801206c <__d2b>
 80104c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80104ca:	ee08 0a10 	vmov	s16, r0
 80104ce:	2d00      	cmp	r5, #0
 80104d0:	f000 8084 	beq.w	80105dc <_dtoa_r+0x204>
 80104d4:	ee19 3a90 	vmov	r3, s19
 80104d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80104e0:	4656      	mov	r6, sl
 80104e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80104e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80104ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80104ee:	4b74      	ldr	r3, [pc, #464]	; (80106c0 <_dtoa_r+0x2e8>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	4630      	mov	r0, r6
 80104f4:	4639      	mov	r1, r7
 80104f6:	f7ef fed7 	bl	80002a8 <__aeabi_dsub>
 80104fa:	a365      	add	r3, pc, #404	; (adr r3, 8010690 <_dtoa_r+0x2b8>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	f7f0 f88a 	bl	8000618 <__aeabi_dmul>
 8010504:	a364      	add	r3, pc, #400	; (adr r3, 8010698 <_dtoa_r+0x2c0>)
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	f7ef fecf 	bl	80002ac <__adddf3>
 801050e:	4606      	mov	r6, r0
 8010510:	4628      	mov	r0, r5
 8010512:	460f      	mov	r7, r1
 8010514:	f7f0 f816 	bl	8000544 <__aeabi_i2d>
 8010518:	a361      	add	r3, pc, #388	; (adr r3, 80106a0 <_dtoa_r+0x2c8>)
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f7f0 f87b 	bl	8000618 <__aeabi_dmul>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4630      	mov	r0, r6
 8010528:	4639      	mov	r1, r7
 801052a:	f7ef febf 	bl	80002ac <__adddf3>
 801052e:	4606      	mov	r6, r0
 8010530:	460f      	mov	r7, r1
 8010532:	f7f0 fb21 	bl	8000b78 <__aeabi_d2iz>
 8010536:	2200      	movs	r2, #0
 8010538:	9000      	str	r0, [sp, #0]
 801053a:	2300      	movs	r3, #0
 801053c:	4630      	mov	r0, r6
 801053e:	4639      	mov	r1, r7
 8010540:	f7f0 fadc 	bl	8000afc <__aeabi_dcmplt>
 8010544:	b150      	cbz	r0, 801055c <_dtoa_r+0x184>
 8010546:	9800      	ldr	r0, [sp, #0]
 8010548:	f7ef fffc 	bl	8000544 <__aeabi_i2d>
 801054c:	4632      	mov	r2, r6
 801054e:	463b      	mov	r3, r7
 8010550:	f7f0 faca 	bl	8000ae8 <__aeabi_dcmpeq>
 8010554:	b910      	cbnz	r0, 801055c <_dtoa_r+0x184>
 8010556:	9b00      	ldr	r3, [sp, #0]
 8010558:	3b01      	subs	r3, #1
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	9b00      	ldr	r3, [sp, #0]
 801055e:	2b16      	cmp	r3, #22
 8010560:	d85a      	bhi.n	8010618 <_dtoa_r+0x240>
 8010562:	9a00      	ldr	r2, [sp, #0]
 8010564:	4b57      	ldr	r3, [pc, #348]	; (80106c4 <_dtoa_r+0x2ec>)
 8010566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056e:	ec51 0b19 	vmov	r0, r1, d9
 8010572:	f7f0 fac3 	bl	8000afc <__aeabi_dcmplt>
 8010576:	2800      	cmp	r0, #0
 8010578:	d050      	beq.n	801061c <_dtoa_r+0x244>
 801057a:	9b00      	ldr	r3, [sp, #0]
 801057c:	3b01      	subs	r3, #1
 801057e:	9300      	str	r3, [sp, #0]
 8010580:	2300      	movs	r3, #0
 8010582:	930b      	str	r3, [sp, #44]	; 0x2c
 8010584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010586:	1b5d      	subs	r5, r3, r5
 8010588:	1e6b      	subs	r3, r5, #1
 801058a:	9305      	str	r3, [sp, #20]
 801058c:	bf45      	ittet	mi
 801058e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010592:	9304      	strmi	r3, [sp, #16]
 8010594:	2300      	movpl	r3, #0
 8010596:	2300      	movmi	r3, #0
 8010598:	bf4c      	ite	mi
 801059a:	9305      	strmi	r3, [sp, #20]
 801059c:	9304      	strpl	r3, [sp, #16]
 801059e:	9b00      	ldr	r3, [sp, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db3d      	blt.n	8010620 <_dtoa_r+0x248>
 80105a4:	9b05      	ldr	r3, [sp, #20]
 80105a6:	9a00      	ldr	r2, [sp, #0]
 80105a8:	920a      	str	r2, [sp, #40]	; 0x28
 80105aa:	4413      	add	r3, r2
 80105ac:	9305      	str	r3, [sp, #20]
 80105ae:	2300      	movs	r3, #0
 80105b0:	9307      	str	r3, [sp, #28]
 80105b2:	9b06      	ldr	r3, [sp, #24]
 80105b4:	2b09      	cmp	r3, #9
 80105b6:	f200 8089 	bhi.w	80106cc <_dtoa_r+0x2f4>
 80105ba:	2b05      	cmp	r3, #5
 80105bc:	bfc4      	itt	gt
 80105be:	3b04      	subgt	r3, #4
 80105c0:	9306      	strgt	r3, [sp, #24]
 80105c2:	9b06      	ldr	r3, [sp, #24]
 80105c4:	f1a3 0302 	sub.w	r3, r3, #2
 80105c8:	bfcc      	ite	gt
 80105ca:	2500      	movgt	r5, #0
 80105cc:	2501      	movle	r5, #1
 80105ce:	2b03      	cmp	r3, #3
 80105d0:	f200 8087 	bhi.w	80106e2 <_dtoa_r+0x30a>
 80105d4:	e8df f003 	tbb	[pc, r3]
 80105d8:	59383a2d 	.word	0x59383a2d
 80105dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80105e0:	441d      	add	r5, r3
 80105e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80105e6:	2b20      	cmp	r3, #32
 80105e8:	bfc1      	itttt	gt
 80105ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80105ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80105f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80105f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80105fa:	bfda      	itte	le
 80105fc:	f1c3 0320 	rsble	r3, r3, #32
 8010600:	fa06 f003 	lslle.w	r0, r6, r3
 8010604:	4318      	orrgt	r0, r3
 8010606:	f7ef ff8d 	bl	8000524 <__aeabi_ui2d>
 801060a:	2301      	movs	r3, #1
 801060c:	4606      	mov	r6, r0
 801060e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010612:	3d01      	subs	r5, #1
 8010614:	930e      	str	r3, [sp, #56]	; 0x38
 8010616:	e76a      	b.n	80104ee <_dtoa_r+0x116>
 8010618:	2301      	movs	r3, #1
 801061a:	e7b2      	b.n	8010582 <_dtoa_r+0x1aa>
 801061c:	900b      	str	r0, [sp, #44]	; 0x2c
 801061e:	e7b1      	b.n	8010584 <_dtoa_r+0x1ac>
 8010620:	9b04      	ldr	r3, [sp, #16]
 8010622:	9a00      	ldr	r2, [sp, #0]
 8010624:	1a9b      	subs	r3, r3, r2
 8010626:	9304      	str	r3, [sp, #16]
 8010628:	4253      	negs	r3, r2
 801062a:	9307      	str	r3, [sp, #28]
 801062c:	2300      	movs	r3, #0
 801062e:	930a      	str	r3, [sp, #40]	; 0x28
 8010630:	e7bf      	b.n	80105b2 <_dtoa_r+0x1da>
 8010632:	2300      	movs	r3, #0
 8010634:	9308      	str	r3, [sp, #32]
 8010636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010638:	2b00      	cmp	r3, #0
 801063a:	dc55      	bgt.n	80106e8 <_dtoa_r+0x310>
 801063c:	2301      	movs	r3, #1
 801063e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010642:	461a      	mov	r2, r3
 8010644:	9209      	str	r2, [sp, #36]	; 0x24
 8010646:	e00c      	b.n	8010662 <_dtoa_r+0x28a>
 8010648:	2301      	movs	r3, #1
 801064a:	e7f3      	b.n	8010634 <_dtoa_r+0x25c>
 801064c:	2300      	movs	r3, #0
 801064e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010650:	9308      	str	r3, [sp, #32]
 8010652:	9b00      	ldr	r3, [sp, #0]
 8010654:	4413      	add	r3, r2
 8010656:	9302      	str	r3, [sp, #8]
 8010658:	3301      	adds	r3, #1
 801065a:	2b01      	cmp	r3, #1
 801065c:	9303      	str	r3, [sp, #12]
 801065e:	bfb8      	it	lt
 8010660:	2301      	movlt	r3, #1
 8010662:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010664:	2200      	movs	r2, #0
 8010666:	6042      	str	r2, [r0, #4]
 8010668:	2204      	movs	r2, #4
 801066a:	f102 0614 	add.w	r6, r2, #20
 801066e:	429e      	cmp	r6, r3
 8010670:	6841      	ldr	r1, [r0, #4]
 8010672:	d93d      	bls.n	80106f0 <_dtoa_r+0x318>
 8010674:	4620      	mov	r0, r4
 8010676:	f001 f90b 	bl	8011890 <_Balloc>
 801067a:	9001      	str	r0, [sp, #4]
 801067c:	2800      	cmp	r0, #0
 801067e:	d13b      	bne.n	80106f8 <_dtoa_r+0x320>
 8010680:	4b11      	ldr	r3, [pc, #68]	; (80106c8 <_dtoa_r+0x2f0>)
 8010682:	4602      	mov	r2, r0
 8010684:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010688:	e6c0      	b.n	801040c <_dtoa_r+0x34>
 801068a:	2301      	movs	r3, #1
 801068c:	e7df      	b.n	801064e <_dtoa_r+0x276>
 801068e:	bf00      	nop
 8010690:	636f4361 	.word	0x636f4361
 8010694:	3fd287a7 	.word	0x3fd287a7
 8010698:	8b60c8b3 	.word	0x8b60c8b3
 801069c:	3fc68a28 	.word	0x3fc68a28
 80106a0:	509f79fb 	.word	0x509f79fb
 80106a4:	3fd34413 	.word	0x3fd34413
 80106a8:	080159d6 	.word	0x080159d6
 80106ac:	080159ed 	.word	0x080159ed
 80106b0:	7ff00000 	.word	0x7ff00000
 80106b4:	080159d2 	.word	0x080159d2
 80106b8:	080159c9 	.word	0x080159c9
 80106bc:	08015849 	.word	0x08015849
 80106c0:	3ff80000 	.word	0x3ff80000
 80106c4:	08015b58 	.word	0x08015b58
 80106c8:	08015a48 	.word	0x08015a48
 80106cc:	2501      	movs	r5, #1
 80106ce:	2300      	movs	r3, #0
 80106d0:	9306      	str	r3, [sp, #24]
 80106d2:	9508      	str	r5, [sp, #32]
 80106d4:	f04f 33ff 	mov.w	r3, #4294967295
 80106d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80106dc:	2200      	movs	r2, #0
 80106de:	2312      	movs	r3, #18
 80106e0:	e7b0      	b.n	8010644 <_dtoa_r+0x26c>
 80106e2:	2301      	movs	r3, #1
 80106e4:	9308      	str	r3, [sp, #32]
 80106e6:	e7f5      	b.n	80106d4 <_dtoa_r+0x2fc>
 80106e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80106ee:	e7b8      	b.n	8010662 <_dtoa_r+0x28a>
 80106f0:	3101      	adds	r1, #1
 80106f2:	6041      	str	r1, [r0, #4]
 80106f4:	0052      	lsls	r2, r2, #1
 80106f6:	e7b8      	b.n	801066a <_dtoa_r+0x292>
 80106f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106fa:	9a01      	ldr	r2, [sp, #4]
 80106fc:	601a      	str	r2, [r3, #0]
 80106fe:	9b03      	ldr	r3, [sp, #12]
 8010700:	2b0e      	cmp	r3, #14
 8010702:	f200 809d 	bhi.w	8010840 <_dtoa_r+0x468>
 8010706:	2d00      	cmp	r5, #0
 8010708:	f000 809a 	beq.w	8010840 <_dtoa_r+0x468>
 801070c:	9b00      	ldr	r3, [sp, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	dd32      	ble.n	8010778 <_dtoa_r+0x3a0>
 8010712:	4ab7      	ldr	r2, [pc, #732]	; (80109f0 <_dtoa_r+0x618>)
 8010714:	f003 030f 	and.w	r3, r3, #15
 8010718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801071c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010720:	9b00      	ldr	r3, [sp, #0]
 8010722:	05d8      	lsls	r0, r3, #23
 8010724:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010728:	d516      	bpl.n	8010758 <_dtoa_r+0x380>
 801072a:	4bb2      	ldr	r3, [pc, #712]	; (80109f4 <_dtoa_r+0x61c>)
 801072c:	ec51 0b19 	vmov	r0, r1, d9
 8010730:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010734:	f7f0 f89a 	bl	800086c <__aeabi_ddiv>
 8010738:	f007 070f 	and.w	r7, r7, #15
 801073c:	4682      	mov	sl, r0
 801073e:	468b      	mov	fp, r1
 8010740:	2503      	movs	r5, #3
 8010742:	4eac      	ldr	r6, [pc, #688]	; (80109f4 <_dtoa_r+0x61c>)
 8010744:	b957      	cbnz	r7, 801075c <_dtoa_r+0x384>
 8010746:	4642      	mov	r2, r8
 8010748:	464b      	mov	r3, r9
 801074a:	4650      	mov	r0, sl
 801074c:	4659      	mov	r1, fp
 801074e:	f7f0 f88d 	bl	800086c <__aeabi_ddiv>
 8010752:	4682      	mov	sl, r0
 8010754:	468b      	mov	fp, r1
 8010756:	e028      	b.n	80107aa <_dtoa_r+0x3d2>
 8010758:	2502      	movs	r5, #2
 801075a:	e7f2      	b.n	8010742 <_dtoa_r+0x36a>
 801075c:	07f9      	lsls	r1, r7, #31
 801075e:	d508      	bpl.n	8010772 <_dtoa_r+0x39a>
 8010760:	4640      	mov	r0, r8
 8010762:	4649      	mov	r1, r9
 8010764:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010768:	f7ef ff56 	bl	8000618 <__aeabi_dmul>
 801076c:	3501      	adds	r5, #1
 801076e:	4680      	mov	r8, r0
 8010770:	4689      	mov	r9, r1
 8010772:	107f      	asrs	r7, r7, #1
 8010774:	3608      	adds	r6, #8
 8010776:	e7e5      	b.n	8010744 <_dtoa_r+0x36c>
 8010778:	f000 809b 	beq.w	80108b2 <_dtoa_r+0x4da>
 801077c:	9b00      	ldr	r3, [sp, #0]
 801077e:	4f9d      	ldr	r7, [pc, #628]	; (80109f4 <_dtoa_r+0x61c>)
 8010780:	425e      	negs	r6, r3
 8010782:	4b9b      	ldr	r3, [pc, #620]	; (80109f0 <_dtoa_r+0x618>)
 8010784:	f006 020f 	and.w	r2, r6, #15
 8010788:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010790:	ec51 0b19 	vmov	r0, r1, d9
 8010794:	f7ef ff40 	bl	8000618 <__aeabi_dmul>
 8010798:	1136      	asrs	r6, r6, #4
 801079a:	4682      	mov	sl, r0
 801079c:	468b      	mov	fp, r1
 801079e:	2300      	movs	r3, #0
 80107a0:	2502      	movs	r5, #2
 80107a2:	2e00      	cmp	r6, #0
 80107a4:	d17a      	bne.n	801089c <_dtoa_r+0x4c4>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d1d3      	bne.n	8010752 <_dtoa_r+0x37a>
 80107aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f000 8082 	beq.w	80108b6 <_dtoa_r+0x4de>
 80107b2:	4b91      	ldr	r3, [pc, #580]	; (80109f8 <_dtoa_r+0x620>)
 80107b4:	2200      	movs	r2, #0
 80107b6:	4650      	mov	r0, sl
 80107b8:	4659      	mov	r1, fp
 80107ba:	f7f0 f99f 	bl	8000afc <__aeabi_dcmplt>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d079      	beq.n	80108b6 <_dtoa_r+0x4de>
 80107c2:	9b03      	ldr	r3, [sp, #12]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d076      	beq.n	80108b6 <_dtoa_r+0x4de>
 80107c8:	9b02      	ldr	r3, [sp, #8]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	dd36      	ble.n	801083c <_dtoa_r+0x464>
 80107ce:	9b00      	ldr	r3, [sp, #0]
 80107d0:	4650      	mov	r0, sl
 80107d2:	4659      	mov	r1, fp
 80107d4:	1e5f      	subs	r7, r3, #1
 80107d6:	2200      	movs	r2, #0
 80107d8:	4b88      	ldr	r3, [pc, #544]	; (80109fc <_dtoa_r+0x624>)
 80107da:	f7ef ff1d 	bl	8000618 <__aeabi_dmul>
 80107de:	9e02      	ldr	r6, [sp, #8]
 80107e0:	4682      	mov	sl, r0
 80107e2:	468b      	mov	fp, r1
 80107e4:	3501      	adds	r5, #1
 80107e6:	4628      	mov	r0, r5
 80107e8:	f7ef feac 	bl	8000544 <__aeabi_i2d>
 80107ec:	4652      	mov	r2, sl
 80107ee:	465b      	mov	r3, fp
 80107f0:	f7ef ff12 	bl	8000618 <__aeabi_dmul>
 80107f4:	4b82      	ldr	r3, [pc, #520]	; (8010a00 <_dtoa_r+0x628>)
 80107f6:	2200      	movs	r2, #0
 80107f8:	f7ef fd58 	bl	80002ac <__adddf3>
 80107fc:	46d0      	mov	r8, sl
 80107fe:	46d9      	mov	r9, fp
 8010800:	4682      	mov	sl, r0
 8010802:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010806:	2e00      	cmp	r6, #0
 8010808:	d158      	bne.n	80108bc <_dtoa_r+0x4e4>
 801080a:	4b7e      	ldr	r3, [pc, #504]	; (8010a04 <_dtoa_r+0x62c>)
 801080c:	2200      	movs	r2, #0
 801080e:	4640      	mov	r0, r8
 8010810:	4649      	mov	r1, r9
 8010812:	f7ef fd49 	bl	80002a8 <__aeabi_dsub>
 8010816:	4652      	mov	r2, sl
 8010818:	465b      	mov	r3, fp
 801081a:	4680      	mov	r8, r0
 801081c:	4689      	mov	r9, r1
 801081e:	f7f0 f98b 	bl	8000b38 <__aeabi_dcmpgt>
 8010822:	2800      	cmp	r0, #0
 8010824:	f040 8295 	bne.w	8010d52 <_dtoa_r+0x97a>
 8010828:	4652      	mov	r2, sl
 801082a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801082e:	4640      	mov	r0, r8
 8010830:	4649      	mov	r1, r9
 8010832:	f7f0 f963 	bl	8000afc <__aeabi_dcmplt>
 8010836:	2800      	cmp	r0, #0
 8010838:	f040 8289 	bne.w	8010d4e <_dtoa_r+0x976>
 801083c:	ec5b ab19 	vmov	sl, fp, d9
 8010840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010842:	2b00      	cmp	r3, #0
 8010844:	f2c0 8148 	blt.w	8010ad8 <_dtoa_r+0x700>
 8010848:	9a00      	ldr	r2, [sp, #0]
 801084a:	2a0e      	cmp	r2, #14
 801084c:	f300 8144 	bgt.w	8010ad8 <_dtoa_r+0x700>
 8010850:	4b67      	ldr	r3, [pc, #412]	; (80109f0 <_dtoa_r+0x618>)
 8010852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010856:	e9d3 8900 	ldrd	r8, r9, [r3]
 801085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	f280 80d5 	bge.w	8010a0c <_dtoa_r+0x634>
 8010862:	9b03      	ldr	r3, [sp, #12]
 8010864:	2b00      	cmp	r3, #0
 8010866:	f300 80d1 	bgt.w	8010a0c <_dtoa_r+0x634>
 801086a:	f040 826f 	bne.w	8010d4c <_dtoa_r+0x974>
 801086e:	4b65      	ldr	r3, [pc, #404]	; (8010a04 <_dtoa_r+0x62c>)
 8010870:	2200      	movs	r2, #0
 8010872:	4640      	mov	r0, r8
 8010874:	4649      	mov	r1, r9
 8010876:	f7ef fecf 	bl	8000618 <__aeabi_dmul>
 801087a:	4652      	mov	r2, sl
 801087c:	465b      	mov	r3, fp
 801087e:	f7f0 f951 	bl	8000b24 <__aeabi_dcmpge>
 8010882:	9e03      	ldr	r6, [sp, #12]
 8010884:	4637      	mov	r7, r6
 8010886:	2800      	cmp	r0, #0
 8010888:	f040 8245 	bne.w	8010d16 <_dtoa_r+0x93e>
 801088c:	9d01      	ldr	r5, [sp, #4]
 801088e:	2331      	movs	r3, #49	; 0x31
 8010890:	f805 3b01 	strb.w	r3, [r5], #1
 8010894:	9b00      	ldr	r3, [sp, #0]
 8010896:	3301      	adds	r3, #1
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	e240      	b.n	8010d1e <_dtoa_r+0x946>
 801089c:	07f2      	lsls	r2, r6, #31
 801089e:	d505      	bpl.n	80108ac <_dtoa_r+0x4d4>
 80108a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108a4:	f7ef feb8 	bl	8000618 <__aeabi_dmul>
 80108a8:	3501      	adds	r5, #1
 80108aa:	2301      	movs	r3, #1
 80108ac:	1076      	asrs	r6, r6, #1
 80108ae:	3708      	adds	r7, #8
 80108b0:	e777      	b.n	80107a2 <_dtoa_r+0x3ca>
 80108b2:	2502      	movs	r5, #2
 80108b4:	e779      	b.n	80107aa <_dtoa_r+0x3d2>
 80108b6:	9f00      	ldr	r7, [sp, #0]
 80108b8:	9e03      	ldr	r6, [sp, #12]
 80108ba:	e794      	b.n	80107e6 <_dtoa_r+0x40e>
 80108bc:	9901      	ldr	r1, [sp, #4]
 80108be:	4b4c      	ldr	r3, [pc, #304]	; (80109f0 <_dtoa_r+0x618>)
 80108c0:	4431      	add	r1, r6
 80108c2:	910d      	str	r1, [sp, #52]	; 0x34
 80108c4:	9908      	ldr	r1, [sp, #32]
 80108c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80108ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80108ce:	2900      	cmp	r1, #0
 80108d0:	d043      	beq.n	801095a <_dtoa_r+0x582>
 80108d2:	494d      	ldr	r1, [pc, #308]	; (8010a08 <_dtoa_r+0x630>)
 80108d4:	2000      	movs	r0, #0
 80108d6:	f7ef ffc9 	bl	800086c <__aeabi_ddiv>
 80108da:	4652      	mov	r2, sl
 80108dc:	465b      	mov	r3, fp
 80108de:	f7ef fce3 	bl	80002a8 <__aeabi_dsub>
 80108e2:	9d01      	ldr	r5, [sp, #4]
 80108e4:	4682      	mov	sl, r0
 80108e6:	468b      	mov	fp, r1
 80108e8:	4649      	mov	r1, r9
 80108ea:	4640      	mov	r0, r8
 80108ec:	f7f0 f944 	bl	8000b78 <__aeabi_d2iz>
 80108f0:	4606      	mov	r6, r0
 80108f2:	f7ef fe27 	bl	8000544 <__aeabi_i2d>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	4640      	mov	r0, r8
 80108fc:	4649      	mov	r1, r9
 80108fe:	f7ef fcd3 	bl	80002a8 <__aeabi_dsub>
 8010902:	3630      	adds	r6, #48	; 0x30
 8010904:	f805 6b01 	strb.w	r6, [r5], #1
 8010908:	4652      	mov	r2, sl
 801090a:	465b      	mov	r3, fp
 801090c:	4680      	mov	r8, r0
 801090e:	4689      	mov	r9, r1
 8010910:	f7f0 f8f4 	bl	8000afc <__aeabi_dcmplt>
 8010914:	2800      	cmp	r0, #0
 8010916:	d163      	bne.n	80109e0 <_dtoa_r+0x608>
 8010918:	4642      	mov	r2, r8
 801091a:	464b      	mov	r3, r9
 801091c:	4936      	ldr	r1, [pc, #216]	; (80109f8 <_dtoa_r+0x620>)
 801091e:	2000      	movs	r0, #0
 8010920:	f7ef fcc2 	bl	80002a8 <__aeabi_dsub>
 8010924:	4652      	mov	r2, sl
 8010926:	465b      	mov	r3, fp
 8010928:	f7f0 f8e8 	bl	8000afc <__aeabi_dcmplt>
 801092c:	2800      	cmp	r0, #0
 801092e:	f040 80b5 	bne.w	8010a9c <_dtoa_r+0x6c4>
 8010932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010934:	429d      	cmp	r5, r3
 8010936:	d081      	beq.n	801083c <_dtoa_r+0x464>
 8010938:	4b30      	ldr	r3, [pc, #192]	; (80109fc <_dtoa_r+0x624>)
 801093a:	2200      	movs	r2, #0
 801093c:	4650      	mov	r0, sl
 801093e:	4659      	mov	r1, fp
 8010940:	f7ef fe6a 	bl	8000618 <__aeabi_dmul>
 8010944:	4b2d      	ldr	r3, [pc, #180]	; (80109fc <_dtoa_r+0x624>)
 8010946:	4682      	mov	sl, r0
 8010948:	468b      	mov	fp, r1
 801094a:	4640      	mov	r0, r8
 801094c:	4649      	mov	r1, r9
 801094e:	2200      	movs	r2, #0
 8010950:	f7ef fe62 	bl	8000618 <__aeabi_dmul>
 8010954:	4680      	mov	r8, r0
 8010956:	4689      	mov	r9, r1
 8010958:	e7c6      	b.n	80108e8 <_dtoa_r+0x510>
 801095a:	4650      	mov	r0, sl
 801095c:	4659      	mov	r1, fp
 801095e:	f7ef fe5b 	bl	8000618 <__aeabi_dmul>
 8010962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010964:	9d01      	ldr	r5, [sp, #4]
 8010966:	930f      	str	r3, [sp, #60]	; 0x3c
 8010968:	4682      	mov	sl, r0
 801096a:	468b      	mov	fp, r1
 801096c:	4649      	mov	r1, r9
 801096e:	4640      	mov	r0, r8
 8010970:	f7f0 f902 	bl	8000b78 <__aeabi_d2iz>
 8010974:	4606      	mov	r6, r0
 8010976:	f7ef fde5 	bl	8000544 <__aeabi_i2d>
 801097a:	3630      	adds	r6, #48	; 0x30
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	4640      	mov	r0, r8
 8010982:	4649      	mov	r1, r9
 8010984:	f7ef fc90 	bl	80002a8 <__aeabi_dsub>
 8010988:	f805 6b01 	strb.w	r6, [r5], #1
 801098c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801098e:	429d      	cmp	r5, r3
 8010990:	4680      	mov	r8, r0
 8010992:	4689      	mov	r9, r1
 8010994:	f04f 0200 	mov.w	r2, #0
 8010998:	d124      	bne.n	80109e4 <_dtoa_r+0x60c>
 801099a:	4b1b      	ldr	r3, [pc, #108]	; (8010a08 <_dtoa_r+0x630>)
 801099c:	4650      	mov	r0, sl
 801099e:	4659      	mov	r1, fp
 80109a0:	f7ef fc84 	bl	80002ac <__adddf3>
 80109a4:	4602      	mov	r2, r0
 80109a6:	460b      	mov	r3, r1
 80109a8:	4640      	mov	r0, r8
 80109aa:	4649      	mov	r1, r9
 80109ac:	f7f0 f8c4 	bl	8000b38 <__aeabi_dcmpgt>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d173      	bne.n	8010a9c <_dtoa_r+0x6c4>
 80109b4:	4652      	mov	r2, sl
 80109b6:	465b      	mov	r3, fp
 80109b8:	4913      	ldr	r1, [pc, #76]	; (8010a08 <_dtoa_r+0x630>)
 80109ba:	2000      	movs	r0, #0
 80109bc:	f7ef fc74 	bl	80002a8 <__aeabi_dsub>
 80109c0:	4602      	mov	r2, r0
 80109c2:	460b      	mov	r3, r1
 80109c4:	4640      	mov	r0, r8
 80109c6:	4649      	mov	r1, r9
 80109c8:	f7f0 f898 	bl	8000afc <__aeabi_dcmplt>
 80109cc:	2800      	cmp	r0, #0
 80109ce:	f43f af35 	beq.w	801083c <_dtoa_r+0x464>
 80109d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80109d4:	1e6b      	subs	r3, r5, #1
 80109d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80109d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80109dc:	2b30      	cmp	r3, #48	; 0x30
 80109de:	d0f8      	beq.n	80109d2 <_dtoa_r+0x5fa>
 80109e0:	9700      	str	r7, [sp, #0]
 80109e2:	e049      	b.n	8010a78 <_dtoa_r+0x6a0>
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <_dtoa_r+0x624>)
 80109e6:	f7ef fe17 	bl	8000618 <__aeabi_dmul>
 80109ea:	4680      	mov	r8, r0
 80109ec:	4689      	mov	r9, r1
 80109ee:	e7bd      	b.n	801096c <_dtoa_r+0x594>
 80109f0:	08015b58 	.word	0x08015b58
 80109f4:	08015b30 	.word	0x08015b30
 80109f8:	3ff00000 	.word	0x3ff00000
 80109fc:	40240000 	.word	0x40240000
 8010a00:	401c0000 	.word	0x401c0000
 8010a04:	40140000 	.word	0x40140000
 8010a08:	3fe00000 	.word	0x3fe00000
 8010a0c:	9d01      	ldr	r5, [sp, #4]
 8010a0e:	4656      	mov	r6, sl
 8010a10:	465f      	mov	r7, fp
 8010a12:	4642      	mov	r2, r8
 8010a14:	464b      	mov	r3, r9
 8010a16:	4630      	mov	r0, r6
 8010a18:	4639      	mov	r1, r7
 8010a1a:	f7ef ff27 	bl	800086c <__aeabi_ddiv>
 8010a1e:	f7f0 f8ab 	bl	8000b78 <__aeabi_d2iz>
 8010a22:	4682      	mov	sl, r0
 8010a24:	f7ef fd8e 	bl	8000544 <__aeabi_i2d>
 8010a28:	4642      	mov	r2, r8
 8010a2a:	464b      	mov	r3, r9
 8010a2c:	f7ef fdf4 	bl	8000618 <__aeabi_dmul>
 8010a30:	4602      	mov	r2, r0
 8010a32:	460b      	mov	r3, r1
 8010a34:	4630      	mov	r0, r6
 8010a36:	4639      	mov	r1, r7
 8010a38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010a3c:	f7ef fc34 	bl	80002a8 <__aeabi_dsub>
 8010a40:	f805 6b01 	strb.w	r6, [r5], #1
 8010a44:	9e01      	ldr	r6, [sp, #4]
 8010a46:	9f03      	ldr	r7, [sp, #12]
 8010a48:	1bae      	subs	r6, r5, r6
 8010a4a:	42b7      	cmp	r7, r6
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	460b      	mov	r3, r1
 8010a50:	d135      	bne.n	8010abe <_dtoa_r+0x6e6>
 8010a52:	f7ef fc2b 	bl	80002ac <__adddf3>
 8010a56:	4642      	mov	r2, r8
 8010a58:	464b      	mov	r3, r9
 8010a5a:	4606      	mov	r6, r0
 8010a5c:	460f      	mov	r7, r1
 8010a5e:	f7f0 f86b 	bl	8000b38 <__aeabi_dcmpgt>
 8010a62:	b9d0      	cbnz	r0, 8010a9a <_dtoa_r+0x6c2>
 8010a64:	4642      	mov	r2, r8
 8010a66:	464b      	mov	r3, r9
 8010a68:	4630      	mov	r0, r6
 8010a6a:	4639      	mov	r1, r7
 8010a6c:	f7f0 f83c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a70:	b110      	cbz	r0, 8010a78 <_dtoa_r+0x6a0>
 8010a72:	f01a 0f01 	tst.w	sl, #1
 8010a76:	d110      	bne.n	8010a9a <_dtoa_r+0x6c2>
 8010a78:	4620      	mov	r0, r4
 8010a7a:	ee18 1a10 	vmov	r1, s16
 8010a7e:	f000 ff47 	bl	8011910 <_Bfree>
 8010a82:	2300      	movs	r3, #0
 8010a84:	9800      	ldr	r0, [sp, #0]
 8010a86:	702b      	strb	r3, [r5, #0]
 8010a88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a8a:	3001      	adds	r0, #1
 8010a8c:	6018      	str	r0, [r3, #0]
 8010a8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	f43f acf1 	beq.w	8010478 <_dtoa_r+0xa0>
 8010a96:	601d      	str	r5, [r3, #0]
 8010a98:	e4ee      	b.n	8010478 <_dtoa_r+0xa0>
 8010a9a:	9f00      	ldr	r7, [sp, #0]
 8010a9c:	462b      	mov	r3, r5
 8010a9e:	461d      	mov	r5, r3
 8010aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010aa4:	2a39      	cmp	r2, #57	; 0x39
 8010aa6:	d106      	bne.n	8010ab6 <_dtoa_r+0x6de>
 8010aa8:	9a01      	ldr	r2, [sp, #4]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d1f7      	bne.n	8010a9e <_dtoa_r+0x6c6>
 8010aae:	9901      	ldr	r1, [sp, #4]
 8010ab0:	2230      	movs	r2, #48	; 0x30
 8010ab2:	3701      	adds	r7, #1
 8010ab4:	700a      	strb	r2, [r1, #0]
 8010ab6:	781a      	ldrb	r2, [r3, #0]
 8010ab8:	3201      	adds	r2, #1
 8010aba:	701a      	strb	r2, [r3, #0]
 8010abc:	e790      	b.n	80109e0 <_dtoa_r+0x608>
 8010abe:	4ba6      	ldr	r3, [pc, #664]	; (8010d58 <_dtoa_r+0x980>)
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	f7ef fda9 	bl	8000618 <__aeabi_dmul>
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	2300      	movs	r3, #0
 8010aca:	4606      	mov	r6, r0
 8010acc:	460f      	mov	r7, r1
 8010ace:	f7f0 f80b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	d09d      	beq.n	8010a12 <_dtoa_r+0x63a>
 8010ad6:	e7cf      	b.n	8010a78 <_dtoa_r+0x6a0>
 8010ad8:	9a08      	ldr	r2, [sp, #32]
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	f000 80d7 	beq.w	8010c8e <_dtoa_r+0x8b6>
 8010ae0:	9a06      	ldr	r2, [sp, #24]
 8010ae2:	2a01      	cmp	r2, #1
 8010ae4:	f300 80ba 	bgt.w	8010c5c <_dtoa_r+0x884>
 8010ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010aea:	2a00      	cmp	r2, #0
 8010aec:	f000 80b2 	beq.w	8010c54 <_dtoa_r+0x87c>
 8010af0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010af4:	9e07      	ldr	r6, [sp, #28]
 8010af6:	9d04      	ldr	r5, [sp, #16]
 8010af8:	9a04      	ldr	r2, [sp, #16]
 8010afa:	441a      	add	r2, r3
 8010afc:	9204      	str	r2, [sp, #16]
 8010afe:	9a05      	ldr	r2, [sp, #20]
 8010b00:	2101      	movs	r1, #1
 8010b02:	441a      	add	r2, r3
 8010b04:	4620      	mov	r0, r4
 8010b06:	9205      	str	r2, [sp, #20]
 8010b08:	f001 f804 	bl	8011b14 <__i2b>
 8010b0c:	4607      	mov	r7, r0
 8010b0e:	2d00      	cmp	r5, #0
 8010b10:	dd0c      	ble.n	8010b2c <_dtoa_r+0x754>
 8010b12:	9b05      	ldr	r3, [sp, #20]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	dd09      	ble.n	8010b2c <_dtoa_r+0x754>
 8010b18:	42ab      	cmp	r3, r5
 8010b1a:	9a04      	ldr	r2, [sp, #16]
 8010b1c:	bfa8      	it	ge
 8010b1e:	462b      	movge	r3, r5
 8010b20:	1ad2      	subs	r2, r2, r3
 8010b22:	9204      	str	r2, [sp, #16]
 8010b24:	9a05      	ldr	r2, [sp, #20]
 8010b26:	1aed      	subs	r5, r5, r3
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	9305      	str	r3, [sp, #20]
 8010b2c:	9b07      	ldr	r3, [sp, #28]
 8010b2e:	b31b      	cbz	r3, 8010b78 <_dtoa_r+0x7a0>
 8010b30:	9b08      	ldr	r3, [sp, #32]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	f000 80af 	beq.w	8010c96 <_dtoa_r+0x8be>
 8010b38:	2e00      	cmp	r6, #0
 8010b3a:	dd13      	ble.n	8010b64 <_dtoa_r+0x78c>
 8010b3c:	4639      	mov	r1, r7
 8010b3e:	4632      	mov	r2, r6
 8010b40:	4620      	mov	r0, r4
 8010b42:	f001 f8a7 	bl	8011c94 <__pow5mult>
 8010b46:	ee18 2a10 	vmov	r2, s16
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	4607      	mov	r7, r0
 8010b4e:	4620      	mov	r0, r4
 8010b50:	f000 fff6 	bl	8011b40 <__multiply>
 8010b54:	ee18 1a10 	vmov	r1, s16
 8010b58:	4680      	mov	r8, r0
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	f000 fed8 	bl	8011910 <_Bfree>
 8010b60:	ee08 8a10 	vmov	s16, r8
 8010b64:	9b07      	ldr	r3, [sp, #28]
 8010b66:	1b9a      	subs	r2, r3, r6
 8010b68:	d006      	beq.n	8010b78 <_dtoa_r+0x7a0>
 8010b6a:	ee18 1a10 	vmov	r1, s16
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f001 f890 	bl	8011c94 <__pow5mult>
 8010b74:	ee08 0a10 	vmov	s16, r0
 8010b78:	2101      	movs	r1, #1
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 ffca 	bl	8011b14 <__i2b>
 8010b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	4606      	mov	r6, r0
 8010b86:	f340 8088 	ble.w	8010c9a <_dtoa_r+0x8c2>
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	4601      	mov	r1, r0
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f001 f880 	bl	8011c94 <__pow5mult>
 8010b94:	9b06      	ldr	r3, [sp, #24]
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	4606      	mov	r6, r0
 8010b9a:	f340 8081 	ble.w	8010ca0 <_dtoa_r+0x8c8>
 8010b9e:	f04f 0800 	mov.w	r8, #0
 8010ba2:	6933      	ldr	r3, [r6, #16]
 8010ba4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ba8:	6918      	ldr	r0, [r3, #16]
 8010baa:	f000 ff63 	bl	8011a74 <__hi0bits>
 8010bae:	f1c0 0020 	rsb	r0, r0, #32
 8010bb2:	9b05      	ldr	r3, [sp, #20]
 8010bb4:	4418      	add	r0, r3
 8010bb6:	f010 001f 	ands.w	r0, r0, #31
 8010bba:	f000 8092 	beq.w	8010ce2 <_dtoa_r+0x90a>
 8010bbe:	f1c0 0320 	rsb	r3, r0, #32
 8010bc2:	2b04      	cmp	r3, #4
 8010bc4:	f340 808a 	ble.w	8010cdc <_dtoa_r+0x904>
 8010bc8:	f1c0 001c 	rsb	r0, r0, #28
 8010bcc:	9b04      	ldr	r3, [sp, #16]
 8010bce:	4403      	add	r3, r0
 8010bd0:	9304      	str	r3, [sp, #16]
 8010bd2:	9b05      	ldr	r3, [sp, #20]
 8010bd4:	4403      	add	r3, r0
 8010bd6:	4405      	add	r5, r0
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	9b04      	ldr	r3, [sp, #16]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	dd07      	ble.n	8010bf0 <_dtoa_r+0x818>
 8010be0:	ee18 1a10 	vmov	r1, s16
 8010be4:	461a      	mov	r2, r3
 8010be6:	4620      	mov	r0, r4
 8010be8:	f001 f8ae 	bl	8011d48 <__lshift>
 8010bec:	ee08 0a10 	vmov	s16, r0
 8010bf0:	9b05      	ldr	r3, [sp, #20]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	dd05      	ble.n	8010c02 <_dtoa_r+0x82a>
 8010bf6:	4631      	mov	r1, r6
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f001 f8a4 	bl	8011d48 <__lshift>
 8010c00:	4606      	mov	r6, r0
 8010c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d06e      	beq.n	8010ce6 <_dtoa_r+0x90e>
 8010c08:	ee18 0a10 	vmov	r0, s16
 8010c0c:	4631      	mov	r1, r6
 8010c0e:	f001 f90b 	bl	8011e28 <__mcmp>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	da67      	bge.n	8010ce6 <_dtoa_r+0x90e>
 8010c16:	9b00      	ldr	r3, [sp, #0]
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	ee18 1a10 	vmov	r1, s16
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	220a      	movs	r2, #10
 8010c22:	2300      	movs	r3, #0
 8010c24:	4620      	mov	r0, r4
 8010c26:	f000 fe95 	bl	8011954 <__multadd>
 8010c2a:	9b08      	ldr	r3, [sp, #32]
 8010c2c:	ee08 0a10 	vmov	s16, r0
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f000 81b1 	beq.w	8010f98 <_dtoa_r+0xbc0>
 8010c36:	2300      	movs	r3, #0
 8010c38:	4639      	mov	r1, r7
 8010c3a:	220a      	movs	r2, #10
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f000 fe89 	bl	8011954 <__multadd>
 8010c42:	9b02      	ldr	r3, [sp, #8]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	4607      	mov	r7, r0
 8010c48:	f300 808e 	bgt.w	8010d68 <_dtoa_r+0x990>
 8010c4c:	9b06      	ldr	r3, [sp, #24]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	dc51      	bgt.n	8010cf6 <_dtoa_r+0x91e>
 8010c52:	e089      	b.n	8010d68 <_dtoa_r+0x990>
 8010c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010c5a:	e74b      	b.n	8010af4 <_dtoa_r+0x71c>
 8010c5c:	9b03      	ldr	r3, [sp, #12]
 8010c5e:	1e5e      	subs	r6, r3, #1
 8010c60:	9b07      	ldr	r3, [sp, #28]
 8010c62:	42b3      	cmp	r3, r6
 8010c64:	bfbf      	itttt	lt
 8010c66:	9b07      	ldrlt	r3, [sp, #28]
 8010c68:	9607      	strlt	r6, [sp, #28]
 8010c6a:	1af2      	sublt	r2, r6, r3
 8010c6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010c6e:	bfb6      	itet	lt
 8010c70:	189b      	addlt	r3, r3, r2
 8010c72:	1b9e      	subge	r6, r3, r6
 8010c74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	bfb8      	it	lt
 8010c7a:	2600      	movlt	r6, #0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	bfb7      	itett	lt
 8010c80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010c84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010c88:	1a9d      	sublt	r5, r3, r2
 8010c8a:	2300      	movlt	r3, #0
 8010c8c:	e734      	b.n	8010af8 <_dtoa_r+0x720>
 8010c8e:	9e07      	ldr	r6, [sp, #28]
 8010c90:	9d04      	ldr	r5, [sp, #16]
 8010c92:	9f08      	ldr	r7, [sp, #32]
 8010c94:	e73b      	b.n	8010b0e <_dtoa_r+0x736>
 8010c96:	9a07      	ldr	r2, [sp, #28]
 8010c98:	e767      	b.n	8010b6a <_dtoa_r+0x792>
 8010c9a:	9b06      	ldr	r3, [sp, #24]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	dc18      	bgt.n	8010cd2 <_dtoa_r+0x8fa>
 8010ca0:	f1ba 0f00 	cmp.w	sl, #0
 8010ca4:	d115      	bne.n	8010cd2 <_dtoa_r+0x8fa>
 8010ca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010caa:	b993      	cbnz	r3, 8010cd2 <_dtoa_r+0x8fa>
 8010cac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cb0:	0d1b      	lsrs	r3, r3, #20
 8010cb2:	051b      	lsls	r3, r3, #20
 8010cb4:	b183      	cbz	r3, 8010cd8 <_dtoa_r+0x900>
 8010cb6:	9b04      	ldr	r3, [sp, #16]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	9304      	str	r3, [sp, #16]
 8010cbc:	9b05      	ldr	r3, [sp, #20]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	9305      	str	r3, [sp, #20]
 8010cc2:	f04f 0801 	mov.w	r8, #1
 8010cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f47f af6a 	bne.w	8010ba2 <_dtoa_r+0x7ca>
 8010cce:	2001      	movs	r0, #1
 8010cd0:	e76f      	b.n	8010bb2 <_dtoa_r+0x7da>
 8010cd2:	f04f 0800 	mov.w	r8, #0
 8010cd6:	e7f6      	b.n	8010cc6 <_dtoa_r+0x8ee>
 8010cd8:	4698      	mov	r8, r3
 8010cda:	e7f4      	b.n	8010cc6 <_dtoa_r+0x8ee>
 8010cdc:	f43f af7d 	beq.w	8010bda <_dtoa_r+0x802>
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	301c      	adds	r0, #28
 8010ce4:	e772      	b.n	8010bcc <_dtoa_r+0x7f4>
 8010ce6:	9b03      	ldr	r3, [sp, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	dc37      	bgt.n	8010d5c <_dtoa_r+0x984>
 8010cec:	9b06      	ldr	r3, [sp, #24]
 8010cee:	2b02      	cmp	r3, #2
 8010cf0:	dd34      	ble.n	8010d5c <_dtoa_r+0x984>
 8010cf2:	9b03      	ldr	r3, [sp, #12]
 8010cf4:	9302      	str	r3, [sp, #8]
 8010cf6:	9b02      	ldr	r3, [sp, #8]
 8010cf8:	b96b      	cbnz	r3, 8010d16 <_dtoa_r+0x93e>
 8010cfa:	4631      	mov	r1, r6
 8010cfc:	2205      	movs	r2, #5
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f000 fe28 	bl	8011954 <__multadd>
 8010d04:	4601      	mov	r1, r0
 8010d06:	4606      	mov	r6, r0
 8010d08:	ee18 0a10 	vmov	r0, s16
 8010d0c:	f001 f88c 	bl	8011e28 <__mcmp>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	f73f adbb 	bgt.w	801088c <_dtoa_r+0x4b4>
 8010d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d18:	9d01      	ldr	r5, [sp, #4]
 8010d1a:	43db      	mvns	r3, r3
 8010d1c:	9300      	str	r3, [sp, #0]
 8010d1e:	f04f 0800 	mov.w	r8, #0
 8010d22:	4631      	mov	r1, r6
 8010d24:	4620      	mov	r0, r4
 8010d26:	f000 fdf3 	bl	8011910 <_Bfree>
 8010d2a:	2f00      	cmp	r7, #0
 8010d2c:	f43f aea4 	beq.w	8010a78 <_dtoa_r+0x6a0>
 8010d30:	f1b8 0f00 	cmp.w	r8, #0
 8010d34:	d005      	beq.n	8010d42 <_dtoa_r+0x96a>
 8010d36:	45b8      	cmp	r8, r7
 8010d38:	d003      	beq.n	8010d42 <_dtoa_r+0x96a>
 8010d3a:	4641      	mov	r1, r8
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f000 fde7 	bl	8011910 <_Bfree>
 8010d42:	4639      	mov	r1, r7
 8010d44:	4620      	mov	r0, r4
 8010d46:	f000 fde3 	bl	8011910 <_Bfree>
 8010d4a:	e695      	b.n	8010a78 <_dtoa_r+0x6a0>
 8010d4c:	2600      	movs	r6, #0
 8010d4e:	4637      	mov	r7, r6
 8010d50:	e7e1      	b.n	8010d16 <_dtoa_r+0x93e>
 8010d52:	9700      	str	r7, [sp, #0]
 8010d54:	4637      	mov	r7, r6
 8010d56:	e599      	b.n	801088c <_dtoa_r+0x4b4>
 8010d58:	40240000 	.word	0x40240000
 8010d5c:	9b08      	ldr	r3, [sp, #32]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80ca 	beq.w	8010ef8 <_dtoa_r+0xb20>
 8010d64:	9b03      	ldr	r3, [sp, #12]
 8010d66:	9302      	str	r3, [sp, #8]
 8010d68:	2d00      	cmp	r5, #0
 8010d6a:	dd05      	ble.n	8010d78 <_dtoa_r+0x9a0>
 8010d6c:	4639      	mov	r1, r7
 8010d6e:	462a      	mov	r2, r5
 8010d70:	4620      	mov	r0, r4
 8010d72:	f000 ffe9 	bl	8011d48 <__lshift>
 8010d76:	4607      	mov	r7, r0
 8010d78:	f1b8 0f00 	cmp.w	r8, #0
 8010d7c:	d05b      	beq.n	8010e36 <_dtoa_r+0xa5e>
 8010d7e:	6879      	ldr	r1, [r7, #4]
 8010d80:	4620      	mov	r0, r4
 8010d82:	f000 fd85 	bl	8011890 <_Balloc>
 8010d86:	4605      	mov	r5, r0
 8010d88:	b928      	cbnz	r0, 8010d96 <_dtoa_r+0x9be>
 8010d8a:	4b87      	ldr	r3, [pc, #540]	; (8010fa8 <_dtoa_r+0xbd0>)
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010d92:	f7ff bb3b 	b.w	801040c <_dtoa_r+0x34>
 8010d96:	693a      	ldr	r2, [r7, #16]
 8010d98:	3202      	adds	r2, #2
 8010d9a:	0092      	lsls	r2, r2, #2
 8010d9c:	f107 010c 	add.w	r1, r7, #12
 8010da0:	300c      	adds	r0, #12
 8010da2:	f7fd fbb2 	bl	800e50a <memcpy>
 8010da6:	2201      	movs	r2, #1
 8010da8:	4629      	mov	r1, r5
 8010daa:	4620      	mov	r0, r4
 8010dac:	f000 ffcc 	bl	8011d48 <__lshift>
 8010db0:	9b01      	ldr	r3, [sp, #4]
 8010db2:	f103 0901 	add.w	r9, r3, #1
 8010db6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010dba:	4413      	add	r3, r2
 8010dbc:	9305      	str	r3, [sp, #20]
 8010dbe:	f00a 0301 	and.w	r3, sl, #1
 8010dc2:	46b8      	mov	r8, r7
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	4607      	mov	r7, r0
 8010dc8:	4631      	mov	r1, r6
 8010dca:	ee18 0a10 	vmov	r0, s16
 8010dce:	f7ff fa75 	bl	80102bc <quorem>
 8010dd2:	4641      	mov	r1, r8
 8010dd4:	9002      	str	r0, [sp, #8]
 8010dd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010dda:	ee18 0a10 	vmov	r0, s16
 8010dde:	f001 f823 	bl	8011e28 <__mcmp>
 8010de2:	463a      	mov	r2, r7
 8010de4:	9003      	str	r0, [sp, #12]
 8010de6:	4631      	mov	r1, r6
 8010de8:	4620      	mov	r0, r4
 8010dea:	f001 f839 	bl	8011e60 <__mdiff>
 8010dee:	68c2      	ldr	r2, [r0, #12]
 8010df0:	f109 3bff 	add.w	fp, r9, #4294967295
 8010df4:	4605      	mov	r5, r0
 8010df6:	bb02      	cbnz	r2, 8010e3a <_dtoa_r+0xa62>
 8010df8:	4601      	mov	r1, r0
 8010dfa:	ee18 0a10 	vmov	r0, s16
 8010dfe:	f001 f813 	bl	8011e28 <__mcmp>
 8010e02:	4602      	mov	r2, r0
 8010e04:	4629      	mov	r1, r5
 8010e06:	4620      	mov	r0, r4
 8010e08:	9207      	str	r2, [sp, #28]
 8010e0a:	f000 fd81 	bl	8011910 <_Bfree>
 8010e0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010e12:	ea43 0102 	orr.w	r1, r3, r2
 8010e16:	9b04      	ldr	r3, [sp, #16]
 8010e18:	430b      	orrs	r3, r1
 8010e1a:	464d      	mov	r5, r9
 8010e1c:	d10f      	bne.n	8010e3e <_dtoa_r+0xa66>
 8010e1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e22:	d02a      	beq.n	8010e7a <_dtoa_r+0xaa2>
 8010e24:	9b03      	ldr	r3, [sp, #12]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	dd02      	ble.n	8010e30 <_dtoa_r+0xa58>
 8010e2a:	9b02      	ldr	r3, [sp, #8]
 8010e2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010e30:	f88b a000 	strb.w	sl, [fp]
 8010e34:	e775      	b.n	8010d22 <_dtoa_r+0x94a>
 8010e36:	4638      	mov	r0, r7
 8010e38:	e7ba      	b.n	8010db0 <_dtoa_r+0x9d8>
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	e7e2      	b.n	8010e04 <_dtoa_r+0xa2c>
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	db04      	blt.n	8010e4e <_dtoa_r+0xa76>
 8010e44:	9906      	ldr	r1, [sp, #24]
 8010e46:	430b      	orrs	r3, r1
 8010e48:	9904      	ldr	r1, [sp, #16]
 8010e4a:	430b      	orrs	r3, r1
 8010e4c:	d122      	bne.n	8010e94 <_dtoa_r+0xabc>
 8010e4e:	2a00      	cmp	r2, #0
 8010e50:	ddee      	ble.n	8010e30 <_dtoa_r+0xa58>
 8010e52:	ee18 1a10 	vmov	r1, s16
 8010e56:	2201      	movs	r2, #1
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f000 ff75 	bl	8011d48 <__lshift>
 8010e5e:	4631      	mov	r1, r6
 8010e60:	ee08 0a10 	vmov	s16, r0
 8010e64:	f000 ffe0 	bl	8011e28 <__mcmp>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	dc03      	bgt.n	8010e74 <_dtoa_r+0xa9c>
 8010e6c:	d1e0      	bne.n	8010e30 <_dtoa_r+0xa58>
 8010e6e:	f01a 0f01 	tst.w	sl, #1
 8010e72:	d0dd      	beq.n	8010e30 <_dtoa_r+0xa58>
 8010e74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e78:	d1d7      	bne.n	8010e2a <_dtoa_r+0xa52>
 8010e7a:	2339      	movs	r3, #57	; 0x39
 8010e7c:	f88b 3000 	strb.w	r3, [fp]
 8010e80:	462b      	mov	r3, r5
 8010e82:	461d      	mov	r5, r3
 8010e84:	3b01      	subs	r3, #1
 8010e86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010e8a:	2a39      	cmp	r2, #57	; 0x39
 8010e8c:	d071      	beq.n	8010f72 <_dtoa_r+0xb9a>
 8010e8e:	3201      	adds	r2, #1
 8010e90:	701a      	strb	r2, [r3, #0]
 8010e92:	e746      	b.n	8010d22 <_dtoa_r+0x94a>
 8010e94:	2a00      	cmp	r2, #0
 8010e96:	dd07      	ble.n	8010ea8 <_dtoa_r+0xad0>
 8010e98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e9c:	d0ed      	beq.n	8010e7a <_dtoa_r+0xaa2>
 8010e9e:	f10a 0301 	add.w	r3, sl, #1
 8010ea2:	f88b 3000 	strb.w	r3, [fp]
 8010ea6:	e73c      	b.n	8010d22 <_dtoa_r+0x94a>
 8010ea8:	9b05      	ldr	r3, [sp, #20]
 8010eaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010eae:	4599      	cmp	r9, r3
 8010eb0:	d047      	beq.n	8010f42 <_dtoa_r+0xb6a>
 8010eb2:	ee18 1a10 	vmov	r1, s16
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	220a      	movs	r2, #10
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 fd4a 	bl	8011954 <__multadd>
 8010ec0:	45b8      	cmp	r8, r7
 8010ec2:	ee08 0a10 	vmov	s16, r0
 8010ec6:	f04f 0300 	mov.w	r3, #0
 8010eca:	f04f 020a 	mov.w	r2, #10
 8010ece:	4641      	mov	r1, r8
 8010ed0:	4620      	mov	r0, r4
 8010ed2:	d106      	bne.n	8010ee2 <_dtoa_r+0xb0a>
 8010ed4:	f000 fd3e 	bl	8011954 <__multadd>
 8010ed8:	4680      	mov	r8, r0
 8010eda:	4607      	mov	r7, r0
 8010edc:	f109 0901 	add.w	r9, r9, #1
 8010ee0:	e772      	b.n	8010dc8 <_dtoa_r+0x9f0>
 8010ee2:	f000 fd37 	bl	8011954 <__multadd>
 8010ee6:	4639      	mov	r1, r7
 8010ee8:	4680      	mov	r8, r0
 8010eea:	2300      	movs	r3, #0
 8010eec:	220a      	movs	r2, #10
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 fd30 	bl	8011954 <__multadd>
 8010ef4:	4607      	mov	r7, r0
 8010ef6:	e7f1      	b.n	8010edc <_dtoa_r+0xb04>
 8010ef8:	9b03      	ldr	r3, [sp, #12]
 8010efa:	9302      	str	r3, [sp, #8]
 8010efc:	9d01      	ldr	r5, [sp, #4]
 8010efe:	ee18 0a10 	vmov	r0, s16
 8010f02:	4631      	mov	r1, r6
 8010f04:	f7ff f9da 	bl	80102bc <quorem>
 8010f08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010f0c:	9b01      	ldr	r3, [sp, #4]
 8010f0e:	f805 ab01 	strb.w	sl, [r5], #1
 8010f12:	1aea      	subs	r2, r5, r3
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	4293      	cmp	r3, r2
 8010f18:	dd09      	ble.n	8010f2e <_dtoa_r+0xb56>
 8010f1a:	ee18 1a10 	vmov	r1, s16
 8010f1e:	2300      	movs	r3, #0
 8010f20:	220a      	movs	r2, #10
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 fd16 	bl	8011954 <__multadd>
 8010f28:	ee08 0a10 	vmov	s16, r0
 8010f2c:	e7e7      	b.n	8010efe <_dtoa_r+0xb26>
 8010f2e:	9b02      	ldr	r3, [sp, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bfc8      	it	gt
 8010f34:	461d      	movgt	r5, r3
 8010f36:	9b01      	ldr	r3, [sp, #4]
 8010f38:	bfd8      	it	le
 8010f3a:	2501      	movle	r5, #1
 8010f3c:	441d      	add	r5, r3
 8010f3e:	f04f 0800 	mov.w	r8, #0
 8010f42:	ee18 1a10 	vmov	r1, s16
 8010f46:	2201      	movs	r2, #1
 8010f48:	4620      	mov	r0, r4
 8010f4a:	f000 fefd 	bl	8011d48 <__lshift>
 8010f4e:	4631      	mov	r1, r6
 8010f50:	ee08 0a10 	vmov	s16, r0
 8010f54:	f000 ff68 	bl	8011e28 <__mcmp>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	dc91      	bgt.n	8010e80 <_dtoa_r+0xaa8>
 8010f5c:	d102      	bne.n	8010f64 <_dtoa_r+0xb8c>
 8010f5e:	f01a 0f01 	tst.w	sl, #1
 8010f62:	d18d      	bne.n	8010e80 <_dtoa_r+0xaa8>
 8010f64:	462b      	mov	r3, r5
 8010f66:	461d      	mov	r5, r3
 8010f68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f6c:	2a30      	cmp	r2, #48	; 0x30
 8010f6e:	d0fa      	beq.n	8010f66 <_dtoa_r+0xb8e>
 8010f70:	e6d7      	b.n	8010d22 <_dtoa_r+0x94a>
 8010f72:	9a01      	ldr	r2, [sp, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d184      	bne.n	8010e82 <_dtoa_r+0xaaa>
 8010f78:	9b00      	ldr	r3, [sp, #0]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	2331      	movs	r3, #49	; 0x31
 8010f80:	7013      	strb	r3, [r2, #0]
 8010f82:	e6ce      	b.n	8010d22 <_dtoa_r+0x94a>
 8010f84:	4b09      	ldr	r3, [pc, #36]	; (8010fac <_dtoa_r+0xbd4>)
 8010f86:	f7ff ba95 	b.w	80104b4 <_dtoa_r+0xdc>
 8010f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	f47f aa6e 	bne.w	801046e <_dtoa_r+0x96>
 8010f92:	4b07      	ldr	r3, [pc, #28]	; (8010fb0 <_dtoa_r+0xbd8>)
 8010f94:	f7ff ba8e 	b.w	80104b4 <_dtoa_r+0xdc>
 8010f98:	9b02      	ldr	r3, [sp, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	dcae      	bgt.n	8010efc <_dtoa_r+0xb24>
 8010f9e:	9b06      	ldr	r3, [sp, #24]
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	f73f aea8 	bgt.w	8010cf6 <_dtoa_r+0x91e>
 8010fa6:	e7a9      	b.n	8010efc <_dtoa_r+0xb24>
 8010fa8:	08015a48 	.word	0x08015a48
 8010fac:	08015848 	.word	0x08015848
 8010fb0:	080159c9 	.word	0x080159c9

08010fb4 <__sflush_r>:
 8010fb4:	898a      	ldrh	r2, [r1, #12]
 8010fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fba:	4605      	mov	r5, r0
 8010fbc:	0710      	lsls	r0, r2, #28
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	d458      	bmi.n	8011074 <__sflush_r+0xc0>
 8010fc2:	684b      	ldr	r3, [r1, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	dc05      	bgt.n	8010fd4 <__sflush_r+0x20>
 8010fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	dc02      	bgt.n	8010fd4 <__sflush_r+0x20>
 8010fce:	2000      	movs	r0, #0
 8010fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fd6:	2e00      	cmp	r6, #0
 8010fd8:	d0f9      	beq.n	8010fce <__sflush_r+0x1a>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fe0:	682f      	ldr	r7, [r5, #0]
 8010fe2:	602b      	str	r3, [r5, #0]
 8010fe4:	d032      	beq.n	801104c <__sflush_r+0x98>
 8010fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010fe8:	89a3      	ldrh	r3, [r4, #12]
 8010fea:	075a      	lsls	r2, r3, #29
 8010fec:	d505      	bpl.n	8010ffa <__sflush_r+0x46>
 8010fee:	6863      	ldr	r3, [r4, #4]
 8010ff0:	1ac0      	subs	r0, r0, r3
 8010ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ff4:	b10b      	cbz	r3, 8010ffa <__sflush_r+0x46>
 8010ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ff8:	1ac0      	subs	r0, r0, r3
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011000:	6a21      	ldr	r1, [r4, #32]
 8011002:	4628      	mov	r0, r5
 8011004:	47b0      	blx	r6
 8011006:	1c43      	adds	r3, r0, #1
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	d106      	bne.n	801101a <__sflush_r+0x66>
 801100c:	6829      	ldr	r1, [r5, #0]
 801100e:	291d      	cmp	r1, #29
 8011010:	d82c      	bhi.n	801106c <__sflush_r+0xb8>
 8011012:	4a2a      	ldr	r2, [pc, #168]	; (80110bc <__sflush_r+0x108>)
 8011014:	40ca      	lsrs	r2, r1
 8011016:	07d6      	lsls	r6, r2, #31
 8011018:	d528      	bpl.n	801106c <__sflush_r+0xb8>
 801101a:	2200      	movs	r2, #0
 801101c:	6062      	str	r2, [r4, #4]
 801101e:	04d9      	lsls	r1, r3, #19
 8011020:	6922      	ldr	r2, [r4, #16]
 8011022:	6022      	str	r2, [r4, #0]
 8011024:	d504      	bpl.n	8011030 <__sflush_r+0x7c>
 8011026:	1c42      	adds	r2, r0, #1
 8011028:	d101      	bne.n	801102e <__sflush_r+0x7a>
 801102a:	682b      	ldr	r3, [r5, #0]
 801102c:	b903      	cbnz	r3, 8011030 <__sflush_r+0x7c>
 801102e:	6560      	str	r0, [r4, #84]	; 0x54
 8011030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011032:	602f      	str	r7, [r5, #0]
 8011034:	2900      	cmp	r1, #0
 8011036:	d0ca      	beq.n	8010fce <__sflush_r+0x1a>
 8011038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801103c:	4299      	cmp	r1, r3
 801103e:	d002      	beq.n	8011046 <__sflush_r+0x92>
 8011040:	4628      	mov	r0, r5
 8011042:	f001 f8fd 	bl	8012240 <_free_r>
 8011046:	2000      	movs	r0, #0
 8011048:	6360      	str	r0, [r4, #52]	; 0x34
 801104a:	e7c1      	b.n	8010fd0 <__sflush_r+0x1c>
 801104c:	6a21      	ldr	r1, [r4, #32]
 801104e:	2301      	movs	r3, #1
 8011050:	4628      	mov	r0, r5
 8011052:	47b0      	blx	r6
 8011054:	1c41      	adds	r1, r0, #1
 8011056:	d1c7      	bne.n	8010fe8 <__sflush_r+0x34>
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d0c4      	beq.n	8010fe8 <__sflush_r+0x34>
 801105e:	2b1d      	cmp	r3, #29
 8011060:	d001      	beq.n	8011066 <__sflush_r+0xb2>
 8011062:	2b16      	cmp	r3, #22
 8011064:	d101      	bne.n	801106a <__sflush_r+0xb6>
 8011066:	602f      	str	r7, [r5, #0]
 8011068:	e7b1      	b.n	8010fce <__sflush_r+0x1a>
 801106a:	89a3      	ldrh	r3, [r4, #12]
 801106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	e7ad      	b.n	8010fd0 <__sflush_r+0x1c>
 8011074:	690f      	ldr	r7, [r1, #16]
 8011076:	2f00      	cmp	r7, #0
 8011078:	d0a9      	beq.n	8010fce <__sflush_r+0x1a>
 801107a:	0793      	lsls	r3, r2, #30
 801107c:	680e      	ldr	r6, [r1, #0]
 801107e:	bf08      	it	eq
 8011080:	694b      	ldreq	r3, [r1, #20]
 8011082:	600f      	str	r7, [r1, #0]
 8011084:	bf18      	it	ne
 8011086:	2300      	movne	r3, #0
 8011088:	eba6 0807 	sub.w	r8, r6, r7
 801108c:	608b      	str	r3, [r1, #8]
 801108e:	f1b8 0f00 	cmp.w	r8, #0
 8011092:	dd9c      	ble.n	8010fce <__sflush_r+0x1a>
 8011094:	6a21      	ldr	r1, [r4, #32]
 8011096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011098:	4643      	mov	r3, r8
 801109a:	463a      	mov	r2, r7
 801109c:	4628      	mov	r0, r5
 801109e:	47b0      	blx	r6
 80110a0:	2800      	cmp	r0, #0
 80110a2:	dc06      	bgt.n	80110b2 <__sflush_r+0xfe>
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110aa:	81a3      	strh	r3, [r4, #12]
 80110ac:	f04f 30ff 	mov.w	r0, #4294967295
 80110b0:	e78e      	b.n	8010fd0 <__sflush_r+0x1c>
 80110b2:	4407      	add	r7, r0
 80110b4:	eba8 0800 	sub.w	r8, r8, r0
 80110b8:	e7e9      	b.n	801108e <__sflush_r+0xda>
 80110ba:	bf00      	nop
 80110bc:	20400001 	.word	0x20400001

080110c0 <_fflush_r>:
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	690b      	ldr	r3, [r1, #16]
 80110c4:	4605      	mov	r5, r0
 80110c6:	460c      	mov	r4, r1
 80110c8:	b913      	cbnz	r3, 80110d0 <_fflush_r+0x10>
 80110ca:	2500      	movs	r5, #0
 80110cc:	4628      	mov	r0, r5
 80110ce:	bd38      	pop	{r3, r4, r5, pc}
 80110d0:	b118      	cbz	r0, 80110da <_fflush_r+0x1a>
 80110d2:	6983      	ldr	r3, [r0, #24]
 80110d4:	b90b      	cbnz	r3, 80110da <_fflush_r+0x1a>
 80110d6:	f7fd f953 	bl	800e380 <__sinit>
 80110da:	4b14      	ldr	r3, [pc, #80]	; (801112c <_fflush_r+0x6c>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	d11b      	bne.n	8011118 <_fflush_r+0x58>
 80110e0:	686c      	ldr	r4, [r5, #4]
 80110e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d0ef      	beq.n	80110ca <_fflush_r+0xa>
 80110ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80110ec:	07d0      	lsls	r0, r2, #31
 80110ee:	d404      	bmi.n	80110fa <_fflush_r+0x3a>
 80110f0:	0599      	lsls	r1, r3, #22
 80110f2:	d402      	bmi.n	80110fa <_fflush_r+0x3a>
 80110f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110f6:	f7fd fa06 	bl	800e506 <__retarget_lock_acquire_recursive>
 80110fa:	4628      	mov	r0, r5
 80110fc:	4621      	mov	r1, r4
 80110fe:	f7ff ff59 	bl	8010fb4 <__sflush_r>
 8011102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011104:	07da      	lsls	r2, r3, #31
 8011106:	4605      	mov	r5, r0
 8011108:	d4e0      	bmi.n	80110cc <_fflush_r+0xc>
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	059b      	lsls	r3, r3, #22
 801110e:	d4dd      	bmi.n	80110cc <_fflush_r+0xc>
 8011110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011112:	f7fd f9f9 	bl	800e508 <__retarget_lock_release_recursive>
 8011116:	e7d9      	b.n	80110cc <_fflush_r+0xc>
 8011118:	4b05      	ldr	r3, [pc, #20]	; (8011130 <_fflush_r+0x70>)
 801111a:	429c      	cmp	r4, r3
 801111c:	d101      	bne.n	8011122 <_fflush_r+0x62>
 801111e:	68ac      	ldr	r4, [r5, #8]
 8011120:	e7df      	b.n	80110e2 <_fflush_r+0x22>
 8011122:	4b04      	ldr	r3, [pc, #16]	; (8011134 <_fflush_r+0x74>)
 8011124:	429c      	cmp	r4, r3
 8011126:	bf08      	it	eq
 8011128:	68ec      	ldreq	r4, [r5, #12]
 801112a:	e7da      	b.n	80110e2 <_fflush_r+0x22>
 801112c:	080157f4 	.word	0x080157f4
 8011130:	08015814 	.word	0x08015814
 8011134:	080157d4 	.word	0x080157d4

08011138 <rshift>:
 8011138:	6903      	ldr	r3, [r0, #16]
 801113a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801113e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011142:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011146:	f100 0414 	add.w	r4, r0, #20
 801114a:	dd45      	ble.n	80111d8 <rshift+0xa0>
 801114c:	f011 011f 	ands.w	r1, r1, #31
 8011150:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011154:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011158:	d10c      	bne.n	8011174 <rshift+0x3c>
 801115a:	f100 0710 	add.w	r7, r0, #16
 801115e:	4629      	mov	r1, r5
 8011160:	42b1      	cmp	r1, r6
 8011162:	d334      	bcc.n	80111ce <rshift+0x96>
 8011164:	1a9b      	subs	r3, r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	1eea      	subs	r2, r5, #3
 801116a:	4296      	cmp	r6, r2
 801116c:	bf38      	it	cc
 801116e:	2300      	movcc	r3, #0
 8011170:	4423      	add	r3, r4
 8011172:	e015      	b.n	80111a0 <rshift+0x68>
 8011174:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011178:	f1c1 0820 	rsb	r8, r1, #32
 801117c:	40cf      	lsrs	r7, r1
 801117e:	f105 0e04 	add.w	lr, r5, #4
 8011182:	46a1      	mov	r9, r4
 8011184:	4576      	cmp	r6, lr
 8011186:	46f4      	mov	ip, lr
 8011188:	d815      	bhi.n	80111b6 <rshift+0x7e>
 801118a:	1a9a      	subs	r2, r3, r2
 801118c:	0092      	lsls	r2, r2, #2
 801118e:	3a04      	subs	r2, #4
 8011190:	3501      	adds	r5, #1
 8011192:	42ae      	cmp	r6, r5
 8011194:	bf38      	it	cc
 8011196:	2200      	movcc	r2, #0
 8011198:	18a3      	adds	r3, r4, r2
 801119a:	50a7      	str	r7, [r4, r2]
 801119c:	b107      	cbz	r7, 80111a0 <rshift+0x68>
 801119e:	3304      	adds	r3, #4
 80111a0:	1b1a      	subs	r2, r3, r4
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80111a8:	bf08      	it	eq
 80111aa:	2300      	moveq	r3, #0
 80111ac:	6102      	str	r2, [r0, #16]
 80111ae:	bf08      	it	eq
 80111b0:	6143      	streq	r3, [r0, #20]
 80111b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111b6:	f8dc c000 	ldr.w	ip, [ip]
 80111ba:	fa0c fc08 	lsl.w	ip, ip, r8
 80111be:	ea4c 0707 	orr.w	r7, ip, r7
 80111c2:	f849 7b04 	str.w	r7, [r9], #4
 80111c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80111ca:	40cf      	lsrs	r7, r1
 80111cc:	e7da      	b.n	8011184 <rshift+0x4c>
 80111ce:	f851 cb04 	ldr.w	ip, [r1], #4
 80111d2:	f847 cf04 	str.w	ip, [r7, #4]!
 80111d6:	e7c3      	b.n	8011160 <rshift+0x28>
 80111d8:	4623      	mov	r3, r4
 80111da:	e7e1      	b.n	80111a0 <rshift+0x68>

080111dc <__hexdig_fun>:
 80111dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80111e0:	2b09      	cmp	r3, #9
 80111e2:	d802      	bhi.n	80111ea <__hexdig_fun+0xe>
 80111e4:	3820      	subs	r0, #32
 80111e6:	b2c0      	uxtb	r0, r0
 80111e8:	4770      	bx	lr
 80111ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80111ee:	2b05      	cmp	r3, #5
 80111f0:	d801      	bhi.n	80111f6 <__hexdig_fun+0x1a>
 80111f2:	3847      	subs	r0, #71	; 0x47
 80111f4:	e7f7      	b.n	80111e6 <__hexdig_fun+0xa>
 80111f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80111fa:	2b05      	cmp	r3, #5
 80111fc:	d801      	bhi.n	8011202 <__hexdig_fun+0x26>
 80111fe:	3827      	subs	r0, #39	; 0x27
 8011200:	e7f1      	b.n	80111e6 <__hexdig_fun+0xa>
 8011202:	2000      	movs	r0, #0
 8011204:	4770      	bx	lr
	...

08011208 <__gethex>:
 8011208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120c:	ed2d 8b02 	vpush	{d8}
 8011210:	b089      	sub	sp, #36	; 0x24
 8011212:	ee08 0a10 	vmov	s16, r0
 8011216:	9304      	str	r3, [sp, #16]
 8011218:	4bb4      	ldr	r3, [pc, #720]	; (80114ec <__gethex+0x2e4>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	468b      	mov	fp, r1
 8011222:	4690      	mov	r8, r2
 8011224:	f7ee ffe4 	bl	80001f0 <strlen>
 8011228:	9b01      	ldr	r3, [sp, #4]
 801122a:	f8db 2000 	ldr.w	r2, [fp]
 801122e:	4403      	add	r3, r0
 8011230:	4682      	mov	sl, r0
 8011232:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011236:	9305      	str	r3, [sp, #20]
 8011238:	1c93      	adds	r3, r2, #2
 801123a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801123e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011242:	32fe      	adds	r2, #254	; 0xfe
 8011244:	18d1      	adds	r1, r2, r3
 8011246:	461f      	mov	r7, r3
 8011248:	f813 0b01 	ldrb.w	r0, [r3], #1
 801124c:	9100      	str	r1, [sp, #0]
 801124e:	2830      	cmp	r0, #48	; 0x30
 8011250:	d0f8      	beq.n	8011244 <__gethex+0x3c>
 8011252:	f7ff ffc3 	bl	80111dc <__hexdig_fun>
 8011256:	4604      	mov	r4, r0
 8011258:	2800      	cmp	r0, #0
 801125a:	d13a      	bne.n	80112d2 <__gethex+0xca>
 801125c:	9901      	ldr	r1, [sp, #4]
 801125e:	4652      	mov	r2, sl
 8011260:	4638      	mov	r0, r7
 8011262:	f001 f9b1 	bl	80125c8 <strncmp>
 8011266:	4605      	mov	r5, r0
 8011268:	2800      	cmp	r0, #0
 801126a:	d168      	bne.n	801133e <__gethex+0x136>
 801126c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011270:	eb07 060a 	add.w	r6, r7, sl
 8011274:	f7ff ffb2 	bl	80111dc <__hexdig_fun>
 8011278:	2800      	cmp	r0, #0
 801127a:	d062      	beq.n	8011342 <__gethex+0x13a>
 801127c:	4633      	mov	r3, r6
 801127e:	7818      	ldrb	r0, [r3, #0]
 8011280:	2830      	cmp	r0, #48	; 0x30
 8011282:	461f      	mov	r7, r3
 8011284:	f103 0301 	add.w	r3, r3, #1
 8011288:	d0f9      	beq.n	801127e <__gethex+0x76>
 801128a:	f7ff ffa7 	bl	80111dc <__hexdig_fun>
 801128e:	2301      	movs	r3, #1
 8011290:	fab0 f480 	clz	r4, r0
 8011294:	0964      	lsrs	r4, r4, #5
 8011296:	4635      	mov	r5, r6
 8011298:	9300      	str	r3, [sp, #0]
 801129a:	463a      	mov	r2, r7
 801129c:	4616      	mov	r6, r2
 801129e:	3201      	adds	r2, #1
 80112a0:	7830      	ldrb	r0, [r6, #0]
 80112a2:	f7ff ff9b 	bl	80111dc <__hexdig_fun>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d1f8      	bne.n	801129c <__gethex+0x94>
 80112aa:	9901      	ldr	r1, [sp, #4]
 80112ac:	4652      	mov	r2, sl
 80112ae:	4630      	mov	r0, r6
 80112b0:	f001 f98a 	bl	80125c8 <strncmp>
 80112b4:	b980      	cbnz	r0, 80112d8 <__gethex+0xd0>
 80112b6:	b94d      	cbnz	r5, 80112cc <__gethex+0xc4>
 80112b8:	eb06 050a 	add.w	r5, r6, sl
 80112bc:	462a      	mov	r2, r5
 80112be:	4616      	mov	r6, r2
 80112c0:	3201      	adds	r2, #1
 80112c2:	7830      	ldrb	r0, [r6, #0]
 80112c4:	f7ff ff8a 	bl	80111dc <__hexdig_fun>
 80112c8:	2800      	cmp	r0, #0
 80112ca:	d1f8      	bne.n	80112be <__gethex+0xb6>
 80112cc:	1bad      	subs	r5, r5, r6
 80112ce:	00ad      	lsls	r5, r5, #2
 80112d0:	e004      	b.n	80112dc <__gethex+0xd4>
 80112d2:	2400      	movs	r4, #0
 80112d4:	4625      	mov	r5, r4
 80112d6:	e7e0      	b.n	801129a <__gethex+0x92>
 80112d8:	2d00      	cmp	r5, #0
 80112da:	d1f7      	bne.n	80112cc <__gethex+0xc4>
 80112dc:	7833      	ldrb	r3, [r6, #0]
 80112de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80112e2:	2b50      	cmp	r3, #80	; 0x50
 80112e4:	d13b      	bne.n	801135e <__gethex+0x156>
 80112e6:	7873      	ldrb	r3, [r6, #1]
 80112e8:	2b2b      	cmp	r3, #43	; 0x2b
 80112ea:	d02c      	beq.n	8011346 <__gethex+0x13e>
 80112ec:	2b2d      	cmp	r3, #45	; 0x2d
 80112ee:	d02e      	beq.n	801134e <__gethex+0x146>
 80112f0:	1c71      	adds	r1, r6, #1
 80112f2:	f04f 0900 	mov.w	r9, #0
 80112f6:	7808      	ldrb	r0, [r1, #0]
 80112f8:	f7ff ff70 	bl	80111dc <__hexdig_fun>
 80112fc:	1e43      	subs	r3, r0, #1
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b18      	cmp	r3, #24
 8011302:	d82c      	bhi.n	801135e <__gethex+0x156>
 8011304:	f1a0 0210 	sub.w	r2, r0, #16
 8011308:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801130c:	f7ff ff66 	bl	80111dc <__hexdig_fun>
 8011310:	1e43      	subs	r3, r0, #1
 8011312:	b2db      	uxtb	r3, r3
 8011314:	2b18      	cmp	r3, #24
 8011316:	d91d      	bls.n	8011354 <__gethex+0x14c>
 8011318:	f1b9 0f00 	cmp.w	r9, #0
 801131c:	d000      	beq.n	8011320 <__gethex+0x118>
 801131e:	4252      	negs	r2, r2
 8011320:	4415      	add	r5, r2
 8011322:	f8cb 1000 	str.w	r1, [fp]
 8011326:	b1e4      	cbz	r4, 8011362 <__gethex+0x15a>
 8011328:	9b00      	ldr	r3, [sp, #0]
 801132a:	2b00      	cmp	r3, #0
 801132c:	bf14      	ite	ne
 801132e:	2700      	movne	r7, #0
 8011330:	2706      	moveq	r7, #6
 8011332:	4638      	mov	r0, r7
 8011334:	b009      	add	sp, #36	; 0x24
 8011336:	ecbd 8b02 	vpop	{d8}
 801133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801133e:	463e      	mov	r6, r7
 8011340:	4625      	mov	r5, r4
 8011342:	2401      	movs	r4, #1
 8011344:	e7ca      	b.n	80112dc <__gethex+0xd4>
 8011346:	f04f 0900 	mov.w	r9, #0
 801134a:	1cb1      	adds	r1, r6, #2
 801134c:	e7d3      	b.n	80112f6 <__gethex+0xee>
 801134e:	f04f 0901 	mov.w	r9, #1
 8011352:	e7fa      	b.n	801134a <__gethex+0x142>
 8011354:	230a      	movs	r3, #10
 8011356:	fb03 0202 	mla	r2, r3, r2, r0
 801135a:	3a10      	subs	r2, #16
 801135c:	e7d4      	b.n	8011308 <__gethex+0x100>
 801135e:	4631      	mov	r1, r6
 8011360:	e7df      	b.n	8011322 <__gethex+0x11a>
 8011362:	1bf3      	subs	r3, r6, r7
 8011364:	3b01      	subs	r3, #1
 8011366:	4621      	mov	r1, r4
 8011368:	2b07      	cmp	r3, #7
 801136a:	dc0b      	bgt.n	8011384 <__gethex+0x17c>
 801136c:	ee18 0a10 	vmov	r0, s16
 8011370:	f000 fa8e 	bl	8011890 <_Balloc>
 8011374:	4604      	mov	r4, r0
 8011376:	b940      	cbnz	r0, 801138a <__gethex+0x182>
 8011378:	4b5d      	ldr	r3, [pc, #372]	; (80114f0 <__gethex+0x2e8>)
 801137a:	4602      	mov	r2, r0
 801137c:	21de      	movs	r1, #222	; 0xde
 801137e:	485d      	ldr	r0, [pc, #372]	; (80114f4 <__gethex+0x2ec>)
 8011380:	f001 f944 	bl	801260c <__assert_func>
 8011384:	3101      	adds	r1, #1
 8011386:	105b      	asrs	r3, r3, #1
 8011388:	e7ee      	b.n	8011368 <__gethex+0x160>
 801138a:	f100 0914 	add.w	r9, r0, #20
 801138e:	f04f 0b00 	mov.w	fp, #0
 8011392:	f1ca 0301 	rsb	r3, sl, #1
 8011396:	f8cd 9008 	str.w	r9, [sp, #8]
 801139a:	f8cd b000 	str.w	fp, [sp]
 801139e:	9306      	str	r3, [sp, #24]
 80113a0:	42b7      	cmp	r7, r6
 80113a2:	d340      	bcc.n	8011426 <__gethex+0x21e>
 80113a4:	9802      	ldr	r0, [sp, #8]
 80113a6:	9b00      	ldr	r3, [sp, #0]
 80113a8:	f840 3b04 	str.w	r3, [r0], #4
 80113ac:	eba0 0009 	sub.w	r0, r0, r9
 80113b0:	1080      	asrs	r0, r0, #2
 80113b2:	0146      	lsls	r6, r0, #5
 80113b4:	6120      	str	r0, [r4, #16]
 80113b6:	4618      	mov	r0, r3
 80113b8:	f000 fb5c 	bl	8011a74 <__hi0bits>
 80113bc:	1a30      	subs	r0, r6, r0
 80113be:	f8d8 6000 	ldr.w	r6, [r8]
 80113c2:	42b0      	cmp	r0, r6
 80113c4:	dd63      	ble.n	801148e <__gethex+0x286>
 80113c6:	1b87      	subs	r7, r0, r6
 80113c8:	4639      	mov	r1, r7
 80113ca:	4620      	mov	r0, r4
 80113cc:	f000 ff00 	bl	80121d0 <__any_on>
 80113d0:	4682      	mov	sl, r0
 80113d2:	b1a8      	cbz	r0, 8011400 <__gethex+0x1f8>
 80113d4:	1e7b      	subs	r3, r7, #1
 80113d6:	1159      	asrs	r1, r3, #5
 80113d8:	f003 021f 	and.w	r2, r3, #31
 80113dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80113e0:	f04f 0a01 	mov.w	sl, #1
 80113e4:	fa0a f202 	lsl.w	r2, sl, r2
 80113e8:	420a      	tst	r2, r1
 80113ea:	d009      	beq.n	8011400 <__gethex+0x1f8>
 80113ec:	4553      	cmp	r3, sl
 80113ee:	dd05      	ble.n	80113fc <__gethex+0x1f4>
 80113f0:	1eb9      	subs	r1, r7, #2
 80113f2:	4620      	mov	r0, r4
 80113f4:	f000 feec 	bl	80121d0 <__any_on>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d145      	bne.n	8011488 <__gethex+0x280>
 80113fc:	f04f 0a02 	mov.w	sl, #2
 8011400:	4639      	mov	r1, r7
 8011402:	4620      	mov	r0, r4
 8011404:	f7ff fe98 	bl	8011138 <rshift>
 8011408:	443d      	add	r5, r7
 801140a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801140e:	42ab      	cmp	r3, r5
 8011410:	da4c      	bge.n	80114ac <__gethex+0x2a4>
 8011412:	ee18 0a10 	vmov	r0, s16
 8011416:	4621      	mov	r1, r4
 8011418:	f000 fa7a 	bl	8011910 <_Bfree>
 801141c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801141e:	2300      	movs	r3, #0
 8011420:	6013      	str	r3, [r2, #0]
 8011422:	27a3      	movs	r7, #163	; 0xa3
 8011424:	e785      	b.n	8011332 <__gethex+0x12a>
 8011426:	1e73      	subs	r3, r6, #1
 8011428:	9a05      	ldr	r2, [sp, #20]
 801142a:	9303      	str	r3, [sp, #12]
 801142c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011430:	4293      	cmp	r3, r2
 8011432:	d019      	beq.n	8011468 <__gethex+0x260>
 8011434:	f1bb 0f20 	cmp.w	fp, #32
 8011438:	d107      	bne.n	801144a <__gethex+0x242>
 801143a:	9b02      	ldr	r3, [sp, #8]
 801143c:	9a00      	ldr	r2, [sp, #0]
 801143e:	f843 2b04 	str.w	r2, [r3], #4
 8011442:	9302      	str	r3, [sp, #8]
 8011444:	2300      	movs	r3, #0
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	469b      	mov	fp, r3
 801144a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801144e:	f7ff fec5 	bl	80111dc <__hexdig_fun>
 8011452:	9b00      	ldr	r3, [sp, #0]
 8011454:	f000 000f 	and.w	r0, r0, #15
 8011458:	fa00 f00b 	lsl.w	r0, r0, fp
 801145c:	4303      	orrs	r3, r0
 801145e:	9300      	str	r3, [sp, #0]
 8011460:	f10b 0b04 	add.w	fp, fp, #4
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	e00d      	b.n	8011484 <__gethex+0x27c>
 8011468:	9b03      	ldr	r3, [sp, #12]
 801146a:	9a06      	ldr	r2, [sp, #24]
 801146c:	4413      	add	r3, r2
 801146e:	42bb      	cmp	r3, r7
 8011470:	d3e0      	bcc.n	8011434 <__gethex+0x22c>
 8011472:	4618      	mov	r0, r3
 8011474:	9901      	ldr	r1, [sp, #4]
 8011476:	9307      	str	r3, [sp, #28]
 8011478:	4652      	mov	r2, sl
 801147a:	f001 f8a5 	bl	80125c8 <strncmp>
 801147e:	9b07      	ldr	r3, [sp, #28]
 8011480:	2800      	cmp	r0, #0
 8011482:	d1d7      	bne.n	8011434 <__gethex+0x22c>
 8011484:	461e      	mov	r6, r3
 8011486:	e78b      	b.n	80113a0 <__gethex+0x198>
 8011488:	f04f 0a03 	mov.w	sl, #3
 801148c:	e7b8      	b.n	8011400 <__gethex+0x1f8>
 801148e:	da0a      	bge.n	80114a6 <__gethex+0x29e>
 8011490:	1a37      	subs	r7, r6, r0
 8011492:	4621      	mov	r1, r4
 8011494:	ee18 0a10 	vmov	r0, s16
 8011498:	463a      	mov	r2, r7
 801149a:	f000 fc55 	bl	8011d48 <__lshift>
 801149e:	1bed      	subs	r5, r5, r7
 80114a0:	4604      	mov	r4, r0
 80114a2:	f100 0914 	add.w	r9, r0, #20
 80114a6:	f04f 0a00 	mov.w	sl, #0
 80114aa:	e7ae      	b.n	801140a <__gethex+0x202>
 80114ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80114b0:	42a8      	cmp	r0, r5
 80114b2:	dd72      	ble.n	801159a <__gethex+0x392>
 80114b4:	1b45      	subs	r5, r0, r5
 80114b6:	42ae      	cmp	r6, r5
 80114b8:	dc36      	bgt.n	8011528 <__gethex+0x320>
 80114ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114be:	2b02      	cmp	r3, #2
 80114c0:	d02a      	beq.n	8011518 <__gethex+0x310>
 80114c2:	2b03      	cmp	r3, #3
 80114c4:	d02c      	beq.n	8011520 <__gethex+0x318>
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d11c      	bne.n	8011504 <__gethex+0x2fc>
 80114ca:	42ae      	cmp	r6, r5
 80114cc:	d11a      	bne.n	8011504 <__gethex+0x2fc>
 80114ce:	2e01      	cmp	r6, #1
 80114d0:	d112      	bne.n	80114f8 <__gethex+0x2f0>
 80114d2:	9a04      	ldr	r2, [sp, #16]
 80114d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80114d8:	6013      	str	r3, [r2, #0]
 80114da:	2301      	movs	r3, #1
 80114dc:	6123      	str	r3, [r4, #16]
 80114de:	f8c9 3000 	str.w	r3, [r9]
 80114e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114e4:	2762      	movs	r7, #98	; 0x62
 80114e6:	601c      	str	r4, [r3, #0]
 80114e8:	e723      	b.n	8011332 <__gethex+0x12a>
 80114ea:	bf00      	nop
 80114ec:	08015ac0 	.word	0x08015ac0
 80114f0:	08015a48 	.word	0x08015a48
 80114f4:	08015a59 	.word	0x08015a59
 80114f8:	1e71      	subs	r1, r6, #1
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fe68 	bl	80121d0 <__any_on>
 8011500:	2800      	cmp	r0, #0
 8011502:	d1e6      	bne.n	80114d2 <__gethex+0x2ca>
 8011504:	ee18 0a10 	vmov	r0, s16
 8011508:	4621      	mov	r1, r4
 801150a:	f000 fa01 	bl	8011910 <_Bfree>
 801150e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011510:	2300      	movs	r3, #0
 8011512:	6013      	str	r3, [r2, #0]
 8011514:	2750      	movs	r7, #80	; 0x50
 8011516:	e70c      	b.n	8011332 <__gethex+0x12a>
 8011518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801151a:	2b00      	cmp	r3, #0
 801151c:	d1f2      	bne.n	8011504 <__gethex+0x2fc>
 801151e:	e7d8      	b.n	80114d2 <__gethex+0x2ca>
 8011520:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011522:	2b00      	cmp	r3, #0
 8011524:	d1d5      	bne.n	80114d2 <__gethex+0x2ca>
 8011526:	e7ed      	b.n	8011504 <__gethex+0x2fc>
 8011528:	1e6f      	subs	r7, r5, #1
 801152a:	f1ba 0f00 	cmp.w	sl, #0
 801152e:	d131      	bne.n	8011594 <__gethex+0x38c>
 8011530:	b127      	cbz	r7, 801153c <__gethex+0x334>
 8011532:	4639      	mov	r1, r7
 8011534:	4620      	mov	r0, r4
 8011536:	f000 fe4b 	bl	80121d0 <__any_on>
 801153a:	4682      	mov	sl, r0
 801153c:	117b      	asrs	r3, r7, #5
 801153e:	2101      	movs	r1, #1
 8011540:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011544:	f007 071f 	and.w	r7, r7, #31
 8011548:	fa01 f707 	lsl.w	r7, r1, r7
 801154c:	421f      	tst	r7, r3
 801154e:	4629      	mov	r1, r5
 8011550:	4620      	mov	r0, r4
 8011552:	bf18      	it	ne
 8011554:	f04a 0a02 	orrne.w	sl, sl, #2
 8011558:	1b76      	subs	r6, r6, r5
 801155a:	f7ff fded 	bl	8011138 <rshift>
 801155e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011562:	2702      	movs	r7, #2
 8011564:	f1ba 0f00 	cmp.w	sl, #0
 8011568:	d048      	beq.n	80115fc <__gethex+0x3f4>
 801156a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801156e:	2b02      	cmp	r3, #2
 8011570:	d015      	beq.n	801159e <__gethex+0x396>
 8011572:	2b03      	cmp	r3, #3
 8011574:	d017      	beq.n	80115a6 <__gethex+0x39e>
 8011576:	2b01      	cmp	r3, #1
 8011578:	d109      	bne.n	801158e <__gethex+0x386>
 801157a:	f01a 0f02 	tst.w	sl, #2
 801157e:	d006      	beq.n	801158e <__gethex+0x386>
 8011580:	f8d9 0000 	ldr.w	r0, [r9]
 8011584:	ea4a 0a00 	orr.w	sl, sl, r0
 8011588:	f01a 0f01 	tst.w	sl, #1
 801158c:	d10e      	bne.n	80115ac <__gethex+0x3a4>
 801158e:	f047 0710 	orr.w	r7, r7, #16
 8011592:	e033      	b.n	80115fc <__gethex+0x3f4>
 8011594:	f04f 0a01 	mov.w	sl, #1
 8011598:	e7d0      	b.n	801153c <__gethex+0x334>
 801159a:	2701      	movs	r7, #1
 801159c:	e7e2      	b.n	8011564 <__gethex+0x35c>
 801159e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115a0:	f1c3 0301 	rsb	r3, r3, #1
 80115a4:	9315      	str	r3, [sp, #84]	; 0x54
 80115a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d0f0      	beq.n	801158e <__gethex+0x386>
 80115ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80115b0:	f104 0314 	add.w	r3, r4, #20
 80115b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80115b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80115bc:	f04f 0c00 	mov.w	ip, #0
 80115c0:	4618      	mov	r0, r3
 80115c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80115c6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80115ca:	d01c      	beq.n	8011606 <__gethex+0x3fe>
 80115cc:	3201      	adds	r2, #1
 80115ce:	6002      	str	r2, [r0, #0]
 80115d0:	2f02      	cmp	r7, #2
 80115d2:	f104 0314 	add.w	r3, r4, #20
 80115d6:	d13f      	bne.n	8011658 <__gethex+0x450>
 80115d8:	f8d8 2000 	ldr.w	r2, [r8]
 80115dc:	3a01      	subs	r2, #1
 80115de:	42b2      	cmp	r2, r6
 80115e0:	d10a      	bne.n	80115f8 <__gethex+0x3f0>
 80115e2:	1171      	asrs	r1, r6, #5
 80115e4:	2201      	movs	r2, #1
 80115e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80115ea:	f006 061f 	and.w	r6, r6, #31
 80115ee:	fa02 f606 	lsl.w	r6, r2, r6
 80115f2:	421e      	tst	r6, r3
 80115f4:	bf18      	it	ne
 80115f6:	4617      	movne	r7, r2
 80115f8:	f047 0720 	orr.w	r7, r7, #32
 80115fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115fe:	601c      	str	r4, [r3, #0]
 8011600:	9b04      	ldr	r3, [sp, #16]
 8011602:	601d      	str	r5, [r3, #0]
 8011604:	e695      	b.n	8011332 <__gethex+0x12a>
 8011606:	4299      	cmp	r1, r3
 8011608:	f843 cc04 	str.w	ip, [r3, #-4]
 801160c:	d8d8      	bhi.n	80115c0 <__gethex+0x3b8>
 801160e:	68a3      	ldr	r3, [r4, #8]
 8011610:	459b      	cmp	fp, r3
 8011612:	db19      	blt.n	8011648 <__gethex+0x440>
 8011614:	6861      	ldr	r1, [r4, #4]
 8011616:	ee18 0a10 	vmov	r0, s16
 801161a:	3101      	adds	r1, #1
 801161c:	f000 f938 	bl	8011890 <_Balloc>
 8011620:	4681      	mov	r9, r0
 8011622:	b918      	cbnz	r0, 801162c <__gethex+0x424>
 8011624:	4b1a      	ldr	r3, [pc, #104]	; (8011690 <__gethex+0x488>)
 8011626:	4602      	mov	r2, r0
 8011628:	2184      	movs	r1, #132	; 0x84
 801162a:	e6a8      	b.n	801137e <__gethex+0x176>
 801162c:	6922      	ldr	r2, [r4, #16]
 801162e:	3202      	adds	r2, #2
 8011630:	f104 010c 	add.w	r1, r4, #12
 8011634:	0092      	lsls	r2, r2, #2
 8011636:	300c      	adds	r0, #12
 8011638:	f7fc ff67 	bl	800e50a <memcpy>
 801163c:	4621      	mov	r1, r4
 801163e:	ee18 0a10 	vmov	r0, s16
 8011642:	f000 f965 	bl	8011910 <_Bfree>
 8011646:	464c      	mov	r4, r9
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011650:	6122      	str	r2, [r4, #16]
 8011652:	2201      	movs	r2, #1
 8011654:	615a      	str	r2, [r3, #20]
 8011656:	e7bb      	b.n	80115d0 <__gethex+0x3c8>
 8011658:	6922      	ldr	r2, [r4, #16]
 801165a:	455a      	cmp	r2, fp
 801165c:	dd0b      	ble.n	8011676 <__gethex+0x46e>
 801165e:	2101      	movs	r1, #1
 8011660:	4620      	mov	r0, r4
 8011662:	f7ff fd69 	bl	8011138 <rshift>
 8011666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801166a:	3501      	adds	r5, #1
 801166c:	42ab      	cmp	r3, r5
 801166e:	f6ff aed0 	blt.w	8011412 <__gethex+0x20a>
 8011672:	2701      	movs	r7, #1
 8011674:	e7c0      	b.n	80115f8 <__gethex+0x3f0>
 8011676:	f016 061f 	ands.w	r6, r6, #31
 801167a:	d0fa      	beq.n	8011672 <__gethex+0x46a>
 801167c:	4453      	add	r3, sl
 801167e:	f1c6 0620 	rsb	r6, r6, #32
 8011682:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011686:	f000 f9f5 	bl	8011a74 <__hi0bits>
 801168a:	42b0      	cmp	r0, r6
 801168c:	dbe7      	blt.n	801165e <__gethex+0x456>
 801168e:	e7f0      	b.n	8011672 <__gethex+0x46a>
 8011690:	08015a48 	.word	0x08015a48

08011694 <L_shift>:
 8011694:	f1c2 0208 	rsb	r2, r2, #8
 8011698:	0092      	lsls	r2, r2, #2
 801169a:	b570      	push	{r4, r5, r6, lr}
 801169c:	f1c2 0620 	rsb	r6, r2, #32
 80116a0:	6843      	ldr	r3, [r0, #4]
 80116a2:	6804      	ldr	r4, [r0, #0]
 80116a4:	fa03 f506 	lsl.w	r5, r3, r6
 80116a8:	432c      	orrs	r4, r5
 80116aa:	40d3      	lsrs	r3, r2
 80116ac:	6004      	str	r4, [r0, #0]
 80116ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80116b2:	4288      	cmp	r0, r1
 80116b4:	d3f4      	bcc.n	80116a0 <L_shift+0xc>
 80116b6:	bd70      	pop	{r4, r5, r6, pc}

080116b8 <__match>:
 80116b8:	b530      	push	{r4, r5, lr}
 80116ba:	6803      	ldr	r3, [r0, #0]
 80116bc:	3301      	adds	r3, #1
 80116be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116c2:	b914      	cbnz	r4, 80116ca <__match+0x12>
 80116c4:	6003      	str	r3, [r0, #0]
 80116c6:	2001      	movs	r0, #1
 80116c8:	bd30      	pop	{r4, r5, pc}
 80116ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80116d2:	2d19      	cmp	r5, #25
 80116d4:	bf98      	it	ls
 80116d6:	3220      	addls	r2, #32
 80116d8:	42a2      	cmp	r2, r4
 80116da:	d0f0      	beq.n	80116be <__match+0x6>
 80116dc:	2000      	movs	r0, #0
 80116de:	e7f3      	b.n	80116c8 <__match+0x10>

080116e0 <__hexnan>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	680b      	ldr	r3, [r1, #0]
 80116e6:	115e      	asrs	r6, r3, #5
 80116e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80116ec:	f013 031f 	ands.w	r3, r3, #31
 80116f0:	b087      	sub	sp, #28
 80116f2:	bf18      	it	ne
 80116f4:	3604      	addne	r6, #4
 80116f6:	2500      	movs	r5, #0
 80116f8:	1f37      	subs	r7, r6, #4
 80116fa:	4690      	mov	r8, r2
 80116fc:	6802      	ldr	r2, [r0, #0]
 80116fe:	9301      	str	r3, [sp, #4]
 8011700:	4682      	mov	sl, r0
 8011702:	f846 5c04 	str.w	r5, [r6, #-4]
 8011706:	46b9      	mov	r9, r7
 8011708:	463c      	mov	r4, r7
 801170a:	9502      	str	r5, [sp, #8]
 801170c:	46ab      	mov	fp, r5
 801170e:	7851      	ldrb	r1, [r2, #1]
 8011710:	1c53      	adds	r3, r2, #1
 8011712:	9303      	str	r3, [sp, #12]
 8011714:	b341      	cbz	r1, 8011768 <__hexnan+0x88>
 8011716:	4608      	mov	r0, r1
 8011718:	9205      	str	r2, [sp, #20]
 801171a:	9104      	str	r1, [sp, #16]
 801171c:	f7ff fd5e 	bl	80111dc <__hexdig_fun>
 8011720:	2800      	cmp	r0, #0
 8011722:	d14f      	bne.n	80117c4 <__hexnan+0xe4>
 8011724:	9904      	ldr	r1, [sp, #16]
 8011726:	9a05      	ldr	r2, [sp, #20]
 8011728:	2920      	cmp	r1, #32
 801172a:	d818      	bhi.n	801175e <__hexnan+0x7e>
 801172c:	9b02      	ldr	r3, [sp, #8]
 801172e:	459b      	cmp	fp, r3
 8011730:	dd13      	ble.n	801175a <__hexnan+0x7a>
 8011732:	454c      	cmp	r4, r9
 8011734:	d206      	bcs.n	8011744 <__hexnan+0x64>
 8011736:	2d07      	cmp	r5, #7
 8011738:	dc04      	bgt.n	8011744 <__hexnan+0x64>
 801173a:	462a      	mov	r2, r5
 801173c:	4649      	mov	r1, r9
 801173e:	4620      	mov	r0, r4
 8011740:	f7ff ffa8 	bl	8011694 <L_shift>
 8011744:	4544      	cmp	r4, r8
 8011746:	d950      	bls.n	80117ea <__hexnan+0x10a>
 8011748:	2300      	movs	r3, #0
 801174a:	f1a4 0904 	sub.w	r9, r4, #4
 801174e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011752:	f8cd b008 	str.w	fp, [sp, #8]
 8011756:	464c      	mov	r4, r9
 8011758:	461d      	mov	r5, r3
 801175a:	9a03      	ldr	r2, [sp, #12]
 801175c:	e7d7      	b.n	801170e <__hexnan+0x2e>
 801175e:	2929      	cmp	r1, #41	; 0x29
 8011760:	d156      	bne.n	8011810 <__hexnan+0x130>
 8011762:	3202      	adds	r2, #2
 8011764:	f8ca 2000 	str.w	r2, [sl]
 8011768:	f1bb 0f00 	cmp.w	fp, #0
 801176c:	d050      	beq.n	8011810 <__hexnan+0x130>
 801176e:	454c      	cmp	r4, r9
 8011770:	d206      	bcs.n	8011780 <__hexnan+0xa0>
 8011772:	2d07      	cmp	r5, #7
 8011774:	dc04      	bgt.n	8011780 <__hexnan+0xa0>
 8011776:	462a      	mov	r2, r5
 8011778:	4649      	mov	r1, r9
 801177a:	4620      	mov	r0, r4
 801177c:	f7ff ff8a 	bl	8011694 <L_shift>
 8011780:	4544      	cmp	r4, r8
 8011782:	d934      	bls.n	80117ee <__hexnan+0x10e>
 8011784:	f1a8 0204 	sub.w	r2, r8, #4
 8011788:	4623      	mov	r3, r4
 801178a:	f853 1b04 	ldr.w	r1, [r3], #4
 801178e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011792:	429f      	cmp	r7, r3
 8011794:	d2f9      	bcs.n	801178a <__hexnan+0xaa>
 8011796:	1b3b      	subs	r3, r7, r4
 8011798:	f023 0303 	bic.w	r3, r3, #3
 801179c:	3304      	adds	r3, #4
 801179e:	3401      	adds	r4, #1
 80117a0:	3e03      	subs	r6, #3
 80117a2:	42b4      	cmp	r4, r6
 80117a4:	bf88      	it	hi
 80117a6:	2304      	movhi	r3, #4
 80117a8:	4443      	add	r3, r8
 80117aa:	2200      	movs	r2, #0
 80117ac:	f843 2b04 	str.w	r2, [r3], #4
 80117b0:	429f      	cmp	r7, r3
 80117b2:	d2fb      	bcs.n	80117ac <__hexnan+0xcc>
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	b91b      	cbnz	r3, 80117c0 <__hexnan+0xe0>
 80117b8:	4547      	cmp	r7, r8
 80117ba:	d127      	bne.n	801180c <__hexnan+0x12c>
 80117bc:	2301      	movs	r3, #1
 80117be:	603b      	str	r3, [r7, #0]
 80117c0:	2005      	movs	r0, #5
 80117c2:	e026      	b.n	8011812 <__hexnan+0x132>
 80117c4:	3501      	adds	r5, #1
 80117c6:	2d08      	cmp	r5, #8
 80117c8:	f10b 0b01 	add.w	fp, fp, #1
 80117cc:	dd06      	ble.n	80117dc <__hexnan+0xfc>
 80117ce:	4544      	cmp	r4, r8
 80117d0:	d9c3      	bls.n	801175a <__hexnan+0x7a>
 80117d2:	2300      	movs	r3, #0
 80117d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80117d8:	2501      	movs	r5, #1
 80117da:	3c04      	subs	r4, #4
 80117dc:	6822      	ldr	r2, [r4, #0]
 80117de:	f000 000f 	and.w	r0, r0, #15
 80117e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80117e6:	6022      	str	r2, [r4, #0]
 80117e8:	e7b7      	b.n	801175a <__hexnan+0x7a>
 80117ea:	2508      	movs	r5, #8
 80117ec:	e7b5      	b.n	801175a <__hexnan+0x7a>
 80117ee:	9b01      	ldr	r3, [sp, #4]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d0df      	beq.n	80117b4 <__hexnan+0xd4>
 80117f4:	f04f 32ff 	mov.w	r2, #4294967295
 80117f8:	f1c3 0320 	rsb	r3, r3, #32
 80117fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011800:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011804:	401a      	ands	r2, r3
 8011806:	f846 2c04 	str.w	r2, [r6, #-4]
 801180a:	e7d3      	b.n	80117b4 <__hexnan+0xd4>
 801180c:	3f04      	subs	r7, #4
 801180e:	e7d1      	b.n	80117b4 <__hexnan+0xd4>
 8011810:	2004      	movs	r0, #4
 8011812:	b007      	add	sp, #28
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011818 <_localeconv_r>:
 8011818:	4800      	ldr	r0, [pc, #0]	; (801181c <_localeconv_r+0x4>)
 801181a:	4770      	bx	lr
 801181c:	2000036c 	.word	0x2000036c

08011820 <_lseek_r>:
 8011820:	b538      	push	{r3, r4, r5, lr}
 8011822:	4d07      	ldr	r5, [pc, #28]	; (8011840 <_lseek_r+0x20>)
 8011824:	4604      	mov	r4, r0
 8011826:	4608      	mov	r0, r1
 8011828:	4611      	mov	r1, r2
 801182a:	2200      	movs	r2, #0
 801182c:	602a      	str	r2, [r5, #0]
 801182e:	461a      	mov	r2, r3
 8011830:	f7f0 f9da 	bl	8001be8 <_lseek>
 8011834:	1c43      	adds	r3, r0, #1
 8011836:	d102      	bne.n	801183e <_lseek_r+0x1e>
 8011838:	682b      	ldr	r3, [r5, #0]
 801183a:	b103      	cbz	r3, 801183e <_lseek_r+0x1e>
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	bd38      	pop	{r3, r4, r5, pc}
 8011840:	200063ec 	.word	0x200063ec

08011844 <malloc>:
 8011844:	4b02      	ldr	r3, [pc, #8]	; (8011850 <malloc+0xc>)
 8011846:	4601      	mov	r1, r0
 8011848:	6818      	ldr	r0, [r3, #0]
 801184a:	f7fc be95 	b.w	800e578 <_malloc_r>
 801184e:	bf00      	nop
 8011850:	20000214 	.word	0x20000214

08011854 <__ascii_mbtowc>:
 8011854:	b082      	sub	sp, #8
 8011856:	b901      	cbnz	r1, 801185a <__ascii_mbtowc+0x6>
 8011858:	a901      	add	r1, sp, #4
 801185a:	b142      	cbz	r2, 801186e <__ascii_mbtowc+0x1a>
 801185c:	b14b      	cbz	r3, 8011872 <__ascii_mbtowc+0x1e>
 801185e:	7813      	ldrb	r3, [r2, #0]
 8011860:	600b      	str	r3, [r1, #0]
 8011862:	7812      	ldrb	r2, [r2, #0]
 8011864:	1e10      	subs	r0, r2, #0
 8011866:	bf18      	it	ne
 8011868:	2001      	movne	r0, #1
 801186a:	b002      	add	sp, #8
 801186c:	4770      	bx	lr
 801186e:	4610      	mov	r0, r2
 8011870:	e7fb      	b.n	801186a <__ascii_mbtowc+0x16>
 8011872:	f06f 0001 	mvn.w	r0, #1
 8011876:	e7f8      	b.n	801186a <__ascii_mbtowc+0x16>

08011878 <__malloc_lock>:
 8011878:	4801      	ldr	r0, [pc, #4]	; (8011880 <__malloc_lock+0x8>)
 801187a:	f7fc be44 	b.w	800e506 <__retarget_lock_acquire_recursive>
 801187e:	bf00      	nop
 8011880:	200063e0 	.word	0x200063e0

08011884 <__malloc_unlock>:
 8011884:	4801      	ldr	r0, [pc, #4]	; (801188c <__malloc_unlock+0x8>)
 8011886:	f7fc be3f 	b.w	800e508 <__retarget_lock_release_recursive>
 801188a:	bf00      	nop
 801188c:	200063e0 	.word	0x200063e0

08011890 <_Balloc>:
 8011890:	b570      	push	{r4, r5, r6, lr}
 8011892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011894:	4604      	mov	r4, r0
 8011896:	460d      	mov	r5, r1
 8011898:	b976      	cbnz	r6, 80118b8 <_Balloc+0x28>
 801189a:	2010      	movs	r0, #16
 801189c:	f7ff ffd2 	bl	8011844 <malloc>
 80118a0:	4602      	mov	r2, r0
 80118a2:	6260      	str	r0, [r4, #36]	; 0x24
 80118a4:	b920      	cbnz	r0, 80118b0 <_Balloc+0x20>
 80118a6:	4b18      	ldr	r3, [pc, #96]	; (8011908 <_Balloc+0x78>)
 80118a8:	4818      	ldr	r0, [pc, #96]	; (801190c <_Balloc+0x7c>)
 80118aa:	2166      	movs	r1, #102	; 0x66
 80118ac:	f000 feae 	bl	801260c <__assert_func>
 80118b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118b4:	6006      	str	r6, [r0, #0]
 80118b6:	60c6      	str	r6, [r0, #12]
 80118b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80118ba:	68f3      	ldr	r3, [r6, #12]
 80118bc:	b183      	cbz	r3, 80118e0 <_Balloc+0x50>
 80118be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118c6:	b9b8      	cbnz	r0, 80118f8 <_Balloc+0x68>
 80118c8:	2101      	movs	r1, #1
 80118ca:	fa01 f605 	lsl.w	r6, r1, r5
 80118ce:	1d72      	adds	r2, r6, #5
 80118d0:	0092      	lsls	r2, r2, #2
 80118d2:	4620      	mov	r0, r4
 80118d4:	f000 fc9d 	bl	8012212 <_calloc_r>
 80118d8:	b160      	cbz	r0, 80118f4 <_Balloc+0x64>
 80118da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80118de:	e00e      	b.n	80118fe <_Balloc+0x6e>
 80118e0:	2221      	movs	r2, #33	; 0x21
 80118e2:	2104      	movs	r1, #4
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 fc94 	bl	8012212 <_calloc_r>
 80118ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118ec:	60f0      	str	r0, [r6, #12]
 80118ee:	68db      	ldr	r3, [r3, #12]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1e4      	bne.n	80118be <_Balloc+0x2e>
 80118f4:	2000      	movs	r0, #0
 80118f6:	bd70      	pop	{r4, r5, r6, pc}
 80118f8:	6802      	ldr	r2, [r0, #0]
 80118fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118fe:	2300      	movs	r3, #0
 8011900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011904:	e7f7      	b.n	80118f6 <_Balloc+0x66>
 8011906:	bf00      	nop
 8011908:	080159d6 	.word	0x080159d6
 801190c:	08015ad4 	.word	0x08015ad4

08011910 <_Bfree>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011914:	4605      	mov	r5, r0
 8011916:	460c      	mov	r4, r1
 8011918:	b976      	cbnz	r6, 8011938 <_Bfree+0x28>
 801191a:	2010      	movs	r0, #16
 801191c:	f7ff ff92 	bl	8011844 <malloc>
 8011920:	4602      	mov	r2, r0
 8011922:	6268      	str	r0, [r5, #36]	; 0x24
 8011924:	b920      	cbnz	r0, 8011930 <_Bfree+0x20>
 8011926:	4b09      	ldr	r3, [pc, #36]	; (801194c <_Bfree+0x3c>)
 8011928:	4809      	ldr	r0, [pc, #36]	; (8011950 <_Bfree+0x40>)
 801192a:	218a      	movs	r1, #138	; 0x8a
 801192c:	f000 fe6e 	bl	801260c <__assert_func>
 8011930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011934:	6006      	str	r6, [r0, #0]
 8011936:	60c6      	str	r6, [r0, #12]
 8011938:	b13c      	cbz	r4, 801194a <_Bfree+0x3a>
 801193a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801193c:	6862      	ldr	r2, [r4, #4]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011944:	6021      	str	r1, [r4, #0]
 8011946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801194a:	bd70      	pop	{r4, r5, r6, pc}
 801194c:	080159d6 	.word	0x080159d6
 8011950:	08015ad4 	.word	0x08015ad4

08011954 <__multadd>:
 8011954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011958:	690d      	ldr	r5, [r1, #16]
 801195a:	4607      	mov	r7, r0
 801195c:	460c      	mov	r4, r1
 801195e:	461e      	mov	r6, r3
 8011960:	f101 0c14 	add.w	ip, r1, #20
 8011964:	2000      	movs	r0, #0
 8011966:	f8dc 3000 	ldr.w	r3, [ip]
 801196a:	b299      	uxth	r1, r3
 801196c:	fb02 6101 	mla	r1, r2, r1, r6
 8011970:	0c1e      	lsrs	r6, r3, #16
 8011972:	0c0b      	lsrs	r3, r1, #16
 8011974:	fb02 3306 	mla	r3, r2, r6, r3
 8011978:	b289      	uxth	r1, r1
 801197a:	3001      	adds	r0, #1
 801197c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011980:	4285      	cmp	r5, r0
 8011982:	f84c 1b04 	str.w	r1, [ip], #4
 8011986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801198a:	dcec      	bgt.n	8011966 <__multadd+0x12>
 801198c:	b30e      	cbz	r6, 80119d2 <__multadd+0x7e>
 801198e:	68a3      	ldr	r3, [r4, #8]
 8011990:	42ab      	cmp	r3, r5
 8011992:	dc19      	bgt.n	80119c8 <__multadd+0x74>
 8011994:	6861      	ldr	r1, [r4, #4]
 8011996:	4638      	mov	r0, r7
 8011998:	3101      	adds	r1, #1
 801199a:	f7ff ff79 	bl	8011890 <_Balloc>
 801199e:	4680      	mov	r8, r0
 80119a0:	b928      	cbnz	r0, 80119ae <__multadd+0x5a>
 80119a2:	4602      	mov	r2, r0
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <__multadd+0x84>)
 80119a6:	480d      	ldr	r0, [pc, #52]	; (80119dc <__multadd+0x88>)
 80119a8:	21b5      	movs	r1, #181	; 0xb5
 80119aa:	f000 fe2f 	bl	801260c <__assert_func>
 80119ae:	6922      	ldr	r2, [r4, #16]
 80119b0:	3202      	adds	r2, #2
 80119b2:	f104 010c 	add.w	r1, r4, #12
 80119b6:	0092      	lsls	r2, r2, #2
 80119b8:	300c      	adds	r0, #12
 80119ba:	f7fc fda6 	bl	800e50a <memcpy>
 80119be:	4621      	mov	r1, r4
 80119c0:	4638      	mov	r0, r7
 80119c2:	f7ff ffa5 	bl	8011910 <_Bfree>
 80119c6:	4644      	mov	r4, r8
 80119c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119cc:	3501      	adds	r5, #1
 80119ce:	615e      	str	r6, [r3, #20]
 80119d0:	6125      	str	r5, [r4, #16]
 80119d2:	4620      	mov	r0, r4
 80119d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d8:	08015a48 	.word	0x08015a48
 80119dc:	08015ad4 	.word	0x08015ad4

080119e0 <__s2b>:
 80119e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e4:	460c      	mov	r4, r1
 80119e6:	4615      	mov	r5, r2
 80119e8:	461f      	mov	r7, r3
 80119ea:	2209      	movs	r2, #9
 80119ec:	3308      	adds	r3, #8
 80119ee:	4606      	mov	r6, r0
 80119f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80119f4:	2100      	movs	r1, #0
 80119f6:	2201      	movs	r2, #1
 80119f8:	429a      	cmp	r2, r3
 80119fa:	db09      	blt.n	8011a10 <__s2b+0x30>
 80119fc:	4630      	mov	r0, r6
 80119fe:	f7ff ff47 	bl	8011890 <_Balloc>
 8011a02:	b940      	cbnz	r0, 8011a16 <__s2b+0x36>
 8011a04:	4602      	mov	r2, r0
 8011a06:	4b19      	ldr	r3, [pc, #100]	; (8011a6c <__s2b+0x8c>)
 8011a08:	4819      	ldr	r0, [pc, #100]	; (8011a70 <__s2b+0x90>)
 8011a0a:	21ce      	movs	r1, #206	; 0xce
 8011a0c:	f000 fdfe 	bl	801260c <__assert_func>
 8011a10:	0052      	lsls	r2, r2, #1
 8011a12:	3101      	adds	r1, #1
 8011a14:	e7f0      	b.n	80119f8 <__s2b+0x18>
 8011a16:	9b08      	ldr	r3, [sp, #32]
 8011a18:	6143      	str	r3, [r0, #20]
 8011a1a:	2d09      	cmp	r5, #9
 8011a1c:	f04f 0301 	mov.w	r3, #1
 8011a20:	6103      	str	r3, [r0, #16]
 8011a22:	dd16      	ble.n	8011a52 <__s2b+0x72>
 8011a24:	f104 0909 	add.w	r9, r4, #9
 8011a28:	46c8      	mov	r8, r9
 8011a2a:	442c      	add	r4, r5
 8011a2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a30:	4601      	mov	r1, r0
 8011a32:	3b30      	subs	r3, #48	; 0x30
 8011a34:	220a      	movs	r2, #10
 8011a36:	4630      	mov	r0, r6
 8011a38:	f7ff ff8c 	bl	8011954 <__multadd>
 8011a3c:	45a0      	cmp	r8, r4
 8011a3e:	d1f5      	bne.n	8011a2c <__s2b+0x4c>
 8011a40:	f1a5 0408 	sub.w	r4, r5, #8
 8011a44:	444c      	add	r4, r9
 8011a46:	1b2d      	subs	r5, r5, r4
 8011a48:	1963      	adds	r3, r4, r5
 8011a4a:	42bb      	cmp	r3, r7
 8011a4c:	db04      	blt.n	8011a58 <__s2b+0x78>
 8011a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a52:	340a      	adds	r4, #10
 8011a54:	2509      	movs	r5, #9
 8011a56:	e7f6      	b.n	8011a46 <__s2b+0x66>
 8011a58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a5c:	4601      	mov	r1, r0
 8011a5e:	3b30      	subs	r3, #48	; 0x30
 8011a60:	220a      	movs	r2, #10
 8011a62:	4630      	mov	r0, r6
 8011a64:	f7ff ff76 	bl	8011954 <__multadd>
 8011a68:	e7ee      	b.n	8011a48 <__s2b+0x68>
 8011a6a:	bf00      	nop
 8011a6c:	08015a48 	.word	0x08015a48
 8011a70:	08015ad4 	.word	0x08015ad4

08011a74 <__hi0bits>:
 8011a74:	0c03      	lsrs	r3, r0, #16
 8011a76:	041b      	lsls	r3, r3, #16
 8011a78:	b9d3      	cbnz	r3, 8011ab0 <__hi0bits+0x3c>
 8011a7a:	0400      	lsls	r0, r0, #16
 8011a7c:	2310      	movs	r3, #16
 8011a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a82:	bf04      	itt	eq
 8011a84:	0200      	lsleq	r0, r0, #8
 8011a86:	3308      	addeq	r3, #8
 8011a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a8c:	bf04      	itt	eq
 8011a8e:	0100      	lsleq	r0, r0, #4
 8011a90:	3304      	addeq	r3, #4
 8011a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a96:	bf04      	itt	eq
 8011a98:	0080      	lsleq	r0, r0, #2
 8011a9a:	3302      	addeq	r3, #2
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	db05      	blt.n	8011aac <__hi0bits+0x38>
 8011aa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011aa4:	f103 0301 	add.w	r3, r3, #1
 8011aa8:	bf08      	it	eq
 8011aaa:	2320      	moveq	r3, #32
 8011aac:	4618      	mov	r0, r3
 8011aae:	4770      	bx	lr
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	e7e4      	b.n	8011a7e <__hi0bits+0xa>

08011ab4 <__lo0bits>:
 8011ab4:	6803      	ldr	r3, [r0, #0]
 8011ab6:	f013 0207 	ands.w	r2, r3, #7
 8011aba:	4601      	mov	r1, r0
 8011abc:	d00b      	beq.n	8011ad6 <__lo0bits+0x22>
 8011abe:	07da      	lsls	r2, r3, #31
 8011ac0:	d423      	bmi.n	8011b0a <__lo0bits+0x56>
 8011ac2:	0798      	lsls	r0, r3, #30
 8011ac4:	bf49      	itett	mi
 8011ac6:	085b      	lsrmi	r3, r3, #1
 8011ac8:	089b      	lsrpl	r3, r3, #2
 8011aca:	2001      	movmi	r0, #1
 8011acc:	600b      	strmi	r3, [r1, #0]
 8011ace:	bf5c      	itt	pl
 8011ad0:	600b      	strpl	r3, [r1, #0]
 8011ad2:	2002      	movpl	r0, #2
 8011ad4:	4770      	bx	lr
 8011ad6:	b298      	uxth	r0, r3
 8011ad8:	b9a8      	cbnz	r0, 8011b06 <__lo0bits+0x52>
 8011ada:	0c1b      	lsrs	r3, r3, #16
 8011adc:	2010      	movs	r0, #16
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	b90a      	cbnz	r2, 8011ae6 <__lo0bits+0x32>
 8011ae2:	3008      	adds	r0, #8
 8011ae4:	0a1b      	lsrs	r3, r3, #8
 8011ae6:	071a      	lsls	r2, r3, #28
 8011ae8:	bf04      	itt	eq
 8011aea:	091b      	lsreq	r3, r3, #4
 8011aec:	3004      	addeq	r0, #4
 8011aee:	079a      	lsls	r2, r3, #30
 8011af0:	bf04      	itt	eq
 8011af2:	089b      	lsreq	r3, r3, #2
 8011af4:	3002      	addeq	r0, #2
 8011af6:	07da      	lsls	r2, r3, #31
 8011af8:	d403      	bmi.n	8011b02 <__lo0bits+0x4e>
 8011afa:	085b      	lsrs	r3, r3, #1
 8011afc:	f100 0001 	add.w	r0, r0, #1
 8011b00:	d005      	beq.n	8011b0e <__lo0bits+0x5a>
 8011b02:	600b      	str	r3, [r1, #0]
 8011b04:	4770      	bx	lr
 8011b06:	4610      	mov	r0, r2
 8011b08:	e7e9      	b.n	8011ade <__lo0bits+0x2a>
 8011b0a:	2000      	movs	r0, #0
 8011b0c:	4770      	bx	lr
 8011b0e:	2020      	movs	r0, #32
 8011b10:	4770      	bx	lr
	...

08011b14 <__i2b>:
 8011b14:	b510      	push	{r4, lr}
 8011b16:	460c      	mov	r4, r1
 8011b18:	2101      	movs	r1, #1
 8011b1a:	f7ff feb9 	bl	8011890 <_Balloc>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	b928      	cbnz	r0, 8011b2e <__i2b+0x1a>
 8011b22:	4b05      	ldr	r3, [pc, #20]	; (8011b38 <__i2b+0x24>)
 8011b24:	4805      	ldr	r0, [pc, #20]	; (8011b3c <__i2b+0x28>)
 8011b26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011b2a:	f000 fd6f 	bl	801260c <__assert_func>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	6144      	str	r4, [r0, #20]
 8011b32:	6103      	str	r3, [r0, #16]
 8011b34:	bd10      	pop	{r4, pc}
 8011b36:	bf00      	nop
 8011b38:	08015a48 	.word	0x08015a48
 8011b3c:	08015ad4 	.word	0x08015ad4

08011b40 <__multiply>:
 8011b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b44:	4691      	mov	r9, r2
 8011b46:	690a      	ldr	r2, [r1, #16]
 8011b48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	bfb8      	it	lt
 8011b50:	460b      	movlt	r3, r1
 8011b52:	460c      	mov	r4, r1
 8011b54:	bfbc      	itt	lt
 8011b56:	464c      	movlt	r4, r9
 8011b58:	4699      	movlt	r9, r3
 8011b5a:	6927      	ldr	r7, [r4, #16]
 8011b5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011b60:	68a3      	ldr	r3, [r4, #8]
 8011b62:	6861      	ldr	r1, [r4, #4]
 8011b64:	eb07 060a 	add.w	r6, r7, sl
 8011b68:	42b3      	cmp	r3, r6
 8011b6a:	b085      	sub	sp, #20
 8011b6c:	bfb8      	it	lt
 8011b6e:	3101      	addlt	r1, #1
 8011b70:	f7ff fe8e 	bl	8011890 <_Balloc>
 8011b74:	b930      	cbnz	r0, 8011b84 <__multiply+0x44>
 8011b76:	4602      	mov	r2, r0
 8011b78:	4b44      	ldr	r3, [pc, #272]	; (8011c8c <__multiply+0x14c>)
 8011b7a:	4845      	ldr	r0, [pc, #276]	; (8011c90 <__multiply+0x150>)
 8011b7c:	f240 115d 	movw	r1, #349	; 0x15d
 8011b80:	f000 fd44 	bl	801260c <__assert_func>
 8011b84:	f100 0514 	add.w	r5, r0, #20
 8011b88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b8c:	462b      	mov	r3, r5
 8011b8e:	2200      	movs	r2, #0
 8011b90:	4543      	cmp	r3, r8
 8011b92:	d321      	bcc.n	8011bd8 <__multiply+0x98>
 8011b94:	f104 0314 	add.w	r3, r4, #20
 8011b98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b9c:	f109 0314 	add.w	r3, r9, #20
 8011ba0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011ba4:	9202      	str	r2, [sp, #8]
 8011ba6:	1b3a      	subs	r2, r7, r4
 8011ba8:	3a15      	subs	r2, #21
 8011baa:	f022 0203 	bic.w	r2, r2, #3
 8011bae:	3204      	adds	r2, #4
 8011bb0:	f104 0115 	add.w	r1, r4, #21
 8011bb4:	428f      	cmp	r7, r1
 8011bb6:	bf38      	it	cc
 8011bb8:	2204      	movcc	r2, #4
 8011bba:	9201      	str	r2, [sp, #4]
 8011bbc:	9a02      	ldr	r2, [sp, #8]
 8011bbe:	9303      	str	r3, [sp, #12]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d80c      	bhi.n	8011bde <__multiply+0x9e>
 8011bc4:	2e00      	cmp	r6, #0
 8011bc6:	dd03      	ble.n	8011bd0 <__multiply+0x90>
 8011bc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d05a      	beq.n	8011c86 <__multiply+0x146>
 8011bd0:	6106      	str	r6, [r0, #16]
 8011bd2:	b005      	add	sp, #20
 8011bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd8:	f843 2b04 	str.w	r2, [r3], #4
 8011bdc:	e7d8      	b.n	8011b90 <__multiply+0x50>
 8011bde:	f8b3 a000 	ldrh.w	sl, [r3]
 8011be2:	f1ba 0f00 	cmp.w	sl, #0
 8011be6:	d024      	beq.n	8011c32 <__multiply+0xf2>
 8011be8:	f104 0e14 	add.w	lr, r4, #20
 8011bec:	46a9      	mov	r9, r5
 8011bee:	f04f 0c00 	mov.w	ip, #0
 8011bf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011bf6:	f8d9 1000 	ldr.w	r1, [r9]
 8011bfa:	fa1f fb82 	uxth.w	fp, r2
 8011bfe:	b289      	uxth	r1, r1
 8011c00:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c08:	f8d9 2000 	ldr.w	r2, [r9]
 8011c0c:	4461      	add	r1, ip
 8011c0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c12:	fb0a c20b 	mla	r2, sl, fp, ip
 8011c16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011c1a:	b289      	uxth	r1, r1
 8011c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c20:	4577      	cmp	r7, lr
 8011c22:	f849 1b04 	str.w	r1, [r9], #4
 8011c26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c2a:	d8e2      	bhi.n	8011bf2 <__multiply+0xb2>
 8011c2c:	9a01      	ldr	r2, [sp, #4]
 8011c2e:	f845 c002 	str.w	ip, [r5, r2]
 8011c32:	9a03      	ldr	r2, [sp, #12]
 8011c34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011c38:	3304      	adds	r3, #4
 8011c3a:	f1b9 0f00 	cmp.w	r9, #0
 8011c3e:	d020      	beq.n	8011c82 <__multiply+0x142>
 8011c40:	6829      	ldr	r1, [r5, #0]
 8011c42:	f104 0c14 	add.w	ip, r4, #20
 8011c46:	46ae      	mov	lr, r5
 8011c48:	f04f 0a00 	mov.w	sl, #0
 8011c4c:	f8bc b000 	ldrh.w	fp, [ip]
 8011c50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011c54:	fb09 220b 	mla	r2, r9, fp, r2
 8011c58:	4492      	add	sl, r2
 8011c5a:	b289      	uxth	r1, r1
 8011c5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011c60:	f84e 1b04 	str.w	r1, [lr], #4
 8011c64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011c68:	f8be 1000 	ldrh.w	r1, [lr]
 8011c6c:	0c12      	lsrs	r2, r2, #16
 8011c6e:	fb09 1102 	mla	r1, r9, r2, r1
 8011c72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011c76:	4567      	cmp	r7, ip
 8011c78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c7c:	d8e6      	bhi.n	8011c4c <__multiply+0x10c>
 8011c7e:	9a01      	ldr	r2, [sp, #4]
 8011c80:	50a9      	str	r1, [r5, r2]
 8011c82:	3504      	adds	r5, #4
 8011c84:	e79a      	b.n	8011bbc <__multiply+0x7c>
 8011c86:	3e01      	subs	r6, #1
 8011c88:	e79c      	b.n	8011bc4 <__multiply+0x84>
 8011c8a:	bf00      	nop
 8011c8c:	08015a48 	.word	0x08015a48
 8011c90:	08015ad4 	.word	0x08015ad4

08011c94 <__pow5mult>:
 8011c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c98:	4615      	mov	r5, r2
 8011c9a:	f012 0203 	ands.w	r2, r2, #3
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	460f      	mov	r7, r1
 8011ca2:	d007      	beq.n	8011cb4 <__pow5mult+0x20>
 8011ca4:	4c25      	ldr	r4, [pc, #148]	; (8011d3c <__pow5mult+0xa8>)
 8011ca6:	3a01      	subs	r2, #1
 8011ca8:	2300      	movs	r3, #0
 8011caa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011cae:	f7ff fe51 	bl	8011954 <__multadd>
 8011cb2:	4607      	mov	r7, r0
 8011cb4:	10ad      	asrs	r5, r5, #2
 8011cb6:	d03d      	beq.n	8011d34 <__pow5mult+0xa0>
 8011cb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011cba:	b97c      	cbnz	r4, 8011cdc <__pow5mult+0x48>
 8011cbc:	2010      	movs	r0, #16
 8011cbe:	f7ff fdc1 	bl	8011844 <malloc>
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8011cc6:	b928      	cbnz	r0, 8011cd4 <__pow5mult+0x40>
 8011cc8:	4b1d      	ldr	r3, [pc, #116]	; (8011d40 <__pow5mult+0xac>)
 8011cca:	481e      	ldr	r0, [pc, #120]	; (8011d44 <__pow5mult+0xb0>)
 8011ccc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011cd0:	f000 fc9c 	bl	801260c <__assert_func>
 8011cd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011cd8:	6004      	str	r4, [r0, #0]
 8011cda:	60c4      	str	r4, [r0, #12]
 8011cdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011ce0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011ce4:	b94c      	cbnz	r4, 8011cfa <__pow5mult+0x66>
 8011ce6:	f240 2171 	movw	r1, #625	; 0x271
 8011cea:	4630      	mov	r0, r6
 8011cec:	f7ff ff12 	bl	8011b14 <__i2b>
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	f04f 0900 	mov.w	r9, #0
 8011cfe:	07eb      	lsls	r3, r5, #31
 8011d00:	d50a      	bpl.n	8011d18 <__pow5mult+0x84>
 8011d02:	4639      	mov	r1, r7
 8011d04:	4622      	mov	r2, r4
 8011d06:	4630      	mov	r0, r6
 8011d08:	f7ff ff1a 	bl	8011b40 <__multiply>
 8011d0c:	4639      	mov	r1, r7
 8011d0e:	4680      	mov	r8, r0
 8011d10:	4630      	mov	r0, r6
 8011d12:	f7ff fdfd 	bl	8011910 <_Bfree>
 8011d16:	4647      	mov	r7, r8
 8011d18:	106d      	asrs	r5, r5, #1
 8011d1a:	d00b      	beq.n	8011d34 <__pow5mult+0xa0>
 8011d1c:	6820      	ldr	r0, [r4, #0]
 8011d1e:	b938      	cbnz	r0, 8011d30 <__pow5mult+0x9c>
 8011d20:	4622      	mov	r2, r4
 8011d22:	4621      	mov	r1, r4
 8011d24:	4630      	mov	r0, r6
 8011d26:	f7ff ff0b 	bl	8011b40 <__multiply>
 8011d2a:	6020      	str	r0, [r4, #0]
 8011d2c:	f8c0 9000 	str.w	r9, [r0]
 8011d30:	4604      	mov	r4, r0
 8011d32:	e7e4      	b.n	8011cfe <__pow5mult+0x6a>
 8011d34:	4638      	mov	r0, r7
 8011d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d3a:	bf00      	nop
 8011d3c:	08015c20 	.word	0x08015c20
 8011d40:	080159d6 	.word	0x080159d6
 8011d44:	08015ad4 	.word	0x08015ad4

08011d48 <__lshift>:
 8011d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d4c:	460c      	mov	r4, r1
 8011d4e:	6849      	ldr	r1, [r1, #4]
 8011d50:	6923      	ldr	r3, [r4, #16]
 8011d52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d56:	68a3      	ldr	r3, [r4, #8]
 8011d58:	4607      	mov	r7, r0
 8011d5a:	4691      	mov	r9, r2
 8011d5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d60:	f108 0601 	add.w	r6, r8, #1
 8011d64:	42b3      	cmp	r3, r6
 8011d66:	db0b      	blt.n	8011d80 <__lshift+0x38>
 8011d68:	4638      	mov	r0, r7
 8011d6a:	f7ff fd91 	bl	8011890 <_Balloc>
 8011d6e:	4605      	mov	r5, r0
 8011d70:	b948      	cbnz	r0, 8011d86 <__lshift+0x3e>
 8011d72:	4602      	mov	r2, r0
 8011d74:	4b2a      	ldr	r3, [pc, #168]	; (8011e20 <__lshift+0xd8>)
 8011d76:	482b      	ldr	r0, [pc, #172]	; (8011e24 <__lshift+0xdc>)
 8011d78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011d7c:	f000 fc46 	bl	801260c <__assert_func>
 8011d80:	3101      	adds	r1, #1
 8011d82:	005b      	lsls	r3, r3, #1
 8011d84:	e7ee      	b.n	8011d64 <__lshift+0x1c>
 8011d86:	2300      	movs	r3, #0
 8011d88:	f100 0114 	add.w	r1, r0, #20
 8011d8c:	f100 0210 	add.w	r2, r0, #16
 8011d90:	4618      	mov	r0, r3
 8011d92:	4553      	cmp	r3, sl
 8011d94:	db37      	blt.n	8011e06 <__lshift+0xbe>
 8011d96:	6920      	ldr	r0, [r4, #16]
 8011d98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d9c:	f104 0314 	add.w	r3, r4, #20
 8011da0:	f019 091f 	ands.w	r9, r9, #31
 8011da4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011da8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011dac:	d02f      	beq.n	8011e0e <__lshift+0xc6>
 8011dae:	f1c9 0e20 	rsb	lr, r9, #32
 8011db2:	468a      	mov	sl, r1
 8011db4:	f04f 0c00 	mov.w	ip, #0
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	fa02 f209 	lsl.w	r2, r2, r9
 8011dbe:	ea42 020c 	orr.w	r2, r2, ip
 8011dc2:	f84a 2b04 	str.w	r2, [sl], #4
 8011dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dca:	4298      	cmp	r0, r3
 8011dcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011dd0:	d8f2      	bhi.n	8011db8 <__lshift+0x70>
 8011dd2:	1b03      	subs	r3, r0, r4
 8011dd4:	3b15      	subs	r3, #21
 8011dd6:	f023 0303 	bic.w	r3, r3, #3
 8011dda:	3304      	adds	r3, #4
 8011ddc:	f104 0215 	add.w	r2, r4, #21
 8011de0:	4290      	cmp	r0, r2
 8011de2:	bf38      	it	cc
 8011de4:	2304      	movcc	r3, #4
 8011de6:	f841 c003 	str.w	ip, [r1, r3]
 8011dea:	f1bc 0f00 	cmp.w	ip, #0
 8011dee:	d001      	beq.n	8011df4 <__lshift+0xac>
 8011df0:	f108 0602 	add.w	r6, r8, #2
 8011df4:	3e01      	subs	r6, #1
 8011df6:	4638      	mov	r0, r7
 8011df8:	612e      	str	r6, [r5, #16]
 8011dfa:	4621      	mov	r1, r4
 8011dfc:	f7ff fd88 	bl	8011910 <_Bfree>
 8011e00:	4628      	mov	r0, r5
 8011e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	e7c1      	b.n	8011d92 <__lshift+0x4a>
 8011e0e:	3904      	subs	r1, #4
 8011e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e14:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e18:	4298      	cmp	r0, r3
 8011e1a:	d8f9      	bhi.n	8011e10 <__lshift+0xc8>
 8011e1c:	e7ea      	b.n	8011df4 <__lshift+0xac>
 8011e1e:	bf00      	nop
 8011e20:	08015a48 	.word	0x08015a48
 8011e24:	08015ad4 	.word	0x08015ad4

08011e28 <__mcmp>:
 8011e28:	b530      	push	{r4, r5, lr}
 8011e2a:	6902      	ldr	r2, [r0, #16]
 8011e2c:	690c      	ldr	r4, [r1, #16]
 8011e2e:	1b12      	subs	r2, r2, r4
 8011e30:	d10e      	bne.n	8011e50 <__mcmp+0x28>
 8011e32:	f100 0314 	add.w	r3, r0, #20
 8011e36:	3114      	adds	r1, #20
 8011e38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011e3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011e40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011e44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011e48:	42a5      	cmp	r5, r4
 8011e4a:	d003      	beq.n	8011e54 <__mcmp+0x2c>
 8011e4c:	d305      	bcc.n	8011e5a <__mcmp+0x32>
 8011e4e:	2201      	movs	r2, #1
 8011e50:	4610      	mov	r0, r2
 8011e52:	bd30      	pop	{r4, r5, pc}
 8011e54:	4283      	cmp	r3, r0
 8011e56:	d3f3      	bcc.n	8011e40 <__mcmp+0x18>
 8011e58:	e7fa      	b.n	8011e50 <__mcmp+0x28>
 8011e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5e:	e7f7      	b.n	8011e50 <__mcmp+0x28>

08011e60 <__mdiff>:
 8011e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	460c      	mov	r4, r1
 8011e66:	4606      	mov	r6, r0
 8011e68:	4611      	mov	r1, r2
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	4690      	mov	r8, r2
 8011e6e:	f7ff ffdb 	bl	8011e28 <__mcmp>
 8011e72:	1e05      	subs	r5, r0, #0
 8011e74:	d110      	bne.n	8011e98 <__mdiff+0x38>
 8011e76:	4629      	mov	r1, r5
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f7ff fd09 	bl	8011890 <_Balloc>
 8011e7e:	b930      	cbnz	r0, 8011e8e <__mdiff+0x2e>
 8011e80:	4b3a      	ldr	r3, [pc, #232]	; (8011f6c <__mdiff+0x10c>)
 8011e82:	4602      	mov	r2, r0
 8011e84:	f240 2132 	movw	r1, #562	; 0x232
 8011e88:	4839      	ldr	r0, [pc, #228]	; (8011f70 <__mdiff+0x110>)
 8011e8a:	f000 fbbf 	bl	801260c <__assert_func>
 8011e8e:	2301      	movs	r3, #1
 8011e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e98:	bfa4      	itt	ge
 8011e9a:	4643      	movge	r3, r8
 8011e9c:	46a0      	movge	r8, r4
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ea4:	bfa6      	itte	ge
 8011ea6:	461c      	movge	r4, r3
 8011ea8:	2500      	movge	r5, #0
 8011eaa:	2501      	movlt	r5, #1
 8011eac:	f7ff fcf0 	bl	8011890 <_Balloc>
 8011eb0:	b920      	cbnz	r0, 8011ebc <__mdiff+0x5c>
 8011eb2:	4b2e      	ldr	r3, [pc, #184]	; (8011f6c <__mdiff+0x10c>)
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011eba:	e7e5      	b.n	8011e88 <__mdiff+0x28>
 8011ebc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011ec0:	6926      	ldr	r6, [r4, #16]
 8011ec2:	60c5      	str	r5, [r0, #12]
 8011ec4:	f104 0914 	add.w	r9, r4, #20
 8011ec8:	f108 0514 	add.w	r5, r8, #20
 8011ecc:	f100 0e14 	add.w	lr, r0, #20
 8011ed0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ed4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ed8:	f108 0210 	add.w	r2, r8, #16
 8011edc:	46f2      	mov	sl, lr
 8011ede:	2100      	movs	r1, #0
 8011ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ee8:	fa1f f883 	uxth.w	r8, r3
 8011eec:	fa11 f18b 	uxtah	r1, r1, fp
 8011ef0:	0c1b      	lsrs	r3, r3, #16
 8011ef2:	eba1 0808 	sub.w	r8, r1, r8
 8011ef6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011efa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011efe:	fa1f f888 	uxth.w	r8, r8
 8011f02:	1419      	asrs	r1, r3, #16
 8011f04:	454e      	cmp	r6, r9
 8011f06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f0a:	f84a 3b04 	str.w	r3, [sl], #4
 8011f0e:	d8e7      	bhi.n	8011ee0 <__mdiff+0x80>
 8011f10:	1b33      	subs	r3, r6, r4
 8011f12:	3b15      	subs	r3, #21
 8011f14:	f023 0303 	bic.w	r3, r3, #3
 8011f18:	3304      	adds	r3, #4
 8011f1a:	3415      	adds	r4, #21
 8011f1c:	42a6      	cmp	r6, r4
 8011f1e:	bf38      	it	cc
 8011f20:	2304      	movcc	r3, #4
 8011f22:	441d      	add	r5, r3
 8011f24:	4473      	add	r3, lr
 8011f26:	469e      	mov	lr, r3
 8011f28:	462e      	mov	r6, r5
 8011f2a:	4566      	cmp	r6, ip
 8011f2c:	d30e      	bcc.n	8011f4c <__mdiff+0xec>
 8011f2e:	f10c 0203 	add.w	r2, ip, #3
 8011f32:	1b52      	subs	r2, r2, r5
 8011f34:	f022 0203 	bic.w	r2, r2, #3
 8011f38:	3d03      	subs	r5, #3
 8011f3a:	45ac      	cmp	ip, r5
 8011f3c:	bf38      	it	cc
 8011f3e:	2200      	movcc	r2, #0
 8011f40:	441a      	add	r2, r3
 8011f42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011f46:	b17b      	cbz	r3, 8011f68 <__mdiff+0x108>
 8011f48:	6107      	str	r7, [r0, #16]
 8011f4a:	e7a3      	b.n	8011e94 <__mdiff+0x34>
 8011f4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011f50:	fa11 f288 	uxtah	r2, r1, r8
 8011f54:	1414      	asrs	r4, r2, #16
 8011f56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011f5a:	b292      	uxth	r2, r2
 8011f5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011f60:	f84e 2b04 	str.w	r2, [lr], #4
 8011f64:	1421      	asrs	r1, r4, #16
 8011f66:	e7e0      	b.n	8011f2a <__mdiff+0xca>
 8011f68:	3f01      	subs	r7, #1
 8011f6a:	e7ea      	b.n	8011f42 <__mdiff+0xe2>
 8011f6c:	08015a48 	.word	0x08015a48
 8011f70:	08015ad4 	.word	0x08015ad4

08011f74 <__ulp>:
 8011f74:	b082      	sub	sp, #8
 8011f76:	ed8d 0b00 	vstr	d0, [sp]
 8011f7a:	9b01      	ldr	r3, [sp, #4]
 8011f7c:	4912      	ldr	r1, [pc, #72]	; (8011fc8 <__ulp+0x54>)
 8011f7e:	4019      	ands	r1, r3
 8011f80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011f84:	2900      	cmp	r1, #0
 8011f86:	dd05      	ble.n	8011f94 <__ulp+0x20>
 8011f88:	2200      	movs	r2, #0
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	ec43 2b10 	vmov	d0, r2, r3
 8011f90:	b002      	add	sp, #8
 8011f92:	4770      	bx	lr
 8011f94:	4249      	negs	r1, r1
 8011f96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011f9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011f9e:	f04f 0200 	mov.w	r2, #0
 8011fa2:	f04f 0300 	mov.w	r3, #0
 8011fa6:	da04      	bge.n	8011fb2 <__ulp+0x3e>
 8011fa8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011fac:	fa41 f300 	asr.w	r3, r1, r0
 8011fb0:	e7ec      	b.n	8011f8c <__ulp+0x18>
 8011fb2:	f1a0 0114 	sub.w	r1, r0, #20
 8011fb6:	291e      	cmp	r1, #30
 8011fb8:	bfda      	itte	le
 8011fba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011fbe:	fa20 f101 	lsrle.w	r1, r0, r1
 8011fc2:	2101      	movgt	r1, #1
 8011fc4:	460a      	mov	r2, r1
 8011fc6:	e7e1      	b.n	8011f8c <__ulp+0x18>
 8011fc8:	7ff00000 	.word	0x7ff00000

08011fcc <__b2d>:
 8011fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fce:	6905      	ldr	r5, [r0, #16]
 8011fd0:	f100 0714 	add.w	r7, r0, #20
 8011fd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011fd8:	1f2e      	subs	r6, r5, #4
 8011fda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f7ff fd48 	bl	8011a74 <__hi0bits>
 8011fe4:	f1c0 0320 	rsb	r3, r0, #32
 8011fe8:	280a      	cmp	r0, #10
 8011fea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012068 <__b2d+0x9c>
 8011fee:	600b      	str	r3, [r1, #0]
 8011ff0:	dc14      	bgt.n	801201c <__b2d+0x50>
 8011ff2:	f1c0 0e0b 	rsb	lr, r0, #11
 8011ff6:	fa24 f10e 	lsr.w	r1, r4, lr
 8011ffa:	42b7      	cmp	r7, r6
 8011ffc:	ea41 030c 	orr.w	r3, r1, ip
 8012000:	bf34      	ite	cc
 8012002:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012006:	2100      	movcs	r1, #0
 8012008:	3015      	adds	r0, #21
 801200a:	fa04 f000 	lsl.w	r0, r4, r0
 801200e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012012:	ea40 0201 	orr.w	r2, r0, r1
 8012016:	ec43 2b10 	vmov	d0, r2, r3
 801201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801201c:	42b7      	cmp	r7, r6
 801201e:	bf3a      	itte	cc
 8012020:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012024:	f1a5 0608 	subcc.w	r6, r5, #8
 8012028:	2100      	movcs	r1, #0
 801202a:	380b      	subs	r0, #11
 801202c:	d017      	beq.n	801205e <__b2d+0x92>
 801202e:	f1c0 0c20 	rsb	ip, r0, #32
 8012032:	fa04 f500 	lsl.w	r5, r4, r0
 8012036:	42be      	cmp	r6, r7
 8012038:	fa21 f40c 	lsr.w	r4, r1, ip
 801203c:	ea45 0504 	orr.w	r5, r5, r4
 8012040:	bf8c      	ite	hi
 8012042:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012046:	2400      	movls	r4, #0
 8012048:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801204c:	fa01 f000 	lsl.w	r0, r1, r0
 8012050:	fa24 f40c 	lsr.w	r4, r4, ip
 8012054:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012058:	ea40 0204 	orr.w	r2, r0, r4
 801205c:	e7db      	b.n	8012016 <__b2d+0x4a>
 801205e:	ea44 030c 	orr.w	r3, r4, ip
 8012062:	460a      	mov	r2, r1
 8012064:	e7d7      	b.n	8012016 <__b2d+0x4a>
 8012066:	bf00      	nop
 8012068:	3ff00000 	.word	0x3ff00000

0801206c <__d2b>:
 801206c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012070:	4689      	mov	r9, r1
 8012072:	2101      	movs	r1, #1
 8012074:	ec57 6b10 	vmov	r6, r7, d0
 8012078:	4690      	mov	r8, r2
 801207a:	f7ff fc09 	bl	8011890 <_Balloc>
 801207e:	4604      	mov	r4, r0
 8012080:	b930      	cbnz	r0, 8012090 <__d2b+0x24>
 8012082:	4602      	mov	r2, r0
 8012084:	4b25      	ldr	r3, [pc, #148]	; (801211c <__d2b+0xb0>)
 8012086:	4826      	ldr	r0, [pc, #152]	; (8012120 <__d2b+0xb4>)
 8012088:	f240 310a 	movw	r1, #778	; 0x30a
 801208c:	f000 fabe 	bl	801260c <__assert_func>
 8012090:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012094:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012098:	bb35      	cbnz	r5, 80120e8 <__d2b+0x7c>
 801209a:	2e00      	cmp	r6, #0
 801209c:	9301      	str	r3, [sp, #4]
 801209e:	d028      	beq.n	80120f2 <__d2b+0x86>
 80120a0:	4668      	mov	r0, sp
 80120a2:	9600      	str	r6, [sp, #0]
 80120a4:	f7ff fd06 	bl	8011ab4 <__lo0bits>
 80120a8:	9900      	ldr	r1, [sp, #0]
 80120aa:	b300      	cbz	r0, 80120ee <__d2b+0x82>
 80120ac:	9a01      	ldr	r2, [sp, #4]
 80120ae:	f1c0 0320 	rsb	r3, r0, #32
 80120b2:	fa02 f303 	lsl.w	r3, r2, r3
 80120b6:	430b      	orrs	r3, r1
 80120b8:	40c2      	lsrs	r2, r0
 80120ba:	6163      	str	r3, [r4, #20]
 80120bc:	9201      	str	r2, [sp, #4]
 80120be:	9b01      	ldr	r3, [sp, #4]
 80120c0:	61a3      	str	r3, [r4, #24]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	bf14      	ite	ne
 80120c6:	2202      	movne	r2, #2
 80120c8:	2201      	moveq	r2, #1
 80120ca:	6122      	str	r2, [r4, #16]
 80120cc:	b1d5      	cbz	r5, 8012104 <__d2b+0x98>
 80120ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120d2:	4405      	add	r5, r0
 80120d4:	f8c9 5000 	str.w	r5, [r9]
 80120d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80120dc:	f8c8 0000 	str.w	r0, [r8]
 80120e0:	4620      	mov	r0, r4
 80120e2:	b003      	add	sp, #12
 80120e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120ec:	e7d5      	b.n	801209a <__d2b+0x2e>
 80120ee:	6161      	str	r1, [r4, #20]
 80120f0:	e7e5      	b.n	80120be <__d2b+0x52>
 80120f2:	a801      	add	r0, sp, #4
 80120f4:	f7ff fcde 	bl	8011ab4 <__lo0bits>
 80120f8:	9b01      	ldr	r3, [sp, #4]
 80120fa:	6163      	str	r3, [r4, #20]
 80120fc:	2201      	movs	r2, #1
 80120fe:	6122      	str	r2, [r4, #16]
 8012100:	3020      	adds	r0, #32
 8012102:	e7e3      	b.n	80120cc <__d2b+0x60>
 8012104:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012108:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801210c:	f8c9 0000 	str.w	r0, [r9]
 8012110:	6918      	ldr	r0, [r3, #16]
 8012112:	f7ff fcaf 	bl	8011a74 <__hi0bits>
 8012116:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801211a:	e7df      	b.n	80120dc <__d2b+0x70>
 801211c:	08015a48 	.word	0x08015a48
 8012120:	08015ad4 	.word	0x08015ad4

08012124 <__ratio>:
 8012124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012128:	4688      	mov	r8, r1
 801212a:	4669      	mov	r1, sp
 801212c:	4681      	mov	r9, r0
 801212e:	f7ff ff4d 	bl	8011fcc <__b2d>
 8012132:	a901      	add	r1, sp, #4
 8012134:	4640      	mov	r0, r8
 8012136:	ec55 4b10 	vmov	r4, r5, d0
 801213a:	f7ff ff47 	bl	8011fcc <__b2d>
 801213e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012142:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012146:	eba3 0c02 	sub.w	ip, r3, r2
 801214a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801214e:	1a9b      	subs	r3, r3, r2
 8012150:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012154:	ec51 0b10 	vmov	r0, r1, d0
 8012158:	2b00      	cmp	r3, #0
 801215a:	bfd6      	itet	le
 801215c:	460a      	movle	r2, r1
 801215e:	462a      	movgt	r2, r5
 8012160:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012164:	468b      	mov	fp, r1
 8012166:	462f      	mov	r7, r5
 8012168:	bfd4      	ite	le
 801216a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801216e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012172:	4620      	mov	r0, r4
 8012174:	ee10 2a10 	vmov	r2, s0
 8012178:	465b      	mov	r3, fp
 801217a:	4639      	mov	r1, r7
 801217c:	f7ee fb76 	bl	800086c <__aeabi_ddiv>
 8012180:	ec41 0b10 	vmov	d0, r0, r1
 8012184:	b003      	add	sp, #12
 8012186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801218a <__copybits>:
 801218a:	3901      	subs	r1, #1
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	1149      	asrs	r1, r1, #5
 8012190:	6914      	ldr	r4, [r2, #16]
 8012192:	3101      	adds	r1, #1
 8012194:	f102 0314 	add.w	r3, r2, #20
 8012198:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801219c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80121a0:	1f05      	subs	r5, r0, #4
 80121a2:	42a3      	cmp	r3, r4
 80121a4:	d30c      	bcc.n	80121c0 <__copybits+0x36>
 80121a6:	1aa3      	subs	r3, r4, r2
 80121a8:	3b11      	subs	r3, #17
 80121aa:	f023 0303 	bic.w	r3, r3, #3
 80121ae:	3211      	adds	r2, #17
 80121b0:	42a2      	cmp	r2, r4
 80121b2:	bf88      	it	hi
 80121b4:	2300      	movhi	r3, #0
 80121b6:	4418      	add	r0, r3
 80121b8:	2300      	movs	r3, #0
 80121ba:	4288      	cmp	r0, r1
 80121bc:	d305      	bcc.n	80121ca <__copybits+0x40>
 80121be:	bd70      	pop	{r4, r5, r6, pc}
 80121c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80121c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80121c8:	e7eb      	b.n	80121a2 <__copybits+0x18>
 80121ca:	f840 3b04 	str.w	r3, [r0], #4
 80121ce:	e7f4      	b.n	80121ba <__copybits+0x30>

080121d0 <__any_on>:
 80121d0:	f100 0214 	add.w	r2, r0, #20
 80121d4:	6900      	ldr	r0, [r0, #16]
 80121d6:	114b      	asrs	r3, r1, #5
 80121d8:	4298      	cmp	r0, r3
 80121da:	b510      	push	{r4, lr}
 80121dc:	db11      	blt.n	8012202 <__any_on+0x32>
 80121de:	dd0a      	ble.n	80121f6 <__any_on+0x26>
 80121e0:	f011 011f 	ands.w	r1, r1, #31
 80121e4:	d007      	beq.n	80121f6 <__any_on+0x26>
 80121e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80121ea:	fa24 f001 	lsr.w	r0, r4, r1
 80121ee:	fa00 f101 	lsl.w	r1, r0, r1
 80121f2:	428c      	cmp	r4, r1
 80121f4:	d10b      	bne.n	801220e <__any_on+0x3e>
 80121f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d803      	bhi.n	8012206 <__any_on+0x36>
 80121fe:	2000      	movs	r0, #0
 8012200:	bd10      	pop	{r4, pc}
 8012202:	4603      	mov	r3, r0
 8012204:	e7f7      	b.n	80121f6 <__any_on+0x26>
 8012206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801220a:	2900      	cmp	r1, #0
 801220c:	d0f5      	beq.n	80121fa <__any_on+0x2a>
 801220e:	2001      	movs	r0, #1
 8012210:	e7f6      	b.n	8012200 <__any_on+0x30>

08012212 <_calloc_r>:
 8012212:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012214:	fba1 2402 	umull	r2, r4, r1, r2
 8012218:	b94c      	cbnz	r4, 801222e <_calloc_r+0x1c>
 801221a:	4611      	mov	r1, r2
 801221c:	9201      	str	r2, [sp, #4]
 801221e:	f7fc f9ab 	bl	800e578 <_malloc_r>
 8012222:	9a01      	ldr	r2, [sp, #4]
 8012224:	4605      	mov	r5, r0
 8012226:	b930      	cbnz	r0, 8012236 <_calloc_r+0x24>
 8012228:	4628      	mov	r0, r5
 801222a:	b003      	add	sp, #12
 801222c:	bd30      	pop	{r4, r5, pc}
 801222e:	220c      	movs	r2, #12
 8012230:	6002      	str	r2, [r0, #0]
 8012232:	2500      	movs	r5, #0
 8012234:	e7f8      	b.n	8012228 <_calloc_r+0x16>
 8012236:	4621      	mov	r1, r4
 8012238:	f7fc f975 	bl	800e526 <memset>
 801223c:	e7f4      	b.n	8012228 <_calloc_r+0x16>
	...

08012240 <_free_r>:
 8012240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012242:	2900      	cmp	r1, #0
 8012244:	d044      	beq.n	80122d0 <_free_r+0x90>
 8012246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801224a:	9001      	str	r0, [sp, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	f1a1 0404 	sub.w	r4, r1, #4
 8012252:	bfb8      	it	lt
 8012254:	18e4      	addlt	r4, r4, r3
 8012256:	f7ff fb0f 	bl	8011878 <__malloc_lock>
 801225a:	4a1e      	ldr	r2, [pc, #120]	; (80122d4 <_free_r+0x94>)
 801225c:	9801      	ldr	r0, [sp, #4]
 801225e:	6813      	ldr	r3, [r2, #0]
 8012260:	b933      	cbnz	r3, 8012270 <_free_r+0x30>
 8012262:	6063      	str	r3, [r4, #4]
 8012264:	6014      	str	r4, [r2, #0]
 8012266:	b003      	add	sp, #12
 8012268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801226c:	f7ff bb0a 	b.w	8011884 <__malloc_unlock>
 8012270:	42a3      	cmp	r3, r4
 8012272:	d908      	bls.n	8012286 <_free_r+0x46>
 8012274:	6825      	ldr	r5, [r4, #0]
 8012276:	1961      	adds	r1, r4, r5
 8012278:	428b      	cmp	r3, r1
 801227a:	bf01      	itttt	eq
 801227c:	6819      	ldreq	r1, [r3, #0]
 801227e:	685b      	ldreq	r3, [r3, #4]
 8012280:	1949      	addeq	r1, r1, r5
 8012282:	6021      	streq	r1, [r4, #0]
 8012284:	e7ed      	b.n	8012262 <_free_r+0x22>
 8012286:	461a      	mov	r2, r3
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	b10b      	cbz	r3, 8012290 <_free_r+0x50>
 801228c:	42a3      	cmp	r3, r4
 801228e:	d9fa      	bls.n	8012286 <_free_r+0x46>
 8012290:	6811      	ldr	r1, [r2, #0]
 8012292:	1855      	adds	r5, r2, r1
 8012294:	42a5      	cmp	r5, r4
 8012296:	d10b      	bne.n	80122b0 <_free_r+0x70>
 8012298:	6824      	ldr	r4, [r4, #0]
 801229a:	4421      	add	r1, r4
 801229c:	1854      	adds	r4, r2, r1
 801229e:	42a3      	cmp	r3, r4
 80122a0:	6011      	str	r1, [r2, #0]
 80122a2:	d1e0      	bne.n	8012266 <_free_r+0x26>
 80122a4:	681c      	ldr	r4, [r3, #0]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	6053      	str	r3, [r2, #4]
 80122aa:	4421      	add	r1, r4
 80122ac:	6011      	str	r1, [r2, #0]
 80122ae:	e7da      	b.n	8012266 <_free_r+0x26>
 80122b0:	d902      	bls.n	80122b8 <_free_r+0x78>
 80122b2:	230c      	movs	r3, #12
 80122b4:	6003      	str	r3, [r0, #0]
 80122b6:	e7d6      	b.n	8012266 <_free_r+0x26>
 80122b8:	6825      	ldr	r5, [r4, #0]
 80122ba:	1961      	adds	r1, r4, r5
 80122bc:	428b      	cmp	r3, r1
 80122be:	bf04      	itt	eq
 80122c0:	6819      	ldreq	r1, [r3, #0]
 80122c2:	685b      	ldreq	r3, [r3, #4]
 80122c4:	6063      	str	r3, [r4, #4]
 80122c6:	bf04      	itt	eq
 80122c8:	1949      	addeq	r1, r1, r5
 80122ca:	6021      	streq	r1, [r4, #0]
 80122cc:	6054      	str	r4, [r2, #4]
 80122ce:	e7ca      	b.n	8012266 <_free_r+0x26>
 80122d0:	b003      	add	sp, #12
 80122d2:	bd30      	pop	{r4, r5, pc}
 80122d4:	200063e4 	.word	0x200063e4

080122d8 <__ssputs_r>:
 80122d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122dc:	688e      	ldr	r6, [r1, #8]
 80122de:	429e      	cmp	r6, r3
 80122e0:	4682      	mov	sl, r0
 80122e2:	460c      	mov	r4, r1
 80122e4:	4690      	mov	r8, r2
 80122e6:	461f      	mov	r7, r3
 80122e8:	d838      	bhi.n	801235c <__ssputs_r+0x84>
 80122ea:	898a      	ldrh	r2, [r1, #12]
 80122ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80122f0:	d032      	beq.n	8012358 <__ssputs_r+0x80>
 80122f2:	6825      	ldr	r5, [r4, #0]
 80122f4:	6909      	ldr	r1, [r1, #16]
 80122f6:	eba5 0901 	sub.w	r9, r5, r1
 80122fa:	6965      	ldr	r5, [r4, #20]
 80122fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012304:	3301      	adds	r3, #1
 8012306:	444b      	add	r3, r9
 8012308:	106d      	asrs	r5, r5, #1
 801230a:	429d      	cmp	r5, r3
 801230c:	bf38      	it	cc
 801230e:	461d      	movcc	r5, r3
 8012310:	0553      	lsls	r3, r2, #21
 8012312:	d531      	bpl.n	8012378 <__ssputs_r+0xa0>
 8012314:	4629      	mov	r1, r5
 8012316:	f7fc f92f 	bl	800e578 <_malloc_r>
 801231a:	4606      	mov	r6, r0
 801231c:	b950      	cbnz	r0, 8012334 <__ssputs_r+0x5c>
 801231e:	230c      	movs	r3, #12
 8012320:	f8ca 3000 	str.w	r3, [sl]
 8012324:	89a3      	ldrh	r3, [r4, #12]
 8012326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801232a:	81a3      	strh	r3, [r4, #12]
 801232c:	f04f 30ff 	mov.w	r0, #4294967295
 8012330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012334:	6921      	ldr	r1, [r4, #16]
 8012336:	464a      	mov	r2, r9
 8012338:	f7fc f8e7 	bl	800e50a <memcpy>
 801233c:	89a3      	ldrh	r3, [r4, #12]
 801233e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012346:	81a3      	strh	r3, [r4, #12]
 8012348:	6126      	str	r6, [r4, #16]
 801234a:	6165      	str	r5, [r4, #20]
 801234c:	444e      	add	r6, r9
 801234e:	eba5 0509 	sub.w	r5, r5, r9
 8012352:	6026      	str	r6, [r4, #0]
 8012354:	60a5      	str	r5, [r4, #8]
 8012356:	463e      	mov	r6, r7
 8012358:	42be      	cmp	r6, r7
 801235a:	d900      	bls.n	801235e <__ssputs_r+0x86>
 801235c:	463e      	mov	r6, r7
 801235e:	6820      	ldr	r0, [r4, #0]
 8012360:	4632      	mov	r2, r6
 8012362:	4641      	mov	r1, r8
 8012364:	f000 f982 	bl	801266c <memmove>
 8012368:	68a3      	ldr	r3, [r4, #8]
 801236a:	1b9b      	subs	r3, r3, r6
 801236c:	60a3      	str	r3, [r4, #8]
 801236e:	6823      	ldr	r3, [r4, #0]
 8012370:	4433      	add	r3, r6
 8012372:	6023      	str	r3, [r4, #0]
 8012374:	2000      	movs	r0, #0
 8012376:	e7db      	b.n	8012330 <__ssputs_r+0x58>
 8012378:	462a      	mov	r2, r5
 801237a:	f000 f991 	bl	80126a0 <_realloc_r>
 801237e:	4606      	mov	r6, r0
 8012380:	2800      	cmp	r0, #0
 8012382:	d1e1      	bne.n	8012348 <__ssputs_r+0x70>
 8012384:	6921      	ldr	r1, [r4, #16]
 8012386:	4650      	mov	r0, sl
 8012388:	f7ff ff5a 	bl	8012240 <_free_r>
 801238c:	e7c7      	b.n	801231e <__ssputs_r+0x46>
	...

08012390 <_svfiprintf_r>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	4698      	mov	r8, r3
 8012396:	898b      	ldrh	r3, [r1, #12]
 8012398:	061b      	lsls	r3, r3, #24
 801239a:	b09d      	sub	sp, #116	; 0x74
 801239c:	4607      	mov	r7, r0
 801239e:	460d      	mov	r5, r1
 80123a0:	4614      	mov	r4, r2
 80123a2:	d50e      	bpl.n	80123c2 <_svfiprintf_r+0x32>
 80123a4:	690b      	ldr	r3, [r1, #16]
 80123a6:	b963      	cbnz	r3, 80123c2 <_svfiprintf_r+0x32>
 80123a8:	2140      	movs	r1, #64	; 0x40
 80123aa:	f7fc f8e5 	bl	800e578 <_malloc_r>
 80123ae:	6028      	str	r0, [r5, #0]
 80123b0:	6128      	str	r0, [r5, #16]
 80123b2:	b920      	cbnz	r0, 80123be <_svfiprintf_r+0x2e>
 80123b4:	230c      	movs	r3, #12
 80123b6:	603b      	str	r3, [r7, #0]
 80123b8:	f04f 30ff 	mov.w	r0, #4294967295
 80123bc:	e0d1      	b.n	8012562 <_svfiprintf_r+0x1d2>
 80123be:	2340      	movs	r3, #64	; 0x40
 80123c0:	616b      	str	r3, [r5, #20]
 80123c2:	2300      	movs	r3, #0
 80123c4:	9309      	str	r3, [sp, #36]	; 0x24
 80123c6:	2320      	movs	r3, #32
 80123c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80123d0:	2330      	movs	r3, #48	; 0x30
 80123d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801257c <_svfiprintf_r+0x1ec>
 80123d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123da:	f04f 0901 	mov.w	r9, #1
 80123de:	4623      	mov	r3, r4
 80123e0:	469a      	mov	sl, r3
 80123e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123e6:	b10a      	cbz	r2, 80123ec <_svfiprintf_r+0x5c>
 80123e8:	2a25      	cmp	r2, #37	; 0x25
 80123ea:	d1f9      	bne.n	80123e0 <_svfiprintf_r+0x50>
 80123ec:	ebba 0b04 	subs.w	fp, sl, r4
 80123f0:	d00b      	beq.n	801240a <_svfiprintf_r+0x7a>
 80123f2:	465b      	mov	r3, fp
 80123f4:	4622      	mov	r2, r4
 80123f6:	4629      	mov	r1, r5
 80123f8:	4638      	mov	r0, r7
 80123fa:	f7ff ff6d 	bl	80122d8 <__ssputs_r>
 80123fe:	3001      	adds	r0, #1
 8012400:	f000 80aa 	beq.w	8012558 <_svfiprintf_r+0x1c8>
 8012404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012406:	445a      	add	r2, fp
 8012408:	9209      	str	r2, [sp, #36]	; 0x24
 801240a:	f89a 3000 	ldrb.w	r3, [sl]
 801240e:	2b00      	cmp	r3, #0
 8012410:	f000 80a2 	beq.w	8012558 <_svfiprintf_r+0x1c8>
 8012414:	2300      	movs	r3, #0
 8012416:	f04f 32ff 	mov.w	r2, #4294967295
 801241a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801241e:	f10a 0a01 	add.w	sl, sl, #1
 8012422:	9304      	str	r3, [sp, #16]
 8012424:	9307      	str	r3, [sp, #28]
 8012426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801242a:	931a      	str	r3, [sp, #104]	; 0x68
 801242c:	4654      	mov	r4, sl
 801242e:	2205      	movs	r2, #5
 8012430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012434:	4851      	ldr	r0, [pc, #324]	; (801257c <_svfiprintf_r+0x1ec>)
 8012436:	f7ed fee3 	bl	8000200 <memchr>
 801243a:	9a04      	ldr	r2, [sp, #16]
 801243c:	b9d8      	cbnz	r0, 8012476 <_svfiprintf_r+0xe6>
 801243e:	06d0      	lsls	r0, r2, #27
 8012440:	bf44      	itt	mi
 8012442:	2320      	movmi	r3, #32
 8012444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012448:	0711      	lsls	r1, r2, #28
 801244a:	bf44      	itt	mi
 801244c:	232b      	movmi	r3, #43	; 0x2b
 801244e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012452:	f89a 3000 	ldrb.w	r3, [sl]
 8012456:	2b2a      	cmp	r3, #42	; 0x2a
 8012458:	d015      	beq.n	8012486 <_svfiprintf_r+0xf6>
 801245a:	9a07      	ldr	r2, [sp, #28]
 801245c:	4654      	mov	r4, sl
 801245e:	2000      	movs	r0, #0
 8012460:	f04f 0c0a 	mov.w	ip, #10
 8012464:	4621      	mov	r1, r4
 8012466:	f811 3b01 	ldrb.w	r3, [r1], #1
 801246a:	3b30      	subs	r3, #48	; 0x30
 801246c:	2b09      	cmp	r3, #9
 801246e:	d94e      	bls.n	801250e <_svfiprintf_r+0x17e>
 8012470:	b1b0      	cbz	r0, 80124a0 <_svfiprintf_r+0x110>
 8012472:	9207      	str	r2, [sp, #28]
 8012474:	e014      	b.n	80124a0 <_svfiprintf_r+0x110>
 8012476:	eba0 0308 	sub.w	r3, r0, r8
 801247a:	fa09 f303 	lsl.w	r3, r9, r3
 801247e:	4313      	orrs	r3, r2
 8012480:	9304      	str	r3, [sp, #16]
 8012482:	46a2      	mov	sl, r4
 8012484:	e7d2      	b.n	801242c <_svfiprintf_r+0x9c>
 8012486:	9b03      	ldr	r3, [sp, #12]
 8012488:	1d19      	adds	r1, r3, #4
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	9103      	str	r1, [sp, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	bfbb      	ittet	lt
 8012492:	425b      	neglt	r3, r3
 8012494:	f042 0202 	orrlt.w	r2, r2, #2
 8012498:	9307      	strge	r3, [sp, #28]
 801249a:	9307      	strlt	r3, [sp, #28]
 801249c:	bfb8      	it	lt
 801249e:	9204      	strlt	r2, [sp, #16]
 80124a0:	7823      	ldrb	r3, [r4, #0]
 80124a2:	2b2e      	cmp	r3, #46	; 0x2e
 80124a4:	d10c      	bne.n	80124c0 <_svfiprintf_r+0x130>
 80124a6:	7863      	ldrb	r3, [r4, #1]
 80124a8:	2b2a      	cmp	r3, #42	; 0x2a
 80124aa:	d135      	bne.n	8012518 <_svfiprintf_r+0x188>
 80124ac:	9b03      	ldr	r3, [sp, #12]
 80124ae:	1d1a      	adds	r2, r3, #4
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	9203      	str	r2, [sp, #12]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	bfb8      	it	lt
 80124b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80124bc:	3402      	adds	r4, #2
 80124be:	9305      	str	r3, [sp, #20]
 80124c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801258c <_svfiprintf_r+0x1fc>
 80124c4:	7821      	ldrb	r1, [r4, #0]
 80124c6:	2203      	movs	r2, #3
 80124c8:	4650      	mov	r0, sl
 80124ca:	f7ed fe99 	bl	8000200 <memchr>
 80124ce:	b140      	cbz	r0, 80124e2 <_svfiprintf_r+0x152>
 80124d0:	2340      	movs	r3, #64	; 0x40
 80124d2:	eba0 000a 	sub.w	r0, r0, sl
 80124d6:	fa03 f000 	lsl.w	r0, r3, r0
 80124da:	9b04      	ldr	r3, [sp, #16]
 80124dc:	4303      	orrs	r3, r0
 80124de:	3401      	adds	r4, #1
 80124e0:	9304      	str	r3, [sp, #16]
 80124e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e6:	4826      	ldr	r0, [pc, #152]	; (8012580 <_svfiprintf_r+0x1f0>)
 80124e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124ec:	2206      	movs	r2, #6
 80124ee:	f7ed fe87 	bl	8000200 <memchr>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d038      	beq.n	8012568 <_svfiprintf_r+0x1d8>
 80124f6:	4b23      	ldr	r3, [pc, #140]	; (8012584 <_svfiprintf_r+0x1f4>)
 80124f8:	bb1b      	cbnz	r3, 8012542 <_svfiprintf_r+0x1b2>
 80124fa:	9b03      	ldr	r3, [sp, #12]
 80124fc:	3307      	adds	r3, #7
 80124fe:	f023 0307 	bic.w	r3, r3, #7
 8012502:	3308      	adds	r3, #8
 8012504:	9303      	str	r3, [sp, #12]
 8012506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012508:	4433      	add	r3, r6
 801250a:	9309      	str	r3, [sp, #36]	; 0x24
 801250c:	e767      	b.n	80123de <_svfiprintf_r+0x4e>
 801250e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012512:	460c      	mov	r4, r1
 8012514:	2001      	movs	r0, #1
 8012516:	e7a5      	b.n	8012464 <_svfiprintf_r+0xd4>
 8012518:	2300      	movs	r3, #0
 801251a:	3401      	adds	r4, #1
 801251c:	9305      	str	r3, [sp, #20]
 801251e:	4619      	mov	r1, r3
 8012520:	f04f 0c0a 	mov.w	ip, #10
 8012524:	4620      	mov	r0, r4
 8012526:	f810 2b01 	ldrb.w	r2, [r0], #1
 801252a:	3a30      	subs	r2, #48	; 0x30
 801252c:	2a09      	cmp	r2, #9
 801252e:	d903      	bls.n	8012538 <_svfiprintf_r+0x1a8>
 8012530:	2b00      	cmp	r3, #0
 8012532:	d0c5      	beq.n	80124c0 <_svfiprintf_r+0x130>
 8012534:	9105      	str	r1, [sp, #20]
 8012536:	e7c3      	b.n	80124c0 <_svfiprintf_r+0x130>
 8012538:	fb0c 2101 	mla	r1, ip, r1, r2
 801253c:	4604      	mov	r4, r0
 801253e:	2301      	movs	r3, #1
 8012540:	e7f0      	b.n	8012524 <_svfiprintf_r+0x194>
 8012542:	ab03      	add	r3, sp, #12
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	462a      	mov	r2, r5
 8012548:	4b0f      	ldr	r3, [pc, #60]	; (8012588 <_svfiprintf_r+0x1f8>)
 801254a:	a904      	add	r1, sp, #16
 801254c:	4638      	mov	r0, r7
 801254e:	f7fc f927 	bl	800e7a0 <_printf_float>
 8012552:	1c42      	adds	r2, r0, #1
 8012554:	4606      	mov	r6, r0
 8012556:	d1d6      	bne.n	8012506 <_svfiprintf_r+0x176>
 8012558:	89ab      	ldrh	r3, [r5, #12]
 801255a:	065b      	lsls	r3, r3, #25
 801255c:	f53f af2c 	bmi.w	80123b8 <_svfiprintf_r+0x28>
 8012560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012562:	b01d      	add	sp, #116	; 0x74
 8012564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012568:	ab03      	add	r3, sp, #12
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	462a      	mov	r2, r5
 801256e:	4b06      	ldr	r3, [pc, #24]	; (8012588 <_svfiprintf_r+0x1f8>)
 8012570:	a904      	add	r1, sp, #16
 8012572:	4638      	mov	r0, r7
 8012574:	f7fc fbb8 	bl	800ece8 <_printf_i>
 8012578:	e7eb      	b.n	8012552 <_svfiprintf_r+0x1c2>
 801257a:	bf00      	nop
 801257c:	08015c2c 	.word	0x08015c2c
 8012580:	08015c36 	.word	0x08015c36
 8012584:	0800e7a1 	.word	0x0800e7a1
 8012588:	080122d9 	.word	0x080122d9
 801258c:	08015c32 	.word	0x08015c32

08012590 <_read_r>:
 8012590:	b538      	push	{r3, r4, r5, lr}
 8012592:	4d07      	ldr	r5, [pc, #28]	; (80125b0 <_read_r+0x20>)
 8012594:	4604      	mov	r4, r0
 8012596:	4608      	mov	r0, r1
 8012598:	4611      	mov	r1, r2
 801259a:	2200      	movs	r2, #0
 801259c:	602a      	str	r2, [r5, #0]
 801259e:	461a      	mov	r2, r3
 80125a0:	f7ef fac2 	bl	8001b28 <_read>
 80125a4:	1c43      	adds	r3, r0, #1
 80125a6:	d102      	bne.n	80125ae <_read_r+0x1e>
 80125a8:	682b      	ldr	r3, [r5, #0]
 80125aa:	b103      	cbz	r3, 80125ae <_read_r+0x1e>
 80125ac:	6023      	str	r3, [r4, #0]
 80125ae:	bd38      	pop	{r3, r4, r5, pc}
 80125b0:	200063ec 	.word	0x200063ec
 80125b4:	00000000 	.word	0x00000000

080125b8 <nan>:
 80125b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80125c0 <nan+0x8>
 80125bc:	4770      	bx	lr
 80125be:	bf00      	nop
 80125c0:	00000000 	.word	0x00000000
 80125c4:	7ff80000 	.word	0x7ff80000

080125c8 <strncmp>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	b17a      	cbz	r2, 80125ec <strncmp+0x24>
 80125cc:	4603      	mov	r3, r0
 80125ce:	3901      	subs	r1, #1
 80125d0:	1884      	adds	r4, r0, r2
 80125d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80125da:	4290      	cmp	r0, r2
 80125dc:	d101      	bne.n	80125e2 <strncmp+0x1a>
 80125de:	42a3      	cmp	r3, r4
 80125e0:	d101      	bne.n	80125e6 <strncmp+0x1e>
 80125e2:	1a80      	subs	r0, r0, r2
 80125e4:	bd10      	pop	{r4, pc}
 80125e6:	2800      	cmp	r0, #0
 80125e8:	d1f3      	bne.n	80125d2 <strncmp+0xa>
 80125ea:	e7fa      	b.n	80125e2 <strncmp+0x1a>
 80125ec:	4610      	mov	r0, r2
 80125ee:	e7f9      	b.n	80125e4 <strncmp+0x1c>

080125f0 <__ascii_wctomb>:
 80125f0:	b149      	cbz	r1, 8012606 <__ascii_wctomb+0x16>
 80125f2:	2aff      	cmp	r2, #255	; 0xff
 80125f4:	bf85      	ittet	hi
 80125f6:	238a      	movhi	r3, #138	; 0x8a
 80125f8:	6003      	strhi	r3, [r0, #0]
 80125fa:	700a      	strbls	r2, [r1, #0]
 80125fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8012600:	bf98      	it	ls
 8012602:	2001      	movls	r0, #1
 8012604:	4770      	bx	lr
 8012606:	4608      	mov	r0, r1
 8012608:	4770      	bx	lr
	...

0801260c <__assert_func>:
 801260c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801260e:	4614      	mov	r4, r2
 8012610:	461a      	mov	r2, r3
 8012612:	4b09      	ldr	r3, [pc, #36]	; (8012638 <__assert_func+0x2c>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4605      	mov	r5, r0
 8012618:	68d8      	ldr	r0, [r3, #12]
 801261a:	b14c      	cbz	r4, 8012630 <__assert_func+0x24>
 801261c:	4b07      	ldr	r3, [pc, #28]	; (801263c <__assert_func+0x30>)
 801261e:	9100      	str	r1, [sp, #0]
 8012620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012624:	4906      	ldr	r1, [pc, #24]	; (8012640 <__assert_func+0x34>)
 8012626:	462b      	mov	r3, r5
 8012628:	f000 f80e 	bl	8012648 <fiprintf>
 801262c:	f000 fa80 	bl	8012b30 <abort>
 8012630:	4b04      	ldr	r3, [pc, #16]	; (8012644 <__assert_func+0x38>)
 8012632:	461c      	mov	r4, r3
 8012634:	e7f3      	b.n	801261e <__assert_func+0x12>
 8012636:	bf00      	nop
 8012638:	20000214 	.word	0x20000214
 801263c:	08015c3d 	.word	0x08015c3d
 8012640:	08015c4a 	.word	0x08015c4a
 8012644:	08015c78 	.word	0x08015c78

08012648 <fiprintf>:
 8012648:	b40e      	push	{r1, r2, r3}
 801264a:	b503      	push	{r0, r1, lr}
 801264c:	4601      	mov	r1, r0
 801264e:	ab03      	add	r3, sp, #12
 8012650:	4805      	ldr	r0, [pc, #20]	; (8012668 <fiprintf+0x20>)
 8012652:	f853 2b04 	ldr.w	r2, [r3], #4
 8012656:	6800      	ldr	r0, [r0, #0]
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	f000 f879 	bl	8012750 <_vfiprintf_r>
 801265e:	b002      	add	sp, #8
 8012660:	f85d eb04 	ldr.w	lr, [sp], #4
 8012664:	b003      	add	sp, #12
 8012666:	4770      	bx	lr
 8012668:	20000214 	.word	0x20000214

0801266c <memmove>:
 801266c:	4288      	cmp	r0, r1
 801266e:	b510      	push	{r4, lr}
 8012670:	eb01 0402 	add.w	r4, r1, r2
 8012674:	d902      	bls.n	801267c <memmove+0x10>
 8012676:	4284      	cmp	r4, r0
 8012678:	4623      	mov	r3, r4
 801267a:	d807      	bhi.n	801268c <memmove+0x20>
 801267c:	1e43      	subs	r3, r0, #1
 801267e:	42a1      	cmp	r1, r4
 8012680:	d008      	beq.n	8012694 <memmove+0x28>
 8012682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801268a:	e7f8      	b.n	801267e <memmove+0x12>
 801268c:	4402      	add	r2, r0
 801268e:	4601      	mov	r1, r0
 8012690:	428a      	cmp	r2, r1
 8012692:	d100      	bne.n	8012696 <memmove+0x2a>
 8012694:	bd10      	pop	{r4, pc}
 8012696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801269a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801269e:	e7f7      	b.n	8012690 <memmove+0x24>

080126a0 <_realloc_r>:
 80126a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126a4:	4680      	mov	r8, r0
 80126a6:	4614      	mov	r4, r2
 80126a8:	460e      	mov	r6, r1
 80126aa:	b921      	cbnz	r1, 80126b6 <_realloc_r+0x16>
 80126ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126b0:	4611      	mov	r1, r2
 80126b2:	f7fb bf61 	b.w	800e578 <_malloc_r>
 80126b6:	b92a      	cbnz	r2, 80126c4 <_realloc_r+0x24>
 80126b8:	f7ff fdc2 	bl	8012240 <_free_r>
 80126bc:	4625      	mov	r5, r4
 80126be:	4628      	mov	r0, r5
 80126c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c4:	f000 faa0 	bl	8012c08 <_malloc_usable_size_r>
 80126c8:	4284      	cmp	r4, r0
 80126ca:	4607      	mov	r7, r0
 80126cc:	d802      	bhi.n	80126d4 <_realloc_r+0x34>
 80126ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80126d2:	d812      	bhi.n	80126fa <_realloc_r+0x5a>
 80126d4:	4621      	mov	r1, r4
 80126d6:	4640      	mov	r0, r8
 80126d8:	f7fb ff4e 	bl	800e578 <_malloc_r>
 80126dc:	4605      	mov	r5, r0
 80126de:	2800      	cmp	r0, #0
 80126e0:	d0ed      	beq.n	80126be <_realloc_r+0x1e>
 80126e2:	42bc      	cmp	r4, r7
 80126e4:	4622      	mov	r2, r4
 80126e6:	4631      	mov	r1, r6
 80126e8:	bf28      	it	cs
 80126ea:	463a      	movcs	r2, r7
 80126ec:	f7fb ff0d 	bl	800e50a <memcpy>
 80126f0:	4631      	mov	r1, r6
 80126f2:	4640      	mov	r0, r8
 80126f4:	f7ff fda4 	bl	8012240 <_free_r>
 80126f8:	e7e1      	b.n	80126be <_realloc_r+0x1e>
 80126fa:	4635      	mov	r5, r6
 80126fc:	e7df      	b.n	80126be <_realloc_r+0x1e>

080126fe <__sfputc_r>:
 80126fe:	6893      	ldr	r3, [r2, #8]
 8012700:	3b01      	subs	r3, #1
 8012702:	2b00      	cmp	r3, #0
 8012704:	b410      	push	{r4}
 8012706:	6093      	str	r3, [r2, #8]
 8012708:	da08      	bge.n	801271c <__sfputc_r+0x1e>
 801270a:	6994      	ldr	r4, [r2, #24]
 801270c:	42a3      	cmp	r3, r4
 801270e:	db01      	blt.n	8012714 <__sfputc_r+0x16>
 8012710:	290a      	cmp	r1, #10
 8012712:	d103      	bne.n	801271c <__sfputc_r+0x1e>
 8012714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012718:	f000 b94a 	b.w	80129b0 <__swbuf_r>
 801271c:	6813      	ldr	r3, [r2, #0]
 801271e:	1c58      	adds	r0, r3, #1
 8012720:	6010      	str	r0, [r2, #0]
 8012722:	7019      	strb	r1, [r3, #0]
 8012724:	4608      	mov	r0, r1
 8012726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272a:	4770      	bx	lr

0801272c <__sfputs_r>:
 801272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	4614      	mov	r4, r2
 8012734:	18d5      	adds	r5, r2, r3
 8012736:	42ac      	cmp	r4, r5
 8012738:	d101      	bne.n	801273e <__sfputs_r+0x12>
 801273a:	2000      	movs	r0, #0
 801273c:	e007      	b.n	801274e <__sfputs_r+0x22>
 801273e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012742:	463a      	mov	r2, r7
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff ffda 	bl	80126fe <__sfputc_r>
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	d1f3      	bne.n	8012736 <__sfputs_r+0xa>
 801274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012750 <_vfiprintf_r>:
 8012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	460d      	mov	r5, r1
 8012756:	b09d      	sub	sp, #116	; 0x74
 8012758:	4614      	mov	r4, r2
 801275a:	4698      	mov	r8, r3
 801275c:	4606      	mov	r6, r0
 801275e:	b118      	cbz	r0, 8012768 <_vfiprintf_r+0x18>
 8012760:	6983      	ldr	r3, [r0, #24]
 8012762:	b90b      	cbnz	r3, 8012768 <_vfiprintf_r+0x18>
 8012764:	f7fb fe0c 	bl	800e380 <__sinit>
 8012768:	4b89      	ldr	r3, [pc, #548]	; (8012990 <_vfiprintf_r+0x240>)
 801276a:	429d      	cmp	r5, r3
 801276c:	d11b      	bne.n	80127a6 <_vfiprintf_r+0x56>
 801276e:	6875      	ldr	r5, [r6, #4]
 8012770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012772:	07d9      	lsls	r1, r3, #31
 8012774:	d405      	bmi.n	8012782 <_vfiprintf_r+0x32>
 8012776:	89ab      	ldrh	r3, [r5, #12]
 8012778:	059a      	lsls	r2, r3, #22
 801277a:	d402      	bmi.n	8012782 <_vfiprintf_r+0x32>
 801277c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801277e:	f7fb fec2 	bl	800e506 <__retarget_lock_acquire_recursive>
 8012782:	89ab      	ldrh	r3, [r5, #12]
 8012784:	071b      	lsls	r3, r3, #28
 8012786:	d501      	bpl.n	801278c <_vfiprintf_r+0x3c>
 8012788:	692b      	ldr	r3, [r5, #16]
 801278a:	b9eb      	cbnz	r3, 80127c8 <_vfiprintf_r+0x78>
 801278c:	4629      	mov	r1, r5
 801278e:	4630      	mov	r0, r6
 8012790:	f000 f960 	bl	8012a54 <__swsetup_r>
 8012794:	b1c0      	cbz	r0, 80127c8 <_vfiprintf_r+0x78>
 8012796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012798:	07dc      	lsls	r4, r3, #31
 801279a:	d50e      	bpl.n	80127ba <_vfiprintf_r+0x6a>
 801279c:	f04f 30ff 	mov.w	r0, #4294967295
 80127a0:	b01d      	add	sp, #116	; 0x74
 80127a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a6:	4b7b      	ldr	r3, [pc, #492]	; (8012994 <_vfiprintf_r+0x244>)
 80127a8:	429d      	cmp	r5, r3
 80127aa:	d101      	bne.n	80127b0 <_vfiprintf_r+0x60>
 80127ac:	68b5      	ldr	r5, [r6, #8]
 80127ae:	e7df      	b.n	8012770 <_vfiprintf_r+0x20>
 80127b0:	4b79      	ldr	r3, [pc, #484]	; (8012998 <_vfiprintf_r+0x248>)
 80127b2:	429d      	cmp	r5, r3
 80127b4:	bf08      	it	eq
 80127b6:	68f5      	ldreq	r5, [r6, #12]
 80127b8:	e7da      	b.n	8012770 <_vfiprintf_r+0x20>
 80127ba:	89ab      	ldrh	r3, [r5, #12]
 80127bc:	0598      	lsls	r0, r3, #22
 80127be:	d4ed      	bmi.n	801279c <_vfiprintf_r+0x4c>
 80127c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127c2:	f7fb fea1 	bl	800e508 <__retarget_lock_release_recursive>
 80127c6:	e7e9      	b.n	801279c <_vfiprintf_r+0x4c>
 80127c8:	2300      	movs	r3, #0
 80127ca:	9309      	str	r3, [sp, #36]	; 0x24
 80127cc:	2320      	movs	r3, #32
 80127ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80127d6:	2330      	movs	r3, #48	; 0x30
 80127d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801299c <_vfiprintf_r+0x24c>
 80127dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80127e0:	f04f 0901 	mov.w	r9, #1
 80127e4:	4623      	mov	r3, r4
 80127e6:	469a      	mov	sl, r3
 80127e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127ec:	b10a      	cbz	r2, 80127f2 <_vfiprintf_r+0xa2>
 80127ee:	2a25      	cmp	r2, #37	; 0x25
 80127f0:	d1f9      	bne.n	80127e6 <_vfiprintf_r+0x96>
 80127f2:	ebba 0b04 	subs.w	fp, sl, r4
 80127f6:	d00b      	beq.n	8012810 <_vfiprintf_r+0xc0>
 80127f8:	465b      	mov	r3, fp
 80127fa:	4622      	mov	r2, r4
 80127fc:	4629      	mov	r1, r5
 80127fe:	4630      	mov	r0, r6
 8012800:	f7ff ff94 	bl	801272c <__sfputs_r>
 8012804:	3001      	adds	r0, #1
 8012806:	f000 80aa 	beq.w	801295e <_vfiprintf_r+0x20e>
 801280a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801280c:	445a      	add	r2, fp
 801280e:	9209      	str	r2, [sp, #36]	; 0x24
 8012810:	f89a 3000 	ldrb.w	r3, [sl]
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 80a2 	beq.w	801295e <_vfiprintf_r+0x20e>
 801281a:	2300      	movs	r3, #0
 801281c:	f04f 32ff 	mov.w	r2, #4294967295
 8012820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012824:	f10a 0a01 	add.w	sl, sl, #1
 8012828:	9304      	str	r3, [sp, #16]
 801282a:	9307      	str	r3, [sp, #28]
 801282c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012830:	931a      	str	r3, [sp, #104]	; 0x68
 8012832:	4654      	mov	r4, sl
 8012834:	2205      	movs	r2, #5
 8012836:	f814 1b01 	ldrb.w	r1, [r4], #1
 801283a:	4858      	ldr	r0, [pc, #352]	; (801299c <_vfiprintf_r+0x24c>)
 801283c:	f7ed fce0 	bl	8000200 <memchr>
 8012840:	9a04      	ldr	r2, [sp, #16]
 8012842:	b9d8      	cbnz	r0, 801287c <_vfiprintf_r+0x12c>
 8012844:	06d1      	lsls	r1, r2, #27
 8012846:	bf44      	itt	mi
 8012848:	2320      	movmi	r3, #32
 801284a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801284e:	0713      	lsls	r3, r2, #28
 8012850:	bf44      	itt	mi
 8012852:	232b      	movmi	r3, #43	; 0x2b
 8012854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012858:	f89a 3000 	ldrb.w	r3, [sl]
 801285c:	2b2a      	cmp	r3, #42	; 0x2a
 801285e:	d015      	beq.n	801288c <_vfiprintf_r+0x13c>
 8012860:	9a07      	ldr	r2, [sp, #28]
 8012862:	4654      	mov	r4, sl
 8012864:	2000      	movs	r0, #0
 8012866:	f04f 0c0a 	mov.w	ip, #10
 801286a:	4621      	mov	r1, r4
 801286c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012870:	3b30      	subs	r3, #48	; 0x30
 8012872:	2b09      	cmp	r3, #9
 8012874:	d94e      	bls.n	8012914 <_vfiprintf_r+0x1c4>
 8012876:	b1b0      	cbz	r0, 80128a6 <_vfiprintf_r+0x156>
 8012878:	9207      	str	r2, [sp, #28]
 801287a:	e014      	b.n	80128a6 <_vfiprintf_r+0x156>
 801287c:	eba0 0308 	sub.w	r3, r0, r8
 8012880:	fa09 f303 	lsl.w	r3, r9, r3
 8012884:	4313      	orrs	r3, r2
 8012886:	9304      	str	r3, [sp, #16]
 8012888:	46a2      	mov	sl, r4
 801288a:	e7d2      	b.n	8012832 <_vfiprintf_r+0xe2>
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	1d19      	adds	r1, r3, #4
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	9103      	str	r1, [sp, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	bfbb      	ittet	lt
 8012898:	425b      	neglt	r3, r3
 801289a:	f042 0202 	orrlt.w	r2, r2, #2
 801289e:	9307      	strge	r3, [sp, #28]
 80128a0:	9307      	strlt	r3, [sp, #28]
 80128a2:	bfb8      	it	lt
 80128a4:	9204      	strlt	r2, [sp, #16]
 80128a6:	7823      	ldrb	r3, [r4, #0]
 80128a8:	2b2e      	cmp	r3, #46	; 0x2e
 80128aa:	d10c      	bne.n	80128c6 <_vfiprintf_r+0x176>
 80128ac:	7863      	ldrb	r3, [r4, #1]
 80128ae:	2b2a      	cmp	r3, #42	; 0x2a
 80128b0:	d135      	bne.n	801291e <_vfiprintf_r+0x1ce>
 80128b2:	9b03      	ldr	r3, [sp, #12]
 80128b4:	1d1a      	adds	r2, r3, #4
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	9203      	str	r2, [sp, #12]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	bfb8      	it	lt
 80128be:	f04f 33ff 	movlt.w	r3, #4294967295
 80128c2:	3402      	adds	r4, #2
 80128c4:	9305      	str	r3, [sp, #20]
 80128c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80129ac <_vfiprintf_r+0x25c>
 80128ca:	7821      	ldrb	r1, [r4, #0]
 80128cc:	2203      	movs	r2, #3
 80128ce:	4650      	mov	r0, sl
 80128d0:	f7ed fc96 	bl	8000200 <memchr>
 80128d4:	b140      	cbz	r0, 80128e8 <_vfiprintf_r+0x198>
 80128d6:	2340      	movs	r3, #64	; 0x40
 80128d8:	eba0 000a 	sub.w	r0, r0, sl
 80128dc:	fa03 f000 	lsl.w	r0, r3, r0
 80128e0:	9b04      	ldr	r3, [sp, #16]
 80128e2:	4303      	orrs	r3, r0
 80128e4:	3401      	adds	r4, #1
 80128e6:	9304      	str	r3, [sp, #16]
 80128e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ec:	482c      	ldr	r0, [pc, #176]	; (80129a0 <_vfiprintf_r+0x250>)
 80128ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128f2:	2206      	movs	r2, #6
 80128f4:	f7ed fc84 	bl	8000200 <memchr>
 80128f8:	2800      	cmp	r0, #0
 80128fa:	d03f      	beq.n	801297c <_vfiprintf_r+0x22c>
 80128fc:	4b29      	ldr	r3, [pc, #164]	; (80129a4 <_vfiprintf_r+0x254>)
 80128fe:	bb1b      	cbnz	r3, 8012948 <_vfiprintf_r+0x1f8>
 8012900:	9b03      	ldr	r3, [sp, #12]
 8012902:	3307      	adds	r3, #7
 8012904:	f023 0307 	bic.w	r3, r3, #7
 8012908:	3308      	adds	r3, #8
 801290a:	9303      	str	r3, [sp, #12]
 801290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801290e:	443b      	add	r3, r7
 8012910:	9309      	str	r3, [sp, #36]	; 0x24
 8012912:	e767      	b.n	80127e4 <_vfiprintf_r+0x94>
 8012914:	fb0c 3202 	mla	r2, ip, r2, r3
 8012918:	460c      	mov	r4, r1
 801291a:	2001      	movs	r0, #1
 801291c:	e7a5      	b.n	801286a <_vfiprintf_r+0x11a>
 801291e:	2300      	movs	r3, #0
 8012920:	3401      	adds	r4, #1
 8012922:	9305      	str	r3, [sp, #20]
 8012924:	4619      	mov	r1, r3
 8012926:	f04f 0c0a 	mov.w	ip, #10
 801292a:	4620      	mov	r0, r4
 801292c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012930:	3a30      	subs	r2, #48	; 0x30
 8012932:	2a09      	cmp	r2, #9
 8012934:	d903      	bls.n	801293e <_vfiprintf_r+0x1ee>
 8012936:	2b00      	cmp	r3, #0
 8012938:	d0c5      	beq.n	80128c6 <_vfiprintf_r+0x176>
 801293a:	9105      	str	r1, [sp, #20]
 801293c:	e7c3      	b.n	80128c6 <_vfiprintf_r+0x176>
 801293e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012942:	4604      	mov	r4, r0
 8012944:	2301      	movs	r3, #1
 8012946:	e7f0      	b.n	801292a <_vfiprintf_r+0x1da>
 8012948:	ab03      	add	r3, sp, #12
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	462a      	mov	r2, r5
 801294e:	4b16      	ldr	r3, [pc, #88]	; (80129a8 <_vfiprintf_r+0x258>)
 8012950:	a904      	add	r1, sp, #16
 8012952:	4630      	mov	r0, r6
 8012954:	f7fb ff24 	bl	800e7a0 <_printf_float>
 8012958:	4607      	mov	r7, r0
 801295a:	1c78      	adds	r0, r7, #1
 801295c:	d1d6      	bne.n	801290c <_vfiprintf_r+0x1bc>
 801295e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012960:	07d9      	lsls	r1, r3, #31
 8012962:	d405      	bmi.n	8012970 <_vfiprintf_r+0x220>
 8012964:	89ab      	ldrh	r3, [r5, #12]
 8012966:	059a      	lsls	r2, r3, #22
 8012968:	d402      	bmi.n	8012970 <_vfiprintf_r+0x220>
 801296a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801296c:	f7fb fdcc 	bl	800e508 <__retarget_lock_release_recursive>
 8012970:	89ab      	ldrh	r3, [r5, #12]
 8012972:	065b      	lsls	r3, r3, #25
 8012974:	f53f af12 	bmi.w	801279c <_vfiprintf_r+0x4c>
 8012978:	9809      	ldr	r0, [sp, #36]	; 0x24
 801297a:	e711      	b.n	80127a0 <_vfiprintf_r+0x50>
 801297c:	ab03      	add	r3, sp, #12
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	462a      	mov	r2, r5
 8012982:	4b09      	ldr	r3, [pc, #36]	; (80129a8 <_vfiprintf_r+0x258>)
 8012984:	a904      	add	r1, sp, #16
 8012986:	4630      	mov	r0, r6
 8012988:	f7fc f9ae 	bl	800ece8 <_printf_i>
 801298c:	e7e4      	b.n	8012958 <_vfiprintf_r+0x208>
 801298e:	bf00      	nop
 8012990:	080157f4 	.word	0x080157f4
 8012994:	08015814 	.word	0x08015814
 8012998:	080157d4 	.word	0x080157d4
 801299c:	08015c2c 	.word	0x08015c2c
 80129a0:	08015c36 	.word	0x08015c36
 80129a4:	0800e7a1 	.word	0x0800e7a1
 80129a8:	0801272d 	.word	0x0801272d
 80129ac:	08015c32 	.word	0x08015c32

080129b0 <__swbuf_r>:
 80129b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b2:	460e      	mov	r6, r1
 80129b4:	4614      	mov	r4, r2
 80129b6:	4605      	mov	r5, r0
 80129b8:	b118      	cbz	r0, 80129c2 <__swbuf_r+0x12>
 80129ba:	6983      	ldr	r3, [r0, #24]
 80129bc:	b90b      	cbnz	r3, 80129c2 <__swbuf_r+0x12>
 80129be:	f7fb fcdf 	bl	800e380 <__sinit>
 80129c2:	4b21      	ldr	r3, [pc, #132]	; (8012a48 <__swbuf_r+0x98>)
 80129c4:	429c      	cmp	r4, r3
 80129c6:	d12b      	bne.n	8012a20 <__swbuf_r+0x70>
 80129c8:	686c      	ldr	r4, [r5, #4]
 80129ca:	69a3      	ldr	r3, [r4, #24]
 80129cc:	60a3      	str	r3, [r4, #8]
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	071a      	lsls	r2, r3, #28
 80129d2:	d52f      	bpl.n	8012a34 <__swbuf_r+0x84>
 80129d4:	6923      	ldr	r3, [r4, #16]
 80129d6:	b36b      	cbz	r3, 8012a34 <__swbuf_r+0x84>
 80129d8:	6923      	ldr	r3, [r4, #16]
 80129da:	6820      	ldr	r0, [r4, #0]
 80129dc:	1ac0      	subs	r0, r0, r3
 80129de:	6963      	ldr	r3, [r4, #20]
 80129e0:	b2f6      	uxtb	r6, r6
 80129e2:	4283      	cmp	r3, r0
 80129e4:	4637      	mov	r7, r6
 80129e6:	dc04      	bgt.n	80129f2 <__swbuf_r+0x42>
 80129e8:	4621      	mov	r1, r4
 80129ea:	4628      	mov	r0, r5
 80129ec:	f7fe fb68 	bl	80110c0 <_fflush_r>
 80129f0:	bb30      	cbnz	r0, 8012a40 <__swbuf_r+0x90>
 80129f2:	68a3      	ldr	r3, [r4, #8]
 80129f4:	3b01      	subs	r3, #1
 80129f6:	60a3      	str	r3, [r4, #8]
 80129f8:	6823      	ldr	r3, [r4, #0]
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	6022      	str	r2, [r4, #0]
 80129fe:	701e      	strb	r6, [r3, #0]
 8012a00:	6963      	ldr	r3, [r4, #20]
 8012a02:	3001      	adds	r0, #1
 8012a04:	4283      	cmp	r3, r0
 8012a06:	d004      	beq.n	8012a12 <__swbuf_r+0x62>
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	07db      	lsls	r3, r3, #31
 8012a0c:	d506      	bpl.n	8012a1c <__swbuf_r+0x6c>
 8012a0e:	2e0a      	cmp	r6, #10
 8012a10:	d104      	bne.n	8012a1c <__swbuf_r+0x6c>
 8012a12:	4621      	mov	r1, r4
 8012a14:	4628      	mov	r0, r5
 8012a16:	f7fe fb53 	bl	80110c0 <_fflush_r>
 8012a1a:	b988      	cbnz	r0, 8012a40 <__swbuf_r+0x90>
 8012a1c:	4638      	mov	r0, r7
 8012a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a20:	4b0a      	ldr	r3, [pc, #40]	; (8012a4c <__swbuf_r+0x9c>)
 8012a22:	429c      	cmp	r4, r3
 8012a24:	d101      	bne.n	8012a2a <__swbuf_r+0x7a>
 8012a26:	68ac      	ldr	r4, [r5, #8]
 8012a28:	e7cf      	b.n	80129ca <__swbuf_r+0x1a>
 8012a2a:	4b09      	ldr	r3, [pc, #36]	; (8012a50 <__swbuf_r+0xa0>)
 8012a2c:	429c      	cmp	r4, r3
 8012a2e:	bf08      	it	eq
 8012a30:	68ec      	ldreq	r4, [r5, #12]
 8012a32:	e7ca      	b.n	80129ca <__swbuf_r+0x1a>
 8012a34:	4621      	mov	r1, r4
 8012a36:	4628      	mov	r0, r5
 8012a38:	f000 f80c 	bl	8012a54 <__swsetup_r>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d0cb      	beq.n	80129d8 <__swbuf_r+0x28>
 8012a40:	f04f 37ff 	mov.w	r7, #4294967295
 8012a44:	e7ea      	b.n	8012a1c <__swbuf_r+0x6c>
 8012a46:	bf00      	nop
 8012a48:	080157f4 	.word	0x080157f4
 8012a4c:	08015814 	.word	0x08015814
 8012a50:	080157d4 	.word	0x080157d4

08012a54 <__swsetup_r>:
 8012a54:	4b32      	ldr	r3, [pc, #200]	; (8012b20 <__swsetup_r+0xcc>)
 8012a56:	b570      	push	{r4, r5, r6, lr}
 8012a58:	681d      	ldr	r5, [r3, #0]
 8012a5a:	4606      	mov	r6, r0
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	b125      	cbz	r5, 8012a6a <__swsetup_r+0x16>
 8012a60:	69ab      	ldr	r3, [r5, #24]
 8012a62:	b913      	cbnz	r3, 8012a6a <__swsetup_r+0x16>
 8012a64:	4628      	mov	r0, r5
 8012a66:	f7fb fc8b 	bl	800e380 <__sinit>
 8012a6a:	4b2e      	ldr	r3, [pc, #184]	; (8012b24 <__swsetup_r+0xd0>)
 8012a6c:	429c      	cmp	r4, r3
 8012a6e:	d10f      	bne.n	8012a90 <__swsetup_r+0x3c>
 8012a70:	686c      	ldr	r4, [r5, #4]
 8012a72:	89a3      	ldrh	r3, [r4, #12]
 8012a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a78:	0719      	lsls	r1, r3, #28
 8012a7a:	d42c      	bmi.n	8012ad6 <__swsetup_r+0x82>
 8012a7c:	06dd      	lsls	r5, r3, #27
 8012a7e:	d411      	bmi.n	8012aa4 <__swsetup_r+0x50>
 8012a80:	2309      	movs	r3, #9
 8012a82:	6033      	str	r3, [r6, #0]
 8012a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a88:	81a3      	strh	r3, [r4, #12]
 8012a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8e:	e03e      	b.n	8012b0e <__swsetup_r+0xba>
 8012a90:	4b25      	ldr	r3, [pc, #148]	; (8012b28 <__swsetup_r+0xd4>)
 8012a92:	429c      	cmp	r4, r3
 8012a94:	d101      	bne.n	8012a9a <__swsetup_r+0x46>
 8012a96:	68ac      	ldr	r4, [r5, #8]
 8012a98:	e7eb      	b.n	8012a72 <__swsetup_r+0x1e>
 8012a9a:	4b24      	ldr	r3, [pc, #144]	; (8012b2c <__swsetup_r+0xd8>)
 8012a9c:	429c      	cmp	r4, r3
 8012a9e:	bf08      	it	eq
 8012aa0:	68ec      	ldreq	r4, [r5, #12]
 8012aa2:	e7e6      	b.n	8012a72 <__swsetup_r+0x1e>
 8012aa4:	0758      	lsls	r0, r3, #29
 8012aa6:	d512      	bpl.n	8012ace <__swsetup_r+0x7a>
 8012aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012aaa:	b141      	cbz	r1, 8012abe <__swsetup_r+0x6a>
 8012aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ab0:	4299      	cmp	r1, r3
 8012ab2:	d002      	beq.n	8012aba <__swsetup_r+0x66>
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	f7ff fbc3 	bl	8012240 <_free_r>
 8012aba:	2300      	movs	r3, #0
 8012abc:	6363      	str	r3, [r4, #52]	; 0x34
 8012abe:	89a3      	ldrh	r3, [r4, #12]
 8012ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ac4:	81a3      	strh	r3, [r4, #12]
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	6063      	str	r3, [r4, #4]
 8012aca:	6923      	ldr	r3, [r4, #16]
 8012acc:	6023      	str	r3, [r4, #0]
 8012ace:	89a3      	ldrh	r3, [r4, #12]
 8012ad0:	f043 0308 	orr.w	r3, r3, #8
 8012ad4:	81a3      	strh	r3, [r4, #12]
 8012ad6:	6923      	ldr	r3, [r4, #16]
 8012ad8:	b94b      	cbnz	r3, 8012aee <__swsetup_r+0x9a>
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ae4:	d003      	beq.n	8012aee <__swsetup_r+0x9a>
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f000 f84d 	bl	8012b88 <__smakebuf_r>
 8012aee:	89a0      	ldrh	r0, [r4, #12]
 8012af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012af4:	f010 0301 	ands.w	r3, r0, #1
 8012af8:	d00a      	beq.n	8012b10 <__swsetup_r+0xbc>
 8012afa:	2300      	movs	r3, #0
 8012afc:	60a3      	str	r3, [r4, #8]
 8012afe:	6963      	ldr	r3, [r4, #20]
 8012b00:	425b      	negs	r3, r3
 8012b02:	61a3      	str	r3, [r4, #24]
 8012b04:	6923      	ldr	r3, [r4, #16]
 8012b06:	b943      	cbnz	r3, 8012b1a <__swsetup_r+0xc6>
 8012b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b0c:	d1ba      	bne.n	8012a84 <__swsetup_r+0x30>
 8012b0e:	bd70      	pop	{r4, r5, r6, pc}
 8012b10:	0781      	lsls	r1, r0, #30
 8012b12:	bf58      	it	pl
 8012b14:	6963      	ldrpl	r3, [r4, #20]
 8012b16:	60a3      	str	r3, [r4, #8]
 8012b18:	e7f4      	b.n	8012b04 <__swsetup_r+0xb0>
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	e7f7      	b.n	8012b0e <__swsetup_r+0xba>
 8012b1e:	bf00      	nop
 8012b20:	20000214 	.word	0x20000214
 8012b24:	080157f4 	.word	0x080157f4
 8012b28:	08015814 	.word	0x08015814
 8012b2c:	080157d4 	.word	0x080157d4

08012b30 <abort>:
 8012b30:	b508      	push	{r3, lr}
 8012b32:	2006      	movs	r0, #6
 8012b34:	f000 f898 	bl	8012c68 <raise>
 8012b38:	2001      	movs	r0, #1
 8012b3a:	f7ee ffeb 	bl	8001b14 <_exit>

08012b3e <__swhatbuf_r>:
 8012b3e:	b570      	push	{r4, r5, r6, lr}
 8012b40:	460e      	mov	r6, r1
 8012b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b46:	2900      	cmp	r1, #0
 8012b48:	b096      	sub	sp, #88	; 0x58
 8012b4a:	4614      	mov	r4, r2
 8012b4c:	461d      	mov	r5, r3
 8012b4e:	da08      	bge.n	8012b62 <__swhatbuf_r+0x24>
 8012b50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012b54:	2200      	movs	r2, #0
 8012b56:	602a      	str	r2, [r5, #0]
 8012b58:	061a      	lsls	r2, r3, #24
 8012b5a:	d410      	bmi.n	8012b7e <__swhatbuf_r+0x40>
 8012b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b60:	e00e      	b.n	8012b80 <__swhatbuf_r+0x42>
 8012b62:	466a      	mov	r2, sp
 8012b64:	f000 f89c 	bl	8012ca0 <_fstat_r>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	dbf1      	blt.n	8012b50 <__swhatbuf_r+0x12>
 8012b6c:	9a01      	ldr	r2, [sp, #4]
 8012b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012b76:	425a      	negs	r2, r3
 8012b78:	415a      	adcs	r2, r3
 8012b7a:	602a      	str	r2, [r5, #0]
 8012b7c:	e7ee      	b.n	8012b5c <__swhatbuf_r+0x1e>
 8012b7e:	2340      	movs	r3, #64	; 0x40
 8012b80:	2000      	movs	r0, #0
 8012b82:	6023      	str	r3, [r4, #0]
 8012b84:	b016      	add	sp, #88	; 0x58
 8012b86:	bd70      	pop	{r4, r5, r6, pc}

08012b88 <__smakebuf_r>:
 8012b88:	898b      	ldrh	r3, [r1, #12]
 8012b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b8c:	079d      	lsls	r5, r3, #30
 8012b8e:	4606      	mov	r6, r0
 8012b90:	460c      	mov	r4, r1
 8012b92:	d507      	bpl.n	8012ba4 <__smakebuf_r+0x1c>
 8012b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012b98:	6023      	str	r3, [r4, #0]
 8012b9a:	6123      	str	r3, [r4, #16]
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	6163      	str	r3, [r4, #20]
 8012ba0:	b002      	add	sp, #8
 8012ba2:	bd70      	pop	{r4, r5, r6, pc}
 8012ba4:	ab01      	add	r3, sp, #4
 8012ba6:	466a      	mov	r2, sp
 8012ba8:	f7ff ffc9 	bl	8012b3e <__swhatbuf_r>
 8012bac:	9900      	ldr	r1, [sp, #0]
 8012bae:	4605      	mov	r5, r0
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f7fb fce1 	bl	800e578 <_malloc_r>
 8012bb6:	b948      	cbnz	r0, 8012bcc <__smakebuf_r+0x44>
 8012bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bbc:	059a      	lsls	r2, r3, #22
 8012bbe:	d4ef      	bmi.n	8012ba0 <__smakebuf_r+0x18>
 8012bc0:	f023 0303 	bic.w	r3, r3, #3
 8012bc4:	f043 0302 	orr.w	r3, r3, #2
 8012bc8:	81a3      	strh	r3, [r4, #12]
 8012bca:	e7e3      	b.n	8012b94 <__smakebuf_r+0xc>
 8012bcc:	4b0d      	ldr	r3, [pc, #52]	; (8012c04 <__smakebuf_r+0x7c>)
 8012bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8012bd0:	89a3      	ldrh	r3, [r4, #12]
 8012bd2:	6020      	str	r0, [r4, #0]
 8012bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bd8:	81a3      	strh	r3, [r4, #12]
 8012bda:	9b00      	ldr	r3, [sp, #0]
 8012bdc:	6163      	str	r3, [r4, #20]
 8012bde:	9b01      	ldr	r3, [sp, #4]
 8012be0:	6120      	str	r0, [r4, #16]
 8012be2:	b15b      	cbz	r3, 8012bfc <__smakebuf_r+0x74>
 8012be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012be8:	4630      	mov	r0, r6
 8012bea:	f000 f86b 	bl	8012cc4 <_isatty_r>
 8012bee:	b128      	cbz	r0, 8012bfc <__smakebuf_r+0x74>
 8012bf0:	89a3      	ldrh	r3, [r4, #12]
 8012bf2:	f023 0303 	bic.w	r3, r3, #3
 8012bf6:	f043 0301 	orr.w	r3, r3, #1
 8012bfa:	81a3      	strh	r3, [r4, #12]
 8012bfc:	89a0      	ldrh	r0, [r4, #12]
 8012bfe:	4305      	orrs	r5, r0
 8012c00:	81a5      	strh	r5, [r4, #12]
 8012c02:	e7cd      	b.n	8012ba0 <__smakebuf_r+0x18>
 8012c04:	0800e319 	.word	0x0800e319

08012c08 <_malloc_usable_size_r>:
 8012c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c0c:	1f18      	subs	r0, r3, #4
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	bfbc      	itt	lt
 8012c12:	580b      	ldrlt	r3, [r1, r0]
 8012c14:	18c0      	addlt	r0, r0, r3
 8012c16:	4770      	bx	lr

08012c18 <_raise_r>:
 8012c18:	291f      	cmp	r1, #31
 8012c1a:	b538      	push	{r3, r4, r5, lr}
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	460d      	mov	r5, r1
 8012c20:	d904      	bls.n	8012c2c <_raise_r+0x14>
 8012c22:	2316      	movs	r3, #22
 8012c24:	6003      	str	r3, [r0, #0]
 8012c26:	f04f 30ff 	mov.w	r0, #4294967295
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012c2e:	b112      	cbz	r2, 8012c36 <_raise_r+0x1e>
 8012c30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012c34:	b94b      	cbnz	r3, 8012c4a <_raise_r+0x32>
 8012c36:	4620      	mov	r0, r4
 8012c38:	f000 f830 	bl	8012c9c <_getpid_r>
 8012c3c:	462a      	mov	r2, r5
 8012c3e:	4601      	mov	r1, r0
 8012c40:	4620      	mov	r0, r4
 8012c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c46:	f000 b817 	b.w	8012c78 <_kill_r>
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d00a      	beq.n	8012c64 <_raise_r+0x4c>
 8012c4e:	1c59      	adds	r1, r3, #1
 8012c50:	d103      	bne.n	8012c5a <_raise_r+0x42>
 8012c52:	2316      	movs	r3, #22
 8012c54:	6003      	str	r3, [r0, #0]
 8012c56:	2001      	movs	r0, #1
 8012c58:	e7e7      	b.n	8012c2a <_raise_r+0x12>
 8012c5a:	2400      	movs	r4, #0
 8012c5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012c60:	4628      	mov	r0, r5
 8012c62:	4798      	blx	r3
 8012c64:	2000      	movs	r0, #0
 8012c66:	e7e0      	b.n	8012c2a <_raise_r+0x12>

08012c68 <raise>:
 8012c68:	4b02      	ldr	r3, [pc, #8]	; (8012c74 <raise+0xc>)
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	6818      	ldr	r0, [r3, #0]
 8012c6e:	f7ff bfd3 	b.w	8012c18 <_raise_r>
 8012c72:	bf00      	nop
 8012c74:	20000214 	.word	0x20000214

08012c78 <_kill_r>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	4d07      	ldr	r5, [pc, #28]	; (8012c98 <_kill_r+0x20>)
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	4604      	mov	r4, r0
 8012c80:	4608      	mov	r0, r1
 8012c82:	4611      	mov	r1, r2
 8012c84:	602b      	str	r3, [r5, #0]
 8012c86:	f7ee ff35 	bl	8001af4 <_kill>
 8012c8a:	1c43      	adds	r3, r0, #1
 8012c8c:	d102      	bne.n	8012c94 <_kill_r+0x1c>
 8012c8e:	682b      	ldr	r3, [r5, #0]
 8012c90:	b103      	cbz	r3, 8012c94 <_kill_r+0x1c>
 8012c92:	6023      	str	r3, [r4, #0]
 8012c94:	bd38      	pop	{r3, r4, r5, pc}
 8012c96:	bf00      	nop
 8012c98:	200063ec 	.word	0x200063ec

08012c9c <_getpid_r>:
 8012c9c:	f7ee bf22 	b.w	8001ae4 <_getpid>

08012ca0 <_fstat_r>:
 8012ca0:	b538      	push	{r3, r4, r5, lr}
 8012ca2:	4d07      	ldr	r5, [pc, #28]	; (8012cc0 <_fstat_r+0x20>)
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	4608      	mov	r0, r1
 8012caa:	4611      	mov	r1, r2
 8012cac:	602b      	str	r3, [r5, #0]
 8012cae:	f7ee ff80 	bl	8001bb2 <_fstat>
 8012cb2:	1c43      	adds	r3, r0, #1
 8012cb4:	d102      	bne.n	8012cbc <_fstat_r+0x1c>
 8012cb6:	682b      	ldr	r3, [r5, #0]
 8012cb8:	b103      	cbz	r3, 8012cbc <_fstat_r+0x1c>
 8012cba:	6023      	str	r3, [r4, #0]
 8012cbc:	bd38      	pop	{r3, r4, r5, pc}
 8012cbe:	bf00      	nop
 8012cc0:	200063ec 	.word	0x200063ec

08012cc4 <_isatty_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4d06      	ldr	r5, [pc, #24]	; (8012ce0 <_isatty_r+0x1c>)
 8012cc8:	2300      	movs	r3, #0
 8012cca:	4604      	mov	r4, r0
 8012ccc:	4608      	mov	r0, r1
 8012cce:	602b      	str	r3, [r5, #0]
 8012cd0:	f7ee ff7f 	bl	8001bd2 <_isatty>
 8012cd4:	1c43      	adds	r3, r0, #1
 8012cd6:	d102      	bne.n	8012cde <_isatty_r+0x1a>
 8012cd8:	682b      	ldr	r3, [r5, #0]
 8012cda:	b103      	cbz	r3, 8012cde <_isatty_r+0x1a>
 8012cdc:	6023      	str	r3, [r4, #0]
 8012cde:	bd38      	pop	{r3, r4, r5, pc}
 8012ce0:	200063ec 	.word	0x200063ec

08012ce4 <_init>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	bf00      	nop
 8012ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cea:	bc08      	pop	{r3}
 8012cec:	469e      	mov	lr, r3
 8012cee:	4770      	bx	lr

08012cf0 <_fini>:
 8012cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cf2:	bf00      	nop
 8012cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cf6:	bc08      	pop	{r3}
 8012cf8:	469e      	mov	lr, r3
 8012cfa:	4770      	bx	lr
